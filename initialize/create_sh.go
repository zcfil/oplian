package initialize

import (
	"io/ioutil"
	"log"
	"os"
)

type ScriptFile struct {
	Name    string `json:"name"`
	Content string `json:"content"`
}

// Script file
var ScriptList = []ScriptFile{
	{
		Name:    "boostrun.sh",
		Content: "#!/bin/bash\n\n#节点worker钱包\nworker=$1\nfull=FULLNODE_API_INFO=$2\nminer=MINER_API_INFO=$3\n#获取 lotus token\nexport $full\n# 获取miner  token\nexport $miner\n# 获取boostd 专用miner token\nexport APISEALER=$miner\n#获取boostd 专用miner token\nexport APISECTORINDEX=$miner\nexport LISTEN_IP=$4\nexport LISTEN_PORT=$5\nexport MainDisk=$6\nmkdir -p  $MainDisk/ipfs/data/boost\n#boost地址\nexport BOOST_PATH=$MainDisk/ipfs/data/boost\n\n# 初始化boostd\n/root/oplian/bin/boostd  --vv init \\\n       --api-sealer=$APISEALER \\\n       --api-sector-index=$APISECTORINDEX \\\n       --wallet-publish-storage-deals=$worker\\\n       --wallet-deal-collateral=$worker\\\n       --max-staging-deals-bytes=50000000000\n\n\nwait\ncat >  /root/oplian/script/run_boost.sh << eof\n#!/usr/bin/env bash\nset -e\ndatetime=\\$(date +'%Y-%m-%d %H:%M:%S')\nexport MainDisk=$6\nexport RUST_LOG=info\nexport IP=\\$(hostname -I | awk '{print \\$NF}')\nexport LOTUS_PATH=\\${MainDisk}/ipfs/data/lotus\nexport LOTUS_MINER_PATH=\\${MainDisk}/ipfs/data/lotusminer\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\\${MainDisk}/filecoin-proof-parameters\nexport FIL_PROOFS_PARENT_CACHE=\\${MainDisk}/filecoin-parents/\n#机械硬盘打开下面两个\nexport REMOVE=\"true\"\nexport SSD=\"true\"\nexport REMOVE=\"true\"\nexport LISTEN_IP=$4\nexport LISTEN_PORT=$5\n\nsysctl -w net.core.rmem_max=2500000\npid=\\$(ps -aux | grep 'boostd --vv run'|grep -v grep | awk '{print \\$2}')\nif [ x\"\\$pid\" = \"x\" ]; then\n        export $full\n        export $miner\n        export APISEALER=$miner\n        export APISECTORINDEX=$miner\n        export BOOST_PATH=\\${MainDisk}/ipfs/data/boost\n        export BOOST_BIN=\"/root/oplian/bin/boostd\"\n                  nohup \\${BOOST_BIN} --vv run >> \\${MainDisk}/ipfs/logs/boost.log &\n                              sudo prlimit --nofile=1048576 --nproc=unlimited --rtprio=99 --nice=-19 --pid \\$!\n                                  else\n                                                        echo \"\\${datetime}  lotus RUNNING  successfully!\"\nfi\nwait\neof\nchmod +x  /root/oplian/script/run_boost.sh\n\ncat >  /etc/supervisor/conf.d/boost.conf  <<EOF\n[program:boost]\ncommand=/root/oplian/script/run_boost.sh\nuser=root\nautostart=true\nautorestart=true\nstopwaitsecs=60\nstartretries=100\nstopasgroup=true\nkillasgroup=true\nstdout_logfile_maxbytes = 10000000MB\nstdout_logfile_backups=25\nredirect_stderr=true\nstdout_logfile=$6/ipfs/logs/boost.log\nEOF\n\nwait\nsupervisorctl   update",
	},
	{
		Name:    "data_catalog.sh",
		Content: "#!/bin/bash\n#判断文件夹是否存在 -d\nLOTUS_MINER_PATH=\"/mnt/md0/ipfs/data/lotusminer\"\nLOTUS_PATH=\"/mnt/md0/ipfs/data/lotus\"\nif [[ ! -d \"$LOTUS_MINER_PATH\" ]] && [[ ! -d \"$LOTUS_PATH\" ]]; then\n echo false\nelse\n echo true\nfi",
	},
	{
		Name:    "disk_array.sh",
		Content: "#!/bin/bash\n##获取磁盘盘符，程序传参：\ndisknum=$1\na=$2\ndiskdrive=$(echo $a | sed 's/,/ /g')\n\n##创建md0下的logs目录\nmkdir -p /mnt/md0/ipfs/logs/\n\n##判断如存在是否存在块设备md0阵列存在退出\n# 获取所有已定义的软件 RAID 块设备名称\nRAID_DEVICES=$(cat /proc/mdstat | grep md  |awk   '{print  $4}')\n# 判断是否存在 'raid0' 块设备\nif [[ \"$RAID_DEVICES\" == *\"raid0\"* ]]; then\n  echo \"raid0 exists.\"\n  if mount | grep /mnt/md0 | grep -q '^/dev/md*'; then\n    echo \"/md0 挂载在一个 md 设备上\"\nelse\n    echo \"/md0 未挂载在一个 md 设备上\"\n    df -h  |grep  'dev/md' |awk '{print \"umount -lf \" $NF}'  |bash\n\t  mount  /dev/md*   /mnt/md0/\nfi\n  exit 1\nelse\n\n##如果没有RAID进行组阵列\n# 检查 /mnt/md0/ 目录是否已经存在，不存在则创建\nif [ ! -d \"/mnt/md0/\" ]; then\n  echo \"Warning: /mnt/md0/ does not exist, creating...\"\n  mkdir -p /mnt/md0/\nfi\n\n#########\n\n# 卸载md0\numount -lf  /mnt/disk*\nsleep 5\numount -lf  /mnt/md0\n\necho y | mdadm --create /dev/md0  --level=0 --raid-devices=${disknum} ${diskdrive}\n\nif [ $? -ne 0 ]; then\n    echo -e \"\\033[32m failed \\033[0m\"\nelse\n    echo -e \"\\033[32m mdo created succeed \\033[0m\"\nfi\n\n# Wait for the array to be created\nwhile [ ! -e /dev/md0 ]; do\n   sleep 3\ndone\n\n#格式化raid0\nmkfs.xfs -f /dev/md0\n\nif [ $? -ne 0 ]; then\n    echo -e \"\\033[32m failed \\033[0m\"\nelse\n    echo -e \"\\033[32m mdo init succeed \\033[0m\"\nfi\n\n#挂载md0\n[ $(mount -l | grep /mnt/md0 | wc -l) -eq 1 ] || ( mkdir -p /mnt/md0 && sudo mount /dev/md0 /mnt/md0  )\ndiskid=`ls -la /dev/disk/by-uuid/ | grep md0 | awk '{print $9}'`\ngrep -i md0 /etc/fstab\nif [ $? -eq 0 ]; then\n    echo -e \"\\033[32m fstabmdo already exists \\033[0m\"\nelse\nmdadm -Ds >> /etc/mdadm/mdadm.conf\nfi\n\nfi\n\necho $disknum\necho $diskdrive\n",
	},
	{
		Name:    "disk_initialization.sh",
		Content: "#!/bin/bash\nexport LC_ALL=en_US.UTF-8\nmounted_disks=()\ncounter=1\n{\n    lsblk -f | grep raid -v | egrep '/$|/boot|LVM' -v | awk '{print $3}'\n    lsblk -f | grep raid -v | egrep '/$|/boot|LVM' -v | awk '{print $4}'\n} | grep - | sort -nr | uniq |\nwhile read -r disk_uuid; do\n    if [[ ! \" ${mounted_disks[@]} \" =~ \" $disk_uuid \" ]]; then\n        disk_path=\"/dev/disk/by-uuid/$disk_uuid\"\n        disk_path_dev=$(ls  -l  ${disk_path}   |  awk  -F '/' '{print $NF}')  \n\t    disk_path_2=$(lsblk -f |grep  -w  ${disk_path_dev}  |awk   '{print $NF}'|sort  -nr|uniq)  \n        mount_path=\"/mnt/disk$counter\"\n        if [[ $(mount -l | mount -l | egrep  ^/dev|grep   -w \"$disk_path_2\" | wc -l) -eq 0 ]]; then\n          while [[ $(mount -l |egrep  ^/dev|grep   -w \"$mount_path\" | wc -l) -ne 0 ]]; do\n                ((counter++))\n                mount_path=\"/mnt/disk$counter\"\n            done\n            mkdir -p \"$mount_path\"\n            mount \"$disk_path\" \"$mount_path\"\n            mounted_disks+=(\"$disk_uuid\")\n        fi\n\n    fi\ndone\n",
	},
	{
		Name:    "disk_power_initialization.sh",
		Content: "#!/bin/bash\nmounted_disks=()\ncounter=0\ndisk1=$(lsblk -f | grep raid -v | egrep '/$|/boot|LVM'  |awk  '{print $1}' |sed  -n 's/└─//p'|sed  -n s'/p.//p' ; lsblk -o NAME,MOUNTPOINT | grep  /$  | awk '{print $1}'|sed  's/└─//' |egrep s[a-z]+  -o)\nlsblk --output NAME,SIZE,ROTA --bytes | awk '$3 == \"0\" {print $1, $2}'  |sed 's#└─##'|sed 's#├─##' |sort -k2 -hr |uniq |grep  ${disk1} -v  |awk  '{print $1}' |while read -r disk_uuid; do\n    if [[ ! \" ${mounted_disks[@]} \" =~ \" $disk_uuid \" ]]; then\n        disk_path=\"/dev/$disk_uuid\"   \n\t    disk_path_2=$(lsblk -f |grep  -w  ${disk_uuid}  |awk   '{print $NF}'|sort  -nr|uniq)\n        mount_path=\"/mnt/md$counter\"\n        if [[ $(mount -l | mount -l | egrep  ^/dev|grep   -w \"$disk_path_2\" | wc -l) -eq 0 ]]; then\n          while [[ $(mount -l |egrep  ^/dev|grep   -w \"$mount_path\" | wc -l) -ne 0 ]]; do\n                ((counter++))\n                mount_path=\"/mnt/md$counter\"\n            done\n            mkdir -p \"$mount_path\"\n            mount \"$disk_path\" \"$mount_path\"\n            mounted_disks+=(\"$disk_uuid\")\n        fi\n\n    fi\ndone",
	},
	{
		Name:    "disk_nfs_sync.sh",
		Content: "#!/bin/bash\nsource   /etc/profile\nMD5Context1=$(md5sum  /etc/exports  |awk  '{print $1}')\noutput=$(lsblk -f | grep - | grep /$ -v|grep  /boot -v  | awk '{print $NF}' | grep ^/ | sort -nr | uniq)\nfor i in $output; do\n  if [ -f \"/etc/exports\" ]; then\n    if grep -wq \"^$i\" /etc/exports; then\n      echo \"$i 已存在于 /etc/exports 文件中，忽略操作\"\n    else\n      echo \"$i *(rw,no_root_squash,no_subtree_check,async)\" >> /etc/exports\n      echo \"已将结果 $i 追加到 /etc/exports 文件\"\n    fi\n  else\n    echo \"/etc/exports 文件不存在\"\n  fi\ndone\nMD5Context2=$(md5sum  /etc/exports  |awk  '{print $1}')\n  if [ \"$MD5Context1\" != \"$MD5Context2\" ]; then\n      echo \"文件内容发生了变化,重启服务端\"\n      systemctl restart nfs-kernel-server.service\n    else\n      echo  \"未操作\"\n  fi\n\n",
	},
	{
		Name:    "disk_rw_rate.sh",
		Content: "#!/bin/bash\n \n# 文件路径和名称\nfile=$1\n \n# 块大小和数量\nblock_size=\"1M\"\nblock_count=$((32*1024))\n\n# 测试参数\ntest_time=60     # 测试时长（秒）\n\n# 初始化测试文件，以确保测试时正确反映磁盘性能\n#echo \"Initializing test file...\"\ndd if=/dev/zero of=$file bs=$block_size count=$block_count  > /dev/null 2>&1  && sync  > /dev/null 2>&1 \n\n# 测试读取速率\n#echo \"Testing read speed...\"\ndd if=$file of=/dev/null bs=$block_size count=$block_count iflag=direct 2>&1 |awk -F, '{print $4}' \n\n# 测试写入速率\n#echo \"Testing write speed...\"\ndd if=/dev/zero of=$file bs=$block_size count=$block_count oflag=direct 2>&1 |awk -F, '{print $4}' \n\nrm  ${file}\n#echo \"Done.\"\n",
	},
	{
		Name:    "get_wdpost_balance.sh",
		Content: "#!/bin/bash\nminer=`/usr/local/sbin/lotus-miner info --hide-sectors-info | grep Miner | grep sectors | awk '{print $2}'`\n/usr/local/sbin/lotus-miner  actor control list  > /tmp/lotus-miner.txt\nbalnce=`/usr/local/sbin/lotus-miner  actor control list | grep post | awk '{print $5}'| sed 's/\\x1b\\[[^\\x1b]*m//g'|awk  -F. '{print $1}'`\necho \"post_balnce:${balnce}\"",
	},
	{
		Name:    "host_down.sh",
		Content: "#!/bin/bash\nmount -l | grep 10.0. | awk '{print $3}' |grep -v md0| awk -F \"/\" '{print $3}' | uniq > /tmp/ip.txt\nip=`cat /tmp/ip.txt`\ntouch /tmp/true\nfor i in $ip\ndo\n    ping -c 3 -i 0.01 -W 3 $i &> /dev/null\n    if [ $? -eq 0 ]\n    then\n        echo \"$i:true\" >> /tmp/true\n    else\n        echo \"$i:false\"\n    fi\ndone\n    file=\"/tmp/true\"\n    size=$(wc -c < \"$file\")\n    if [[ $size -eq 0 ]];then\n#        echo \"未挂载\"\n        echo \"true\"\n    else\n    cat /tmp/true | awk -F: '{print $2}' | uniq | xargs echo\n    fi\n> /tmp/true",
	},
	{
		Name:    "host_system_initialization.sh",
		Content: "#!/bin/bash\n# @Author: Brady\n# @Description: Ubuntu TLS Security Initiate\n# @Create Time:  2020年6月2日 13:53:00\n# @Last Modified time: 2022-11-2 09:06:31\n# @E-mail: master@brady.top\n# @Blog: https://www.brady.top\n# @Version: 3.2\n#-------------------------------------------------#\n# 脚本主要功能说明:\n# (1) Ubuntu 系统初始化操作包括IP地址设置、基础软件包更新以及安装加固。\n# (2) Ubuntu 系统基于等保3.0部分、安全加固。\n#-------------------------------------------------#\n\n## 系统全局变量定义\nusername=zcxtong\nSSHPORT=20480\nROOTPASS='ZCxtongtest@2023!+'  # 密码建议12位以上且包含数字、大小写字母以及特殊字符。\nAPPPASS='ZCxtongtel@2022!+'   \n\n## 名称: err 、info 、warning\n## 用途：全局Log信息打印函数\n## 参数: $@\nlogerr() {\n  printf \"[$(date +'%Y-%m-%dT%H:%M:%S')]: \\033[31mERROR: $@ \\033[0m\\n\"\n}\nloginfo() {\n  printf \"[$(date +'%Y-%m-%dT%H:%M:%S')]: \\033[32mINFO: $@ \\033[0m\\n\"\n}\nlogwarning() {\n  printf \"[$(date +'%Y-%m-%dT%H:%M:%S')]: \\033[33mWARNING: $@ \\033[0m\\n\"\n}\n\n\n## 名称: os::Network\n## 用途: 网络配置相关操作脚本包括(IP地址修改)\n## 参数: 无\nosNetwork () {\n  loginfo \"[-] 操作系统网络配置相关脚本,开始执行.....\"\n# (1) 卸载多余软件，例如 snap 软件及其服务\nsystemctl stop snapd snapd.socket #停止snapd相关的进程服务\napt autoremove --purge -y snapd\nsystemctl daemon-reload\nrm -rf ~/snap /snap /var/snap /var/lib/snapd /var/cache/snapd /run/snapd\n}\n\n## 名称: os::TimedataZone\n## 用途: 操作系统时间与时区同步配置\n## 参数: 无\nosTimedataZone () {\n  loginfo \"[*] 操作系统系统时间时区配置相关脚本,开始执行.....\"\n\n# (1) 时间同步服务端容器(可选也可以用外部ntp服务器) : docker run -d --rm --cap-add SYS_TIME -e ALLOW_CIDR=0.0.0.0/0 -p 123:123/udp geoffh1977/chrony\necho \"同步前的时间: $(date -R)\"\n\n# 方式1.Chrony 客户端配置\nsudo apt install chrony\nsudo grep -q \"aliyun\" /etc/chrony/chrony.conf || sudo tee -a /etc/chrony/chrony.conf <<'EOF'\npool ntp.aliyun.com iburst maxsources 4\nkeyfile /etc/chrony/chrony.keys\ndriftfile /var/lib/chrony/chrony.drift\nlogdir /var/log/chrony\nmaxupdateskew 100.0\nrtcsync\n# 允许跳跃式校时 如果在前 3 次校时中时间差大于 1.0s\nmakestep 1 3\nEOF\nsystemctl enable chronyd && systemctl restart chronyd && systemctl status chronyd -l\n\n\n# (2) 时区与地区设置:\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\ntimedatectl set-timezone Asia/Shanghai\n# dpkg-reconfigure tzdata  # 修改确认\n# bash -c \"echo 'Asia/Shanghai' > /etc/timezone\" # 与上一条命令一样\n# 将当前的 UTC 时间写入硬件时钟 (硬件时间默认为UTC)\ntimedatectl set-local-rtc 0\n# 启用NTP时间同步：\ntimedatectl set-ntp yes\n# 校准时间服务器-时间同步(推荐使用chronyc进行平滑同步)\nchronyc tracking\n# 手动校准-强制更新时间\n# chronyc -a makestep\n# 系统时钟同步硬件时钟\n# hwclock --systohc\nhwclock -w\n\n# (3) 重启依赖于系统时间的服务\nsystemctl restart rsyslog.service cron.service\nloginfo \"[*] Tie confmigure modifiy successful! restarting chronyd rsyslog.service crond.service.........\"\ntimedatectl\n}\n\n\n## 名称: os::Security\n## 用途: 操作系统安全加固配置脚本(符合等保要求-三级要求)\n## 参数: 无\nosSecurity () {\n  loginfo \"正在进行->操作系统安全加固(符合等保要求-三级要求)配置\"\n\n# (0) 系统用户核查配置\n  loginfo \"[-] 锁定或者删除多余的系统账户以及创建低权限用户\"\ndefaultuser=(root daemon bin sys games man lp mail news uucp proxy www-data backup list irc gnats nobody systemd-network systemd-resolve systemd-timesync messagebus syslog _apt tss uuidd tcpdump landscape pollinate usbmux sshd systemd-coredump _chrony)\nfor i in $(cat /etc/passwd | cut -d \":\" -f 1,7);do\n  flag=0; name=${i%%:*}; terminal=${i##*:}\n  if [[ \"${terminal}\" == \"/bin/bash\" || \"${terminal}\" == \"/bin/sh\" ]];then\n    log::warning \"${i} 用户，shell终端为 /bin/bash 或者 /bin/sh\"\n  fi\n  for j in ${defaultuser[@]};do\n    if [[ \"${name}\" == \"${j}\" ]];then\n      flag=1\n      break;\n    fi\n  done\n  if [[ $flag -eq 0 ]];then\n    log::warning \"${i} 非默认用户\"\n  fi\ndone\npasswd -l adm&>/dev/null 2&>/dev/null; passwd -l daemon&>/dev/null 2&>/dev/null; passwd -l bin&>/dev/null 2&>/dev/null; passwd -l sys&>/dev/null 2&>/dev/null; passwd -l lp&>/dev/null 2&>/dev/null; passwd -l uucp&>/dev/null 2&>/dev/null; passwd -l nuucp&>/dev/null 2&>/dev/null; passwd -l smmsplp&>/dev/null 2&>/dev/null; passwd -l mail&>/dev/null 2&>/dev/null; passwd -l operator&>/dev/null 2&>/dev/null; passwd -l games&>/dev/null 2&>/dev/null; passwd -l gopher&>/dev/null 2&>/dev/null; passwd -l ftp&>/dev/null 2&>/dev/null; passwd -l nobody&>/dev/null 2&>/dev/null; passwd -l nobody4&>/dev/null 2&>/dev/null; passwd -l noaccess&>/dev/null 2&>/dev/null; passwd -l listen&>/dev/null 2&>/dev/null; passwd -l webservd&>/dev/null 2&>/dev/null; passwd -l rpm&>/dev/null 2&>/dev/null; passwd -l dbus&>/dev/null 2&>/dev/null; passwd -l avahi&>/dev/null 2&>/dev/null; passwd -l mailnull&>/dev/null 2&>/dev/null; passwd -l nscd&>/dev/null 2&>/dev/null; passwd -l vcsa&>/dev/null 2&>/dev/null; passwd -l rpc&>/dev/null 2&>/dev/null; passwd -l rpcuser&>/dev/null 2&>/dev/null; passwd -l nfs&>/dev/null 2&>/dev/null; passwd -l sshd&>/dev/null 2&>/dev/null; passwd -l pcap&>/dev/null 2&>/dev/null; passwd -l ntp&>/dev/null 2&>/dev/null; passwd -l haldaemon&>/dev/null 2&>/dev/null; passwd -l distcache&>/dev/null 2&>/dev/null; passwd -l webalizer&>/dev/null 2&>/dev/null; passwd -l squid&>/dev/null 2&>/dev/null; passwd -l xfs&>/dev/null 2&>/dev/null; passwd -l gdm&>/dev/null 2&>/dev/null; passwd -l sabayon&>/dev/null 2&>/dev/null; passwd -l named&>/dev/null 2&>/dev/null\nuserdel -r lxd\ngroupdel lxd\n\n# (2) 用户密码设置和口令策略设置\n  loginfo \"[-]  配置满足策略的root管理员密码 \"\n#echo  ${ROOTPASS} | passwd --stdin root\necho \"root:$ROOTPASS\" | chpasswd\nloginfo \"[-] 配置满足策略的app普通用户密码(根据需求配置)\"\ngroupadd application\ngpasswd -a zcxtong application\nuseradd -m -s /bin/bash -c \"application primary user\" -g application $username\n#echo ${APPPASS} | passwd --stdin $username\necho \"$username:$APPPASS\" | chpasswd\n\n\n  loginfo \"[-] 存储用户密码的文件，其内容经过sha512加密，所以非常注意其权限\"\ntouch /etc/security/opasswd && chown root:root /etc/security/opasswd && chmod 600 /etc/security/opasswd\n#userdel -r yungo\n\n\n# (3) 用户sudo权限以及重要目录和文件的权限设置\n  loginfo \"[-] 用户sudo权限以及重要目录和文件的新建默认权限设置\"\n# 如uBuntu安装时您创建的用户 yungo 防止直接通过 passwd 修改root密码(此时必须要求输入yungo密码后才可修改root密码)\n# Tips: Sudo允许授权用户权限以另一个用户（通常是root用户）的身份运行程序,\nsed -i \"/# Members of the admin/i ${username} ALL=(ALL) NOPASSWD:ALL\" /etc/sudoers\n  loginfo \"[-] 配置用户 umask 为027 \"\negrep -q \"^\\s*umask\\s+\\w+.*$\" /etc/profile && sed -ri \"s/^\\s*umask\\s+\\w+.*$/umask 027/\" /etc/profile || echo \"umask 027\" >> /etc/profile\negrep -q \"^\\s*umask\\s+\\w+.*$\" /etc/bash.bashrc && sed -ri \"s/^\\s*umask\\s+\\w+.*$/umask 027/\" /etc/bashrc || echo \"umask 027\" >> /etc/bash.bashrc\n# loginfo \"[-] 设置用户目录创建默认权限, (初始为077比较严格)在未设置umask为027 则默认为077\"\n# egrep -q \"^\\s*(umask|UMASK)\\s+\\w+.*$\" /etc/login.defs && sed -ri \"s/^\\s*(umask|UMASK)\\s+\\w+.*$/UMASK 022/\" /etc/login.defs || echo \"UMASK 022\" >> /etc/login.defs\n\n  loginfo \"[-] 设置或恢复重要目录和文件的权限\"\nchmod 755 /etc;\nchmod 777 /tmp;\nchmod 700 /etc/inetd.conf&>/dev/null 2&>/dev/null;\nchmod 755 /etc/passwd;\nchmod 755 /etc/shadow;\nchmod 644 /etc/group;\nchmod 755 /etc/security;\nchmod 644 /etc/services;\nchmod 750 /etc/rc*.d\nchmod 600 ~/.ssh/authorized_keys\n\n  loginfo \"[-] 删除潜在威胁文件 \"\nfind / -maxdepth 3 -name hosts.equiv | xargs rm -rf\nfind / -maxdepth 3 -name .netrc | xargs rm -rf\nfind / -maxdepth 3 -name .rhosts | xargs rm -rf\n\n\n# (4) SSHD 服务安全加固设置\nloginfo \"[-] sshd 服务安全加固设置\"\n# 严格模式\negrep -q \"^\\s*StrictModes\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*StrictModes\\s+.+$/StrictModes yes/\" /etc/ssh/sshd_config || echo \"StrictModes yes\" >> /etc/ssh/sshd_config\n# 监听端口更改\nif [ -e ${SSHPORT} ];then export SSHPORT=20480;fi\negrep -q \"^\\s*Port\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*Port\\s+.+$/Port ${SSHPORT}/\" /etc/ssh/sshd_config || echo \"Port ${SSHPORT}\" >> /etc/ssh/sshd_config\n# 启用密钥登录,禁止密码登录\negrep -q \"^(#)?\\s*PubkeyAuthentication\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*PubkeyAuthentication\\s+.+$/PubkeyAuthentication yes/\" /etc/ssh/sshd_config || echo \"PubkeyAuthentication yes\" >> /etc/ssh/sshd_config\negrep -q \"^\\s*ChallengeResponseAuthentication\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*ChallengeResponseAuthentication\\s+.+$/ChallengeResponseAuthentication no/\" /etc/ssh/sshd_config || echo \"ChallengeResponseAuthentication no\" >> /etc/ssh/sshd_config\negrep -q \"^\\s*UsePAM\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*UsePAM\\s+.+$/UsePAM yes/\" /etc/ssh/sshd_config || echo \"UsePAM yes\" >> /etc/ssh/sshd_config\negrep -q \"^(#)?\\s*PasswordAuthentication\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*PasswordAuthentication\\s+.+$/PasswordAuthentication no/\" /etc/ssh/sshd_config || echo \"PasswordAuthentication no\" >> /etc/ssh/sshd_config\n# 禁用X11转发以及端口转发\negrep -q \"^\\s*X11Forwarding\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*X11Forwarding\\s+.+$/X11Forwarding no/\" /etc/ssh/sshd_config || echo \"X11Forwarding no\" >> /etc/ssh/sshd_config\negrep -q \"^\\s*X11UseLocalhost\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*X11UseLocalhost\\s+.+$/X11UseLocalhost yes/\" /etc/ssh/sshd_config || echo \"X11UseLocalhost yes\" >> /etc/ssh/sshd_config\negrep -q \"^\\s*AllowTcpForwarding\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*AllowTcpForwarding\\s+.+$/AllowTcpForwarding no/\" /etc/ssh/sshd_config || echo \"AllowTcpForwarding no\" >> /etc/ssh/sshd_config\negrep -q \"^\\s*AllowAgentForwarding\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*AllowAgentForwarding\\s+.+$/AllowAgentForwarding no/\" /etc/ssh/sshd_config || echo \"AllowAgentForwarding no\" >> /etc/ssh/sshd_config\n# 关闭禁用用户的 .rhosts 文件  ~/.ssh/.rhosts 来做为认证: 缺省IgnoreRhosts yes\negrep -q \"^(#)?\\s*IgnoreRhosts\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^(#)?\\s*IgnoreRhosts\\s+.+$/IgnoreRhosts yes/\" /etc/ssh/sshd_config || echo \"IgnoreRhosts yes\" >> /etc/ssh/sshd_config\n# 禁止root远程登录（推荐配置-根据需求配置）\negrep -q \"^\\s*PermitRootLogin\\s+.+$\" /etc/ssh/sshd_config && sed -ri \"s/^\\s*PermitRootLogin\\s+.+$/PermitRootLogin no/\" /etc/ssh/sshd_config || echo \"PermitRootLogin no\" >> /etc/ssh/sshd_config\n# 登陆前后欢迎提示设置\negrep -q \"^\\s*(banner|Banner)\\s+\\W+.*$\" /etc/ssh/sshd_config && sed -ri \"s/^\\s*(banner|Banner)\\s+\\W+.*$/Banner \\/etc\\/issue/\" /etc/ssh/sshd_config || \\\necho \"Banner /etc/issue\" >> /etc/ssh/sshd_config\nloginfo \"[-] 远程SSH登录前后提示警告Banner设置\"\n# SSH登录前警告Banner\ntee /etc/issue <<'EOF'\n****************** [ 安全登陆 (Security Login) ] *****************\nAuthorized only. All activity will be monitored and reported.By Security Center.\n\nEOF\n# SSH登录后提示Banner\nsed -i '/^fi/a\\\\n\\necho \"\\\\e[1;37;41;5m################## 安全运维 (Security Operation) ####################\\\\e[0m\"\\necho \"\\\\e[32mLogin success. Please execute the commands and operation data carefully.By\\\\e[0m\"' /etc/update-motd.d/00-header\nsystemctl stop multipathd.socket && systemctl restart sshd\n\n\n# (5) 用户远程登录失败次数与终端超时设置\n  loginfo \"[-] 用户远程连续登录失败5次锁定帐号5分钟包括root账号\"\nsed -ri \"/^\\s*auth\\s+required\\s+pam_tally2.so\\s+.+(\\s*#.*)?\\s*$/d\" /etc/pam.d/sshd\nsed -ri '2a auth required pam_tally2.so deny=5 unlock_time=300 even_deny_root root_unlock_time=300' /etc/pam.d/sshd\n# 宿主机控制台登陆(可选)\n# sed -ri \"/^\\s*auth\\s+required\\s+pam_tally2.so\\s+.+(\\s*#.*)?\\s*$/d\" /etc/pam.d/login\n# sed -ri '2a auth required pam_tally2.so deny=5 unlock_time=300 even_deny_root root_unlock_time=300' /etc/pam.d/login\n\n  loginfo \"[-] 设置登录超时时间为10分钟 \"\negrep -q \"^\\s*(export|)\\s*TMOUT\\S\\w+.*$\" /etc/profile && sed -ri \"s/^\\s*(export|)\\s*TMOUT.\\S\\w+.*$/export TMOUT=600\\nreadonly TMOUT/\" /etc/profile || echo -e \"export TMOUT=600\\nreadonly TMOUT\" >> /etc/profile\negrep -q \"^\\s*.*ClientAliveInterval\\s\\w+.*$\" /etc/ssh/sshd_config && sed -ri \"s/^\\s*.*ClientAliveInterval\\s\\w+.*$/ClientAliveInterval 600/\" /etc/ssh/sshd_config || echo \"ClientAliveInterval 600\" >> /etc/ssh/sshd_config\n\n\n# (5) 切换用户日志记录或者切换命令更改(可选)\n  loginfo \"[-] 切换用户日志记录和切换命令更改名称为SU \"\negrep -q \"^(\\s*)SULOG_FILE\\s+\\S*(\\s*#.*)?\\s*$\" /etc/login.defs && sed -ri \"s/^(\\s*)SULOG_FILE\\s+\\S*(\\s*#.*)?\\s*$/\\SULOG_FILE  \\/var\\/log\\/.history\\/sulog/\" /etc/login.defs || echo \"SULOG_FILE  /var/log/.history/sulog\" >> /etc/login.defs\negrep -q \"^\\s*SU_NAME\\s+\\S*(\\s*#.*)?\\s*$\" /etc/login.defs && sed -ri \"s/^(\\s*)SU_NAME\\s+\\S*(\\s*#.*)?\\s*$/\\SU_NAME  switch_user/\" /etc/login.defs || echo \"SU_NAME  switch_user\" >> /etc/login.defs\nmkdir -vp /var/log/.backups /usr/local/bin /var/log/.history\ncp /usr/bin/su /var/.backups/su.bak\nmv /usr/bin/su /usr/bin/SU\nchmod 777 /var/log/.history\n\n# (6) 用户终端执行的历史命令记录\nloginfo \"[-] 用户终端执行的历史命令记录 \"\negrep -q \"^HISTSIZE\\W\\w+.*$\" /etc/profile && sed -ri \"s/^HISTSIZE\\W\\w+.*$/HISTSIZE=101/\" /etc/profile || echo \"HISTSIZE=101\" >> /etc/profile\n# 方式1\ntee /etc/profile.d/history-record.sh <<'EOF'\n# 历史命令执行记录文件路径\nLOGTIME=$(date +%Y%m%d-%H-%M-%S)\nexport HISTFILE=\"/var/log/.history/${USER}.${LOGTIME}.history\"\nif [ ! -f ${HISTFILE} ];then\n  touch ${HISTFILE}\nfi\nchmod 600 /var/log/.history/${USER}.${LOGTIME}.history\n# 历史命令执行文件大小记录设置\nHISTFILESIZE=128\nHISTTIMEFORMAT=\"%F_%T $(whoami)#$(who -u am i 2>/dev/null| awk '{print $NF}'|sed -e 's/[()]//g'):\"\nEOF\n\n\n\n# (7) GRUB 安全设置 （需要手动设置请按照需求设置）\n  loginfo \"[-] 系统 GRUB 安全设置(防止物理接触从grub菜单中修改密码) \"\n# Grub 关键文件备份\nsudo cp -a /etc/grub.d/00_header /var/log/.backups\nsudo cp -a /etc/grub.d/10_linux /var/log/.backups\n# 设置Grub菜单界面显示时间\nsudo sed -i -e 's|GRUB_TIMEOUT_STYLE=hidden|#GRUB_TIMEOUT_STYLE=hidden|g' -e 's|GRUB_TIMEOUT=0|GRUB_TIMEOUT=3|g' /etc/default/grub\nsudo sed -i -e 's|set timeout_style=${style}|#set timeout_style=${style}|g' -e 's|set timeout=${timeout}|set timeout=3|g' /etc/grub.d/00_header\n# 创建认证密码 (此处密码: 自定义手动输入)\nsudo grub-mkpasswd-pbkdf2\n# Enter password:\n# Reenter password:\n# 设置认证用户以及password_pbkdf2认证\nsudo tee -a /etc/grub.d/00_header <<'END'\nsudo cat <<'EOF'\n# GRUB Authentication\nset superusers=\"grub\"\npassword_pbkdf2 grub grub.pbkdf2.sha512.10000.5FD0269A1E1216B31ED1F127DF6E47D164D85E37E6187A48341F5665092CC752DB1527C0D928080A3440C0F46E7B7C749EC3582AF0F02951EB0FB01F9F8424D0.1466487161CC5866FCE719D95DD1D70FAF67B4F8601804DC74B3FE3C82506648942FF7073C8BFCFE268FBC0D545BED047A7763D0131E0ABBF8A4E0922C52EFD5\nEOF\nEND\n\nsudo sed -i '/echo \"$title\" | grub_quote/ { s/menuentry /menuentry --user=grub /;}' /etc/grub.d/10_linux\nsudo sed -i '/echo \"$os\" | grub_quote/ { s/menuentry /menuentry --unrestricted /;}' /etc/grub.d/10_linux\n\n# Ubuntu 方式更新GRUB从而生成boot启动文件。\nsudo update-grub\n\n\n# (8) 操作系统防火墙启用以及策略设置\n#  loginfo \"[-] 系统防火墙启用以及规则设置 \"\n# systemctl enable ufw.service && systemctl start ufw.service && ufw enable\n# ufw allow proto tcp from 172.10.2.0/24 to any port 20480\n# ufw allow proto tcp from 10.0.3.0/16 to any port 20480\n# ufw allow proto tcp to any port 20597\n\n# (9) 核心文件加上不可更改属性\n  loginfo \"[-] 核心文件加上不可更改属性 \"\nsudo mkdir -p /home/$username/.ssh && sudo touch /home/$username/.ssh/authorized_keys\nsudo chown -R $username:application /home/$username/\n\nsudo cat > /home/$username/.ssh/authorized_keys  << EOF\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCoZ6vHOWm8UfIZqEsy4NSmyFLRf9RORIqeuck3JcCujK+NmdNDbujUwSzP4utybeZxFQFrfI1D7ArzC0scZcArix7hzdeEChscVCWTBxnvqEG1ZqeLvTnAr7UrWw202jTamDcjKdeKlz7rXq6uhDJmj8r5VQLt+r67ajLjHLb+YrkrNQeGu3726ps+CEtOh9LNJRiOKDa0cjeU70dWFCkKi4uqIJoW/zjnFXpEoovvPSgEzmnBI2RwWOYCICAUoYTsOz3x56UcQ5wGxQhvoU1HukF8Psi9+7VAlUPtNjqNqpPKCnIXcTFEGxpl4PoVcSWj40xjiwC1bX8FnWUPisHYQNXorK7S7jCj/7jEnJOVrUPv9qPfUIWm91M7+9jqu6ixZZjKJep/P/hjmP8OE2MqqqN4UEoQB+tJ0RF89fBPQNCCdbwji5utG1gPBcwdVhKju9Aq3jFxyfwzXG/VNuhBU79JaEUZZmEUwGirw6gE88aO4Sn128XPmGnvw2/rf4E= root@test\nEOF\nsudo chattr +iae /root/.ssh/authorized_keys\nsudo chattr +iae /home/$username/.ssh/authorized_keys\n\n\n#(10) 敏感命令提醒\n  loginfo \"[-] 敏感命令提醒 \"\nsudo  touch /etc/profile.d/alias.sh\nsudo  cat > /etc/profile.d/alias.sh << EOF\nalias reboot='echo -e \"\\033[41;05m  危险!!!! -检查后-确认-【谨慎使用重启】 \\033[0m \"'\nalias rm='echo -e \"\\033[41;05m  危险!!!! -检查后-确认-【谨慎使用删除】 \\033[0m \"'\n[ -d /tmp/remove/ ] ||  mkdir   /tmp/remove/\nEOF\nsudo source /etc/profile\n\n}\n\n## 名称: os::InstallSoft\n## 用途: 操作系统时间与时区同步配置\n## 参数: 无\n#osInstallSoft () {\n\n#(1) 安装系统依赖及必要软件  \nsudo apt install -y cpufrequtils unzip mesa-opencl-icd ocl-icd-opencl-dev nfs-common ntpdate mdadm xfsprogs  jq pkg-config  curl  supervisor rustc  smartmontools hdparm  lxcfs   sysstat  lm-sensors iotop nload nfs-kernel-server make  gcc  nvme-cli hwloc net-tools lrzsz\nsudo apt install -y gcc make  cpufrequtils ntp bash-completion  libhwloc-dev mesa-opencl-icd ocl-icd-opencl-dev nfs-common ntpdate mdadm xfsprogs   bzr jq pkg-config curl supervisor rustc smartmontools hdparm lxcfs iperf3\nsudo apt install -y supervisor numactl\nsudo apt-get update  -y\n\n##静默安装GPU\necho \"#################静默安装GPU##########################\"\n\nsudo sed  -i '/^blacklist nouveau/d' /etc/modprobe.d/blacklist.conf\nsudo sed  -i '/^options nouveau modeset=0/d' /etc/modprobe.d/blacklist.conf\nsudo  echo  'blacklist nouveau' >>  /etc/modprobe.d/blacklist.conf\nsudo echo  'options nouveau modeset=0' >> /etc/modprobe.d/blacklist.conf\n#apt-get remove --purge nvidia-*\nrmmod nouveau\n\n###cp\n#cd /root/\n#curl -u  'ftpuser:LGvC2#%BsHPrRZEqns!GgCh'        ftp://10.0.1.1/onup/NVIDIA-Linux-x86_64-460.84.run    -O\n#chmod +x NVIDIA-Linux-x86_64-460.84.run\n#/root/NVIDIA-Linux-x86_64-460.84.run --accept-license --silent --no-nouveau-check --disable-nouveau --no-opengl-files\n#\nsudo apt-get purge nvidia*  -y\nsudo add-apt-repository ppa:graphics-drivers -y\nsudo apt-get update  -y\nsudo apt-get install nvidia-driver-440 nvidia-settings nvidia-prime  -y\n\n\n\n\necho \" \"\nsleep  3\n####################################################\n\n#禁用桌面\necho \"#################禁用桌面##########################\"\napt-get remove lightdm -y\nsudo systemctl set-default multi-user.target\nsudo systemctl disable multi-user.target\nrepaddline \"^GRUB_CMDLINE_LINUX_DEFAULT\" \"GRUB_CMDLINE_LINUX_DEFAULT=\\\"text\\\"\" /etc/default/grub\nsudo apt-get remove gnome-shell  -y\nsudo apt-get remove gnome\nsudo apt-get autoremove -y\nsudo apt-get purge gnome\nsudo apt-get autoclean\nsudo apt-get clean\nsudo update-grub\n\n\n\n#(2) 启动守护进程\nsudo systemctl enable supervisor.service && sudo systemctl start supervisor.service\n\n#}\n\necho \"loginfo\"\necho \"logerr\"\necho \"logwarning\"\n\necho \"osNetwork\"\n#osNetwork\n#echo \"osTimedataZone\"\n#osTimedataZone\necho \"osSecurity\"\n#osSecurity\necho \"osInstallSoft\"\n#osInstallSoft\n\n",
	},
	{
		Name:    "import_lotus.sh",
		Content: "#!/bin/bash\ncat > /root/oplian/script/run_lotus.sh<<EOF\n#!/bin/bash\nset -e\ndatetime=\\$(date +'%Y-%m-%d %H:%M:%S')\n\nexport LISTEN_PORT=$1\nexport DIR=$2\nexport LISTEN_IP=$3\nexport LOTUS_ID=$4\nexport MainDisk=$5\n\nexport RUST_BACKTRACE=full\nexport RUSTFLAGS=\"-C target-cpu=native -g\"\nexport FFI_BUILD_FROM_SOURCE=1\nexport RUST_LOG=info\nexport LOTUS_PATH=\\${MainDisk}/ipfs/data/lotus\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\\${MainDisk}/filecoin-proof-parameters\n\nunset FIL_PROOFS_MAXIMIZE_CACHING\nexport SKIP_BASE_EXP_CACHE=1\n#export GOLOG_LOG_FMT=json\n\npid=$(ps -ef | grep 'lotus daemon'| egrep -v \"log|grep\"  | awk '{print $2}')\nif [ x\"$pid\" = \"x\" ] ;then\n nohup /root/oplian/bin/lotus daemon --import-snapshot \\${DIR}  &\n  sudo prlimit --nofile=1048576 --nproc=unlimited --rtprio=99 --nice=-19 --pid \\$!\n  echo \"${datetime}  lotus restarted  successfully!\" >> \\${MainDisk}/ipfs/logs/restart_press.log\nelse\n  echo \"${datetime}  lotus RUNNING  successfully!\"\nfi\nwait\n\nEOF\nsleep  1\nchmod  +x  /root/oplian/script/run_lotus.sh || echo \"ERROR: No such file or directory\" >&2\ncat >  /etc/supervisor/supervisord.conf <<'EOF'\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\nEOF\n\nsleep  1\n\ncat >  /etc/supervisor/conf.d/lotus.conf  <<EOF\n[program:lotus]\ncommand=/root/oplian/script/run_lotus.sh\nuser=root\nautostart=true\nautorestart=true\nstopwaitsecs=60\nstartretries=100\nstopasgroup=true\nkillasgroup=true\nstdout_logfile_maxbytes = 10000000MB\nstdout_logfile_backups=25\nredirect_stderr=true\nstdout_logfile=$5/ipfs/logs/lotus.log\nEOF\n\nls /etc/supervisor/conf.d/lotus.conf  || echo \"ERROR: No such file or directory\" >&2\n",
	},
	{
		Name:    "init_miner.sh",
		Content: "#!/bin/bash\n##钱包地址\nWalletas=$1\nMinesize=$2\nMainDisk=$3\nDir='/tmp/MineIn.log'\n\n#########################测试初始旷工位置##############################\nexport PATH=$PATH\ndatetime=`date +'%Y-%m-%d %H:%M:%S'`\nexport RUST_BACKTRACE=full\nexport RUSTFLAGS=\"-C target-cpu=native -g\"\nexport FFI_BUILD_FROM_SOURCE=1\nexport RUST_LOG=info\nexport LOTUS_PATH=\"${MainDisk}/ipfs/data/lotus\"\nexport LOTUS_MINER_PATH=\"${MainDisk}/ipfs/data/lotusminer\"\nexport LOTUS_BACKUP_BASE_PATH=\"${MainDisk}/test/\"\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\"${MainDisk}/filecoin-proof-parameters\"\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport TRUST_PARAMS_FORCE=1\nexport SKIP_BASE_EXP_CACHE=1\nexport GOLOG_LOG_FMT=json\nexport FIL_PROOFS_USE_MULTICORE_SDR=0\nexport TRUST_PARAMS=1\nexport path=\"${MainDisk}/test\"\n\nexport FULLNODE_API_INFO=$4\nexport LISTEN_IP=$5\nexport LISTEN_PORT=$6\n\n#########################测试初始旷工位置##############################\n#判断lotus 状态\n#timeout 120   /root/oplian/bin/lotus  sync wait > /dev/null\n#if [[ $? -ne 0 ]];then\n#echo 'lotus_failed'\n#exit\n#   else\n#echo \"ok\" > /dev/null\n#fi\n#wait\n/root/oplian/bin/lotus-miner init --owner=${Walletas}  --sector-size=${Minesize}GiB     > ${Dir}     2>&1   #初始化一个新的矿工，lotus上可以查看\nwait\nsleep  1\nMineIt=`cat  ${Dir} |grep   'Created new miner'  |awk  '{print $NF}'|egrep -o  [a-Z].*[0-9]`\n#输出旷工ID\necho  ${Walletas}\necho  ${Minesize}\necho  ${MineIt}\n",
	},
	{
		Name:    "init_miner_worker.sh",
		Content: "#!/bin/bash\n##钱包地址\nWalletas=$1\nWorker=$2\nMainDisk=$3\nDir='/tmp/MineIn.log'\n\n#########################测试初始旷工位置##############################\nexport PATH=$PATH\ndatetime=`date +'%Y-%m-%d %H:%M:%S'`\nexport RUST_BACKTRACE=full\nexport RUSTFLAGS=\"-C target-cpu=native -g\"\nexport FFI_BUILD_FROM_SOURCE=1\nexport RUST_LOG=info\nexport LOTUS_PATH=\"${MainDisk}/ipfs/data/lotus\"\nexport LOTUS_MINER_PATH=\"${MainDisk}/ipfs/data/lotusminer\"\nexport LOTUS_BACKUP_BASE_PATH=\"${MainDisk}/test/\"\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\"${MainDisk}/filecoin-proof-parameters\"\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport TRUST_PARAMS_FORCE=1\nexport SKIP_BASE_EXP_CACHE=1\nexport GOLOG_LOG_FMT=json\nexport FIL_PROOFS_USE_MULTICORE_SDR=0\nexport TRUST_PARAMS=1\nexport path=\"${MainDisk}/test\"\n\nexport FULLNODE_API_INFO=$4\nexport LISTEN_IP=$5\nexport LISTEN_PORT=$6\n\n#########################测试初始旷工位置##############################\n#判断lotus 状态\n#timeout 120   /root/oplian/bin/lotus  sync wait > /dev/null\n#if [[ $? -ne 0 ]];then\n#echo 'lotus_failed'\n#exit\n#   else\n#echo \"ok\" > /dev/null\n#fi\n#wait\n/root/oplian/bin/lotus-miner init --actor=${Worker} --worker=${Walletas}  > ${Dir}     2>&1   #初始化一个新的矿工，lotus上可以查看\nwait\nsleep  1\nMineIt=`cat  ${Dir} |grep   'Created new miner'  |awk  '{print $NF}'|egrep -o  [a-Z].*[0-9]`\n#输出旷工ID\necho  ${Walletas}\necho  ${MineIt}\n"},
	{
		Name:    "kill_all_test.sh",
		Content: "#!/bin/bash\npids=$(ps -ef | grep \"bench\" | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\nfi\npids=$(ps -ef | grep \"iperf3\" | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\nfi\npids=$(ps -ef | grep \"kill_\" | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\nfi",
	},
	{
		Name:    "kill_gpu_test.sh",
		Content: "#!/bin/bash\nwhile true; do\npids=$(ps -ef | grep \"bench\" | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\npids=$(ps -ef | grep \"kill_net\" | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\nfi\nbreak\nelse\nsleep 3\nfi\ndone",
	},
	{
		Name:    "kill_net_test.sh",
		Content: "#!/bin/bash\nwhile true; do\npids=$(ps -ef | grep \"iperf3\" | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\nbreak\nelse\nsleep 3\nfi\ndone",
	},
	{
		Name:    "kill_script_execute.sh",
		Content: "#!/bin/bash\n\nstr=$1\npids=$(ps -ef | grep ${str} | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\nfi\npids=$(ps -ef | grep \"kill_\" | grep -v grep | awk '{print $2}')\nif [ -n \"$pids\" ]; then\necho \"Found processes: $pids\"\nkill -9 $pids\necho \"Killed processes: $pids\"\nfi\n",
	},
	{
		Name:    "log_information.sh",
		Content: "#!/bin/bash\n#节点号\nMainDisk=$1\nminer=`/usr/local/sbin/lotus-miner info --hide-sectors-info | grep Miner | grep sectors | awk '{print $2}'`\nnews=$(cat ${Minesize}/ipfs/log*/*miner.log | grep \"failed: exit 16\" | grep \"Submitting window post\" | awk '{print $8}' | wc -l)\nmessages=$(cat ${Minesize}/ipfs/log*/*miner.log | grep \"failed: exit 16\" | grep \"Submitting window post\" | awk '{print $8}')\nif [[ ${news} -ge 1 ]]; then\necho false\nelse\necho true\nfi",
	},
	{
		Name:    "log_overtime.sh",
		Content: "#!/bin/bash\nMainDisk=$1\ntime=$(cat ${Minesize}/ipfs/log*/miner.log | grep \"总耗时\" | awk -F : '{print $5}' | awk -F \".\" '{print $1}' | tail -n 1)\nif [[ ${time} -ge 30 ]]; then\necho true\nelse\necho false\nfi",
	},
	{
		Name:    "lotus_high.sh",
		Content: "#!/bin/bash\n#lotus高度\nlotus=$(/usr/local/sbin/lotus  sync  status  |grep 'Height diff' |uniq |awk  '{print $NF}'|sort -nr |head -n1)\nif [[ ${lotus} -ge 2 ]];then\necho false\nelse\n  echo true\nfi",
	},
	{
		Name:    "lotusrun.sh",
		Content: "#!/bin/bash\ncat > /root/oplian/script/run_lotus.sh<<EOF\n#!/bin/bash\nset -e\ndatetime=\\$(date +'%Y-%m-%d %H:%M:%S')\nexport LISTEN_PORT=$1\nexport LISTEN_IP=$2\nexport MainDisk=$3\n\nexport RUST_BACKTRACE=full\nexport RUSTFLAGS=\"-C target-cpu=native -g\"\nexport FFI_BUILD_FROM_SOURCE=1\nexport RUST_LOG=info\nexport LOTUS_PATH=\\${MainDisk}/ipfs/data/lotus\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\\${MainDisk}/filecoin-proof-parameters\n\nunset FIL_PROOFS_MAXIMIZE_CACHING\n#export GOLOG_LOG_FMT=json\nexport TRUST_PARAMS_FORCE=1\n\n\n\npid=\\$(ps -ef | grep 'lotus daemon'| egrep -v \"log|grep\"  | awk '{print \\$2}')\nif [ x\"$pid\" = \"x\" ] ;then\n  nohup /root/oplian/bin/lotus daemon &\n  sudo prlimit --nofile=1048576 --nproc=unlimited --rtprio=99 --nice=-19 --pid \\$!\n  echo \"\\${datetime}  lotus restarted  successfully!\" >> \\${MainDisk}/ipfs/logs/restart_press.log\nelse\n  echo \"\\${datetime}  lotus RUNNING  successfully!\"\nfi\nwait\nEOF\nsleep  1\nchmod  +x  /root/oplian/script/run_lotus.sh || echo \"ERROR: No such file or directory\" >&2\ncat >  /etc/supervisor/supervisord.conf <<EOF\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\nEOF\n\nsleep  1\n\ncat >  /etc/supervisor/conf.d/lotus.conf  <<EOF\n[program:lotus]\ncommand=/root/oplian/script/run_lotus.sh\nuser=root\nautostart=true\nautorestart=true\nstopwaitsecs=60\nstartretries=100\nstopasgroup=true\nkillasgroup=true\nstdout_logfile_maxbytes = 10000000MB\nstdout_logfile_backups=25\nredirect_stderr=true\nstdout_logfile=$3/ipfs/logs/lotus.log\nEOF\n\nls /etc/supervisor/conf.d/lotus.conf || echo \"ERROR: No such file or directory\" >&2\n",
	},
	{
		Name:    "minerrun.sh",
		Content: "#!/bin/bash\nexport PATH=$PATH\ncat > /root/oplian/script/run_miner.sh <<EOF\n#!/bin/bash\nset -e\n\nexport PLEDGE_MINER=$1\nexport wnpost=$2\nexport wdpost=$3\nexport PARTITIONS=$4\nexport FULLNODE_API_INFO=$5\nexport LISTEN_IP=$6\nexport LISTEN_PORT=$7\nexport ACTOR=$8\nexport MainDisk=$9\nexport LOCAL_PROVER=$10\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\n\ndatetime=\\$(date +'%Y-%m-%d %H:%M:%S')\nexport RUST_BACKTRACE=full\nexport RUSTFLAGS=\"-C target-cpu=native -g\"\nexport FFI_BUILD_FROM_SOURCE=1\nexport RUST_LOG=info\nexport LOTUS_PATH=\\${MainDisk}/ipfs/data/lotus\nexport LOTUS_MINER_PATH=\\${MainDisk}/ipfs/data/lotusminer\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\"\\${MainDisk}/filecoin-proof-parameters\"\n\nexport SKIP_BASE_EXP_CACHE=1\nexport TRUST_PARAMS_FORCE=1\nexport CHECK_UNLOCAK=\"true\"\nexport REMOVE_FORCE=\"true\"\nexport FINFORCE=\"true\"\n\n#爆快延长\nexport PROPAGATION_DELAY_SECS=25\nIP=`hostname -I | awk '{print \\$1}'`\n# /usr/bin/bash  /root/oplian/script/mount_hdd.sh\nnvidia-smi\nif [ $? -ne 0 ]; then\n  echo \"ERROR: no GPU detected \\$IP\"\n  exit\nfi\n\nnohup /root/oplian/bin/lotus-miner  run &\nsudo prlimit --nofile=1048576 --nproc=unlimited --rtprio=99 --nice=-19 --pid \\$!\necho \"\\${datetime}  lotus-miner restarted  successfully!\" >> \"$9/ipfs/logs/restart_press.log\"\nwait\nEOF\n\nsleep  1\n\nchmod  +x  /root/oplian/script/run_miner.sh || echo \"ERROR: No such file or directory\" >&2\ncat >  /etc/supervisor/supervisord.conf <<'EOF'\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\nEOF\n\nsleep  1\n\ncat >  /etc/supervisor/conf.d/miner.conf  <<EOF\n[program:lotus-miner]\ncommand=/root/oplian/script/run_miner.sh\nuser=root\nautostart=true\nautorestart=true\nstopwaitsecs=60\nstartretries=100\nstopasgroup=true\nkillasgroup=true\nstdout_logfile_maxbytes = 10000000MB\nstdout_logfile_backups=25\nredirect_stderr=true\nstdout_logfile=$9/ipfs/logs/miner.log\nEOF\n\nls  /etc/supervisor/conf.d/miner.conf || echo \"ERROR: No such file or directory\" >&2\n",
	},
	{
		Name:    "mount_disk.sh",
		Content: "ip=$1\ndisk=$2\nDISK_ALL=$(echo  $disk|awk -F',' '{for(i=1; i<=NF; i++) print $i}')\nfor  i  in  ${DISK_ALL}\ndo\n    { [ $(mount -l | grep -w  \"/mnt/$ip$(echo ${i}|sed 's#/mnt##g')\" | wc -l) -ge 1 ] || ( if [ -d /mnt/$ip$(echo ${i}|sed 's#/mnt##g') ]; then  mount -t nfs -o noatime $ip:${i} /mnt/$ip$(echo ${i}|sed 's#/mnt##g'); else  mkdir -pv  /mnt/$ip$(echo ${i}|sed 's#/mnt##g')  &&  mount -t nfs -o noatime $ip:${i}  /mnt/$ip$(echo ${i}|sed 's#/mnt##g') ; fi ) }\ndone",
	},
	{
		Name:    "run_bench1.sh",
		Content: "#!/bin/bash\nMainDisk=$1\nexport FFI_USE_CUDA=1\nexport FFI_BUILD_FROM_SOURCE=1\nexport LD_LIBRARY_PATH=/usr/local/cuda-11.2/lib64\nexport CUDA_HOME=/usr/local/cuda\nexport PATH=$PATH:/usr/local/go/bin:/usr/local/cuda-11.2/bin\n\nexport FIL_PROOFS_PARAMETER_CACHE=\"${MainDisk}/filecoin-proof-parameters\"\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\n\n\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport BELLMAN_CPU_UTILIZATION=0\nexport C2_COUNT=2\n# GPU\nexport CUDA_VISIBLE_DEVICES=0\n\\rm  -r /tmp/gpu001\nmkdir /tmp/gpu001\nexport TMPDIR=\"/tmp/gpu001\"\nexport TRUST_PARAMS=1\n#numactl -C 16-31 -m 0 nohup ./lotus-bench prove 32G-c2-input.json >  bench1.log 2>&1 &\nnohup ./lotus-bench prove 32G-c2-input.json >  bench1.log 2>&1 &\n",
	},
	{
		Name:    "run_bench2.sh",
		Content: "#!/bin/bash\nMainDisk=$1\nexport FFI_USE_CUDA=1\nexport FFI_BUILD_FROM_SOURCE=1\nexport LD_LIBRARY_PATH=/usr/local/cuda-11.2/lib64\nexport CUDA_HOME=/usr/local/cuda\nexport PATH=$PATH:/usr/local/go/bin:/usr/local/cuda-11.2/bin\n\nexport FIL_PROOFS_PARAMETER_CACHE=\"${MainDisk}/filecoin-proof-parameters\"\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\n\n\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport BELLMAN_CPU_UTILIZATION=0\nexport C2_COUNT=2\n# GPU\nexport CUDA_VISIBLE_DEVICES=0\n\\rm  -r /tmp/gpu002\nmkdir /tmp/gpu002\nexport TMPDIR=\"/tmp/gpu002\"\nexport TRUST_PARAMS=1\n#numactl -C 16-31 -m 0 nohup ./lotus-bench prove 32G-c2-input.json > bench2.log 2>&1 &\nnohup ./lotus-bench prove 32G-c2-input.json > bench2.log 2>&1 &\n",
	},
	{
		Name:    "run_bench3.sh",
		Content: "#!/bin/bash\nMainDisk=$1\nexport FFI_USE_CUDA=1\nexport FFI_BUILD_FROM_SOURCE=1\nexport LD_LIBRARY_PATH=/usr/local/cuda-11.2/lib64\nexport CUDA_HOME=/usr/local/cuda\nexport PATH=$PATH:/usr/local/go/bin:/usr/local/cuda-11.2/bin\n\nexport FIL_PROOFS_PARAMETER_CACHE=\"${MainDisk}/filecoin-proof-parameters\"\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\n\n\n\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport BELLMAN_CPU_UTILIZATION=0\nexport C2_COUNT=2\n# GPU\nexport CUDA_VISIBLE_DEVICES=0\n\\rm  -r /tmp/gpu003\nmkdir /tmp/gpu003\nexport TMPDIR=\"/tmp/gpu003\"\nexport TRUST_PARAMS=1\n#numactl -C 16-31 -m 0 nohup ./lotus-bench prove 32G-c2-input.json > bench3.log 2>&1 &\nnohup ./lotus-bench prove 32G-c2-input.json > bench3.log 2>&1 &\n",
	},
	{
		Name:    "run_bench_test.sh",
		Content: "#!/bin/bash\nDir=$1\npid=\nMainDisk=$2\ncd  ${Dir}\nwhile ! pgrep -x \"lotus-bench\" > /dev/null; do\nbash  ${Dir}run_bench1.sh ${MainDisk} &\n    pid=$!\n    wait $pid 2> /dev/null\n    sleep 10\ndone\n\nwhile pgrep -x \"lotus-bench\" > /dev/null; do\n    wait $(pgrep -f \"lotus-bench\") 2> /dev/null\n    sleep 10\ndone\nbash ${Dir}run_bench2.sh ${MainDisk} &\npid=$!\nwait $pid 2> /dev/null\nsleep 10\n\nwhile pgrep -x \"lotus-bench\" > /dev/null; do\n    wait $(pgrep -f \"lotus-bench\") 2> /dev/null\n    sleep 10\ndone\nbash ${Dir}run_bench3.sh ${MainDisk} &\npid=$!\nwait $pid 2> /dev/null\nsleep 10\nwhile pgrep -x \"lotus-bench\" > /dev/null; do\n    wait $(pgrep -f \"lotus-bench\") 2> /dev/null\n    sleep 10\ndone\ncat bench*  |grep   'commit phase' |awk '{ sum += $5 } END { print \"time: \" sum/NR }' > cc.txt\n\nDD=`cat bench*  |grep   'commit phase'  |awk '{ sum += $5 } END { print  sum/NR }'`\necho  ${DD}\n\n",
	},
	{
		Name:    "run_op_c2.sh",
		Content: "#!/bin/bash\n\nexport PORT=$1\nexport MainDisk=$2\n\nexport FFI_USE_CUDA=1\nexport FFI_BUILD_FROM_SOURCE=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport BELLMAN_CPU_UTILIZATION=0\nexport FIL_PROOFS_USE_MULTICORE_SDR=0\nexport RUST_LOG=info\nexport FFI_USE_CUDA_SUPRASEAL=1\nexport FIL_PROOFS_PARAMETER_CACHE=${MainDisk}/filecoin-proof-parameters\nexport FIL_PROOFS_PARENT_CACHE=${MainDisk}/filecoin-parents\nexport PORT_C2=$1\nexport TRUST_PARAMS=1\n\nnohup /root/oplian/oplian-op-c2 run ${PORT} > ${MainDisk}/ipfs/logs/oplian-op-c2-${PORT}.log 2>&1 &\n",
	},
	{
		Name:    "sector_address.sh",
		Content: "#!/bin/bash\nMainDisk=$3\nsource ${MainDisk}/ipfs/conf/.lotusprofile 2> /dev/null\nMIid=$1\nida=$2\n\nMIid1=`echo ${MIid}  |sed  's/f/s-t/'`\n\nfor i in  ${ida}\ndo\npwd=$(lotus-miner storage find ${i} 2> /dev/null |grep -A 3 Cache|grep Local|awk '{print $2}'|awk -F \"(\" '{print $2}'|awk -F \")\" '{print $1}')\n##echo ------------$i-------------------\necho    ${pwd}/cache/${MIid1}-${i}\ndone\nfor i in ${ida}\ndo\npwd=$(lotus-miner storage find ${i} 2> /dev/null |grep -A 3 Sealed|grep Local|awk '{print $2}'|awk -F \"(\" '{print $2}'|awk -F \")\" '{print $1}')\n#echo ------------$i-------------------\necho    ${pwd}/sealed/${MIid1}-${i}\ndone\n",
	},
	{
		Name:    "sector_type.sh",
		Content: "#!/bin/bash\nMainDisk=$2\nsource ${MainDisk}/ipfs/conf/.lotusprofile 2> /dev/null\nsector=$1\ndeals=$(lotus-miner sectors status $sector 2> /dev/null |  grep 'Deals:\\s*\\[[0-9]*\\]' | awk '{print $2}' | tr -d '[]')\nif [[ $deals -gt 0 ]]; then\n  echo \"DC\"\nelse\n  echo \"CC\"\nfi",
	},
	{
		Name:    "server_port_monitor.sh",
		Content: "#!/bin/bash\n# 检查iperf3是否已经安装\nif ! command -v iperf3 &> /dev/null\nthen\n    # 如果未安装，则进行安装\n    sudo apt-get update   >/dev/null  2>&1\n    sudo apt-get install -y iperf3   >/dev/null  2>&1\nelse\n    # 如果已经安装，则输出当前版本信息\n    iperf3 -v   >/dev/null  2>&1\nfi\n# 定义要启动的端口数组\nPORTS=(5201 5202 5203 5204)\n# 循环启动每个端口上的iperf3服务器，并将PID写入pidfile\nfor port in \"${PORTS[@]}\"; do\n    iperf3 -s -p \"$port\"   >/dev/null  2>&1   &\ndone\n# 停止所有iperf3服务器一段时间后杀死进程\nnohup  sleep 1000 &&  kill  -9   $(ps aux | grep  520  |grep      grep -v |awk '{print $2}')  >  /var/log/iperf3.log 2>&1   &\n",
	},
	{
		Name:    "server_port_request.sh",
		Content: "#!/bin/bash\nSERVER_IP=$1\nSERVER_PORT=$2\nTME=$3\nLOG_FILE=\"/tmp/iperf.log\"\niperf3  -c  ${SERVER_IP} -p  ${SERVER_PORT}  -t   ${TME}   >  ${LOG_FILE}\ncat  ${LOG_FILE} |grep      MBytes | awk '{ sum += $7 } END { print  sum/NR \" Gbits/sec\" }'\nrm  ${LOG_FILE}\n\n",
	},
	{
		Name:    "storage_disk_rate_test.sh",
		Content: "#!/bin/bash\n \n# 定义要测试的磁盘或分区挂载点路径和设备名称，只测试容量大于 1T 的设备（可根据实际情况修改）\ntxtfile=txtfile1 \n# 根据设备名称循环测试读写速度\nfor i in `df -h | awk '$2 ~ /T/ && $2+0 >= 1 { print $6}'`\ndo\nsdd=`df -h  |grep  -w  $i |awk   '{print $1}'`\n    # 测试随机读写取速率\n   # echo \"Testing read speed...\"\n    #dd if=$device/1 of=/dev/null bs=512K count=32k oflag=direct 2>&1 | awk -F, '{print $3}' | awk '{print $1 / 1048576 \" MB/s\" }'\n   DD2=`dd if=/dev/zero of=${devices}/${txtfile}    bs=1024M count=10  oflag=direct    2>&1 | awk -F, '{print  $4}'|grep\t ^$ -v`  \n   echo \"${sdd} ${i} ${DD2}\"|awk '{printf(\"%-13s%-13s%-6s\\n\", $1, $2, $3\" \"$4)}' \n   rm ${devices}/${txtfile}\n    # 测试写入速率\n    #echo \"Testing write speed...\"\n    #dd if=/dev/zero of=$device/1 bs=512K count=32k oflag=direct 2>&1 | awk -F, '{print $3}' | awk '{print $1 / 1048576 \" MB/s\" }'\ndone\n",
	},
	{
		Name:    "storagerun.sh",
		Content: "#!/bin/bash\nexport PATH=$PATH\ncat > /root/oplian/script/run_storage.sh <<EOF\n#!/bin/bash\n\nWORKER_PORT0=$1\nexport MINER_API_INFO=$2\nMainDisk=$3\nexport UNSEALED_SERVER=$4\nexport RUST_BACKTRACE=full\nexport RUST_LOG=info\nexport WORKER_PATH=\\${MainDisk}/ipfs/data/lotusstorage\nexport FIL_PROOFS_PARENT_CACHE=\\${MainDisk}/filecoin-parents/\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\\${MainDisk}/filecoin-proof-parameters\nexport TRUST_PARAMS_FORCE=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\n\n\nexport RUST_LOG=info\nexport HOST_WORKER_COUNT=1\nunset TMPDIR\nunset LOTUS_MONITOR\n\nfunction handle_term {\n  #kill -TERM \\$pid\n  kill -9 \\$pid\n  wait\n  exit 0\n}\ntrap 'handle_term' TERM\n\n    nohup /root/oplian/bin/lotus-storage --worker-repo \\${MainDisk}/ipfs/data/lotusstorage/ run --storage=true --listen 0.0.0.0:\\${WORKER_PORT0} &\npid=\\$!\n\n        sudo prlimit --nofile=1048576 --nproc=unlimited --rtprio=99 --nice=-19 --pid \\$!\n\twait\nEOF\n\nsleep  1\n\nchmod  +x  /root/oplian/script/run_storage.sh || echo \"ERROR: No such file or directory\" >&2\ncat >  /etc/supervisor/supervisord.conf <<'EOF'\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\nEOF\n\nsleep  1\n\ncat >  /etc/supervisor/conf.d/storage.conf  <<EOF\n[program:lotus-storage]\ncommand=/root/oplian/script/run_storage.sh\nuser=root\nautostart=true\nautorestart=true\nstopwaitsecs=60\nstartretries=100\nstopasgroup=true\nkillasgroup=true\nstdout_logfile_maxbytes = 10000000MB\nstdout_logfile_backups=25\nredirect_stderr=true\nstdout_logfile=$3/ipfs/logs/storage.log\nEOF\n\nls /etc/supervisor/conf.d/storage.conf || echo \"ERROR: No such file or directory\" >&2\n\n",
	},
	{
		Name:    "time_sync.sh",
		Content: "#!/bin/bash\nif ! command -v ntpdate &> /dev/null\nthen\n    echo \"ntpdate is not installed. Installing now...\"\n    sudo apt-get update\n    sudo apt-get install ntpdate\nfi\n\nlocal_time=$(date +%s)\n# 获取本地时间与网络时间的时间戳\nsudo ntpdate -q pool.ntp.org > /dev/null  # 查询 NTP 服务器，将系统时间设置为网络时间\nntp_time=$(date +%s)  # 获取系统时间的时间戳，即网络时间的时间戳\n\n\n# 判断时间是否同步\ntime_diff=$(( $ntp_time - $local_time ))\nif [[ $time_diff -gt 2 || $time_diff -lt -2 ]]; then\n    echo false\nelse\n    echo true\nfi",
	},
	{
		Name:    "workerrun.sh",
		Content: "#!/bin/bash\nexport PATH=$PATH\ncat > /root/oplian/script/run_worker.sh <<EOF\n#!/bin/bash\nWORKER_PORT0=$1\nexport MINER_API_INFO=$2\nexport MainDisk=$3\nexport UNSEALED_SERVER=$4\nexport StartNo=$5\nexport EndNo=$6\n\nexport RUST_BACKTRACE=full\nexport RUST_LOG=info\nexport WORKER_PATH=\\${MainDisk}/ipfs/data/lotusworker\nexport FIL_PROOFS_PARENT_CACHE=\\${MainDisk}/filecoin-parents/\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\\${MainDisk}/filecoin-proof-parameters\nexport TRUST_PARAMS_FORCE=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport P1_CORES=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport MINER32_S32G_PATH=\\${MainDisk}/lotusworker/s-32\nexport MINER64_S64G_PATH=\\${MainDisk}/lotusworker/s-32\nexport MINER32_TREE_D_PATH=\\${MainDisk}/lotusworker/s-64\nexport MINER64_TREE_D_PATH=\\${MainDisk}/lotusworker/s-64\n\nexport RUST_LOG=info\n\nexport HOST_WORKER_COUNT=1\nunset TMPDIR\nunset LOTUS_MONITOR\nfunction handle_term {\n  #kill -TERM \\$pid\n  kill -9 \\$pid\n  wait\n  exit 0\n}\ntrap 'handle_term' TERM\n\nnumactl -C \\${StartNo}-\\${EndNo} nohup /root/oplian/bin/lotus-worker --worker-repo \\${MainDisk}/ipfs/data/lotusworker/ run --precommit1=true --precommit2=true --commit=false --listen 0.0.0.0:\\${WORKER_PORT0} &\n\npid=\\$!\n\n        sudo prlimit --nofile=1048576 --nproc=unlimited --rtprio=99 --nice=-19 --pid \\$!\n\twait\nEOF\n\nsleep  1\n\nchmod  +x  /root/oplian/script/run_worker.sh\ncat >  /etc/supervisor/supervisord.conf <<'EOF'\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\nEOF\n\nsleep  1\n\ncat >  /etc/supervisor/conf.d/worker.conf  <<EOF\n[program:lotus-worker]\ncommand=/root/oplian/script/run_worker.sh\nuser=root\nautostart=true\nautorestart=true\nstopwaitsecs=60\nstartretries=100\nstopasgroup=true\nkillasgroup=true\nstdout_logfile_maxbytes = 10000000MB\nstdout_logfile_backups=25\nredirect_stderr=true\nstdout_logfile=$3/ipfs/logs/worker.log\nEOF\n",
	},
	{
		Name:    "workerrunp2.sh",
		Content: "#!/bin/bash\nexport PATH=$PATH\ncat > /root/oplian/script/run_p2_$4.sh <<EOF\n#!/bin/bash\n\nexport MainDisk=$1\nexport startNo=$2\nexport endNo=$3\n\nexport RUST_BACKTRACE=full\nexport RUST_LOG=info\nexport FIL_PROOFS_PARENT_CACHE=\\${MainDisk}/filecoin-parents/\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=\\${MainDisk}/filecoin-proof-parameters\nexport TRUST_PARAMS_FORCE=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport P1_CORES=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport RUST_LOG=info\n\nexport HOST_WORKER_COUNT=1\nnumactl -C \\${startNo}-\\${endNo} nohup /root/oplian/bin/worker-p2 run $4 &\n\twait\nEOF\n\nsleep  1\n\nchmod  +x  /root/oplian/script/run_p2_$4.sh\ncat >  /etc/supervisor/supervisord.conf <<'EOF'\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\nEOF\n\nsleep  1\n\ncat >  /etc/supervisor/conf.d/p2-$4.conf  <<EOF\n[program:p2-$4]\ncommand=/root/oplian/script/run_p2_$4.sh\nuser=root\nautostart=true\nautorestart=true\nstopwaitsecs=60\nstartretries=100\nstopasgroup=true\nkillasgroup=true\nstdout_logfile_maxbytes = 10000000MB\nstdout_logfile_backups=25\nredirect_stderr=true\nstdout_logfile=$1/ipfs/logs/worker-p2-$4.log\nEOF\n",
	},
	{
		Name:    "run_sector_c2.sh",
		Content: "#!/bin/bash\n\nexport GPU_NO=$1\nexport PORT=$2\nexport MainDisk=$3\nexport FFI_USE_CUDA=1\nexport FFI_BUILD_FROM_SOURCE=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport BELLMAN_CPU_UTILIZATION=0\nexport FIL_PROOFS_USE_MULTICORE_SDR=0\nexport RUST_LOG=info\nexport FFI_USE_CUDA_SUPRASEAL=1\nexport FIL_PROOFS_PARAMETER_CACHE=${MainDisk}/filecoin-proof-parameters\nexport FIL_PROOFS_PARENT_CACHE=${MainDisk}/filecoin-parents\n# GPU\nexport PORT_C2=$2\nexport CUDA_VISIBLE_DEVICES=${GPU_NO}\nexport TMPDIR=/tmp/gpu${GPU_NO}\nexport TRUST_PARAMS=1\n\nnohup /root/oplian/oplian-sectors-seal run-c2 ${PORT} > ${MainDisk}/ipfs/logs/oplian-sectors-c2-${PORT}.log 2>&1 &\n",
	},
	{
		Name:    "run_sector_task.sh",
		Content: "#!/bin/bash\n\nexport PORT=$1\nexport MainDisk=$2\nexport FFI_USE_CUDA=1\nexport FFI_BUILD_FROM_SOURCE=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport BELLMAN_CPU_UTILIZATION=0\nexport FIL_PROOFS_USE_MULTICORE_SDR=0\nexport RUST_LOG=info\nexport FFI_USE_CUDA_SUPRASEAL=1\nexport FIL_PROOFS_PARAMETER_CACHE=${MainDisk}/filecoin-proof-parameters\nexport FIL_PROOFS_PARENT_CACHE=${MainDisk}/filecoin-parents\nexport TRUST_PARAMS=1\n\nnohup /root/oplian/oplian-sectors-seal run-task ${PORT} > ${MainDisk}/ipfs/logs/oplian-sectors-task.log 2>&1 &\n",
	},
	{
		Name:    "run_worker_p1.sh",
		Content: "#!/bin/bash\n\nMainDisk=$1\nstartNo=$2\nendNo=$3\nproof=$4\ncache=$5\nunsealed=$6\nsealed=$7\nnumber=$8\nminer=$9\nticket=${10}\npieces=${11}\nproducers=${12}\nexport FIL_PROOFS_MULTICORE_SDR_PRODUCERS=${producers}\nexport RUST_BACKTRACE=full\nexport RUST_LOG=info\nexport FIL_PROOFS_PARENT_CACHE=${MainDisk}/filecoin-parents/\nexport IPFS_GATEWAY=\"https://proof-parameters.s3.cn-south-1.jdcloud-oss.com/ipfs/\"\nexport FIL_PROOFS_PARAMETER_CACHE=${MainDisk}/filecoin-proof-parameters\nexport TRUST_PARAMS_FORCE=1\nexport FIL_PROOFS_USE_GPU_TREE_BUILDER=1\nexport FIL_PROOFS_USE_MULTICORE_SDR=1\nexport FIL_PROOFS_MAXIMIZE_CACHING=1\nexport FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1\nexport RUST_LOG=info\n\nnumactl -C ${startNo}-${endNo} nohup /root/oplian/bin/worker-p1 run --proof-type ${proof} --cache ${cache} --unsealed ${unsealed} --sealed ${sealed} --number ${number} --miner ${miner} --ticket ${ticket} --pieces ${pieces} >> ${MainDisk}/ipfs/logs/${endNo}worker-p1.log 2>&1 &",
	},
	{
		Name:    "deadlines_proven.sh",
		Content: "#!/bin/bash\nexport MainDisk=$1\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\nexport PATH\nsource ${MainDisk}/ipfs/conf/.lotusprofile\ncurrent=$(lotus-miner  proving   deadlines |grep   current)\nnumbers=($(echo \"$current\" | awk '{print $2, $5}'))\n if [ \"${numbers[0]}\" -eq \"${numbers[1]}\" ]; then\nresult=true\nelse\nresult=false\nfi\necho $result\n",
	},
}

// OpGenerateFile The op end initializes the file
func OpGenerateFile(filePath string, fileList []ScriptFile) {

	_ = os.MkdirAll(filePath, os.ModePerm)
	for _, val := range fileList {
		path := filePath + val.Name
		if _, err := os.Stat(path); os.IsNotExist(err) {

			out, createErr := os.Create(path)
			if createErr != nil {
				log.Println("function os.Create() Filed", createErr.Error())
				continue
			}
			defer out.Close() //

			_, writeErr := out.WriteString(val.Content)
			if writeErr != nil {
				log.Println("function os.WriteString() Filed", writeErr.Error())
				continue
			}
		} else {

			f, openError := ioutil.ReadFile(path)
			if openError != nil {
				log.Println("function ioutil.ReadFile() Filed", openError.Error())
				continue
			}

			if string(f) != val.Content {
				err := ioutil.WriteFile(path, []byte(val.Content), 0644)
				if err != nil {
					log.Println("ioutil WriteFile Filed", err.Error())
					continue
				}
			}
		}
	}
}
