// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service/lotus/proto/op_c2.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpC2ServiceClient is the client API for OpC2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpC2ServiceClient interface {
	Heartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Commit2TaskRun(ctx context.Context, in *SealerParam, opts ...grpc.CallOption) (*ResponseMsg, error)
}

type opC2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpC2ServiceClient(cc grpc.ClientConnInterface) OpC2ServiceClient {
	return &opC2ServiceClient{cc}
}

func (c *opC2ServiceClient) Heartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpC2Service/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opC2ServiceClient) Commit2TaskRun(ctx context.Context, in *SealerParam, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpC2Service/Commit2TaskRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpC2ServiceServer is the server API for OpC2Service service.
// All implementations should embed UnimplementedOpC2ServiceServer
// for forward compatibility
type OpC2ServiceServer interface {
	Heartbeat(context.Context, *String) (*String, error)
	Commit2TaskRun(context.Context, *SealerParam) (*ResponseMsg, error)
}

// UnimplementedOpC2ServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOpC2ServiceServer struct {
}

func (UnimplementedOpC2ServiceServer) Heartbeat(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedOpC2ServiceServer) Commit2TaskRun(context.Context, *SealerParam) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit2TaskRun not implemented")
}

// UnsafeOpC2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpC2ServiceServer will
// result in compilation errors.
type UnsafeOpC2ServiceServer interface {
	mustEmbedUnimplementedOpC2ServiceServer()
}

func RegisterOpC2ServiceServer(s grpc.ServiceRegistrar, srv OpC2ServiceServer) {
	s.RegisterService(&OpC2Service_ServiceDesc, srv)
}

func _OpC2Service_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpC2ServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpC2Service/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpC2ServiceServer).Heartbeat(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpC2Service_Commit2TaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealerParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpC2ServiceServer).Commit2TaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpC2Service/Commit2TaskRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpC2ServiceServer).Commit2TaskRun(ctx, req.(*SealerParam))
	}
	return interceptor(ctx, in, info, handler)
}

// OpC2Service_ServiceDesc is the grpc.ServiceDesc for OpC2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpC2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpC2Service",
	HandlerType: (*OpC2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _OpC2Service_Heartbeat_Handler,
		},
		{
			MethodName: "Commit2TaskRun",
			Handler:    _OpC2Service_Commit2TaskRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/lotus/proto/op_c2.proto",
}
