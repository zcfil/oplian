// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: service/proto/gateway.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GateServiceClient is the client API for GateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateServiceClient interface {
	GatewayFileExist(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error)
	OpOnline(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error)
	OpConnect(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (*String, error)
	OpHeartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OplianHeartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWorkerList(ctx context.Context, in *RequestMinerId, opts ...grpc.CallOption) (*WorkerList, error)
	StrategyProcess(ctx context.Context, in *StrategyInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	ExecuteScript(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error)
	FileDistribution(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error)
	FileSynOpHost(ctx context.Context, in *FileSynOp, opts ...grpc.CallOption) (*String, error)
	DownloadSnapshot(ctx context.Context, in *Downtown, opts ...grpc.CallOption) (*DownloadInfo, error)
	AddLotus(ctx context.Context, in *LotusInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWalletList(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*WalletList, error)
	GetRoomWalletList(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*WalletList, error)
	AddMiner(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	UpdateLotus(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddHostRecord(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMiner(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateWorker(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStorage(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBoost(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddWorker(ctx context.Context, in *BatchWorker, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddStorage(ctx context.Context, in *BatchStroage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunStopService(ctx context.Context, in *RunStop, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddBoost(ctx context.Context, in *BoostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileOpSynGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	SysFilePoint(ctx context.Context, in *SynFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	ClearWorker(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*ResponseMsg, error)
	DownLoadFiles(ctx context.Context, in *DownLoadInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddHostMonitorRecord(ctx context.Context, in *HostMonitorInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetWorkerTask(ctx context.Context, in *WorkerConfig, opts ...grpc.CallOption) (*ResponseMsg, error)
	DelGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	DelOpFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	LotusHeight(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*LotusHeightInfo, error)
	ModifyFileStatus(ctx context.Context, in *FileManage, opts ...grpc.CallOption) (*ResponseMsg, error)
	CompleteCommit2(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	ModifySectorStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*String, error)
	AddWarn(ctx context.Context, in *WarnInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddBadSector(ctx context.Context, in *BadSectorId, opts ...grpc.CallOption) (*ResponseMsg, error)
	OpFileToGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	CheckOpPath(ctx context.Context, in *DirFileReq, opts ...grpc.CallOption) (*ResponseMsg, error)
	CarFilePath(ctx context.Context, in *CarFile, opts ...grpc.CallOption) (*CarFile, error)
	HostType(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	CarFileList(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*CarArray, error)
	ModifyOnlineFile(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	RestartMiner(ctx context.Context, in *MinerRun, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFileName(ctx context.Context, in *FileNameInfo, opts ...grpc.CallOption) (*String, error)
	SetJobPlatformStop(ctx context.Context, in *JobPlatform, opts ...grpc.CallOption) (*String, error)
	ScriptStop(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error)
	C2FileSynStatus(ctx context.Context, in *C2SectorID, opts ...grpc.CallOption) (*String, error)
	C2FileSynLotus(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*String, error)
	GetC2WorkerInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetGateWayFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	RunOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	StopOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	WorkerMountNFS(ctx context.Context, in *OpHostUUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RedoC2Task(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	CarFileParam(ctx context.Context, in *String, opts ...grpc.CallOption) (*CarInfo, error)
	//task
	OpInformationTest(ctx context.Context, in *HostTestInfo, opts ...grpc.CallOption) (*String, error)
	UpdateSectorStatus(ctx context.Context, in *SectorStatus, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorTicket(ctx context.Context, in *SectorTicket, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorCommDR(ctx context.Context, in *SectorCommDR, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorWaitSeed(ctx context.Context, in *SectorSeed, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorCommit2(ctx context.Context, in *SectorProof, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorPreCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorCommitCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error)
	UpdateHostTestRecord(ctx context.Context, in *UpdateHostTestInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OpInformationPatrol(ctx context.Context, in *HostPatrolInfo, opts ...grpc.CallOption) (*String, error)
	UpdateHostPatrolRecord(ctx context.Context, in *UpdateHostPatrolInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CloseOpInformationTest(ctx context.Context, in *CloseHostTest, opts ...grpc.CallOption) (*String, error)
	RestartAddHostTest(ctx context.Context, in *RestartHostTest, opts ...grpc.CallOption) (*String, error)
	GetOpHardwareInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*String, error)
	Commit2TaskResult(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error)
	GetHostGroupArray(ctx context.Context, in *OpHostUUID, opts ...grpc.CallOption) (*HostGroupArray, error)
	CreateSectorTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSectorPieceTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSectorLogTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSectorQueueDetailTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddSectorPiece(ctx context.Context, in *SectorPiece, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error)
	RedoSectorsTask(ctx context.Context, in *String, opts ...grpc.CallOption) (*ResponseMsg, error)
	UpdateSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error)
	StateMinerInfo(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*ActorWallet, error)
	StateAccountKey(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*String, error)
	WalletBalance(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*Wallet, error)
	GetRunningCount(ctx context.Context, in *OpTask, opts ...grpc.CallOption) (*TaskCount, error)
	GetRunningList(ctx context.Context, in *OpTask, opts ...grpc.CallOption) (*TaskInfoList, error)
	GetStorageByActor(ctx context.Context, in *String, opts ...grpc.CallOption) (*LinkList, error)
	GetActorTaskQueue(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskQueues, error)
	AddCompleteCountByID(ctx context.Context, in *TaskQueue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddRunCountByID(ctx context.Context, in *TaskQueue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddSectorQueueDetail(ctx context.Context, in *SectorQueueDetail, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWaitImportDeal(ctx context.Context, in *DealParam, opts ...grpc.CallOption) (*DealList, error)
	EditQueueDetailStatus(ctx context.Context, in *EditStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateHostNetOccupyTime(ctx context.Context, in *UpdateHostNet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error)
	DelC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error)
	QueryAsk(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (*AskInfo, error)
	QueryDataCap(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (*String, error)
	CheckOpIsOnline(ctx context.Context, in *OpHostUUID, opts ...grpc.CallOption) (*String, error)
	SealingSchedDiag(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*SchedDiagRequestInfo, error)
	SectorStorage(ctx context.Context, in *SectorActorID, opts ...grpc.CallOption) (*SectorPaths, error)
	AddColony(ctx context.Context, in *Colony, opts ...grpc.CallOption) (*Colony, error)
	GetColony(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*Colony, error)
	StateMinerSectorCount(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*MinerSectors, error)
	SealingAbort(ctx context.Context, in *ResetWorker, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSectorStatus(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*SectorStatus, error)
	OpLocalSectors(ctx context.Context, in *OpMiner, opts ...grpc.CallOption) (*SectorCount, error)
	StateMinerPower(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*Power, error)
	GetHostInfoByIPAndGatewayId(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*OpHostUUID, error)
	GetHostTypeAndStatus(ctx context.Context, in *String, opts ...grpc.CallOption) (*HostRestartInfo, error)
	CheckLotusHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	CheckMinerHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	CheckOWorkerHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetOpMonitorInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*MonitorInfo, error)
	GetOpScriptInfo(ctx context.Context, in *OpScriptInfo, opts ...grpc.CallOption) (*OpScriptInfoResp, error)
	GetDiskLetter(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpScriptInfoResp, error)
	GetOpMountInfo(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpMountDiskList, error)
	GetOpLogInfo(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogInfoResp, error)
	GetOpLogLen(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogLenResp, error)
	GetNodeMinerInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*NodeMinerInfoResp, error)
	DiskReMounting(ctx context.Context, in *DiskReMountReq, opts ...grpc.CallOption) (*String, error)
	GetMinerToken(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
}

type gateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGateServiceClient(cc grpc.ClientConnInterface) GateServiceClient {
	return &gateServiceClient{cc}
}

func (c *gateServiceClient) GatewayFileExist(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/GateService/GatewayFileExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OpOnline(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/GateService/OpOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OpConnect(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/OpConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OpHeartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/OpHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OplianHeartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/OplianHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetWorkerList(ctx context.Context, in *RequestMinerId, opts ...grpc.CallOption) (*WorkerList, error) {
	out := new(WorkerList)
	err := c.cc.Invoke(ctx, "/GateService/GetWorkerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StrategyProcess(ctx context.Context, in *StrategyInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/StrategyProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ExecuteScript(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/ExecuteScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) FileDistribution(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/FileDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) FileSynOpHost(ctx context.Context, in *FileSynOp, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/FileSynOpHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DownloadSnapshot(ctx context.Context, in *Downtown, opts ...grpc.CallOption) (*DownloadInfo, error) {
	out := new(DownloadInfo)
	err := c.cc.Invoke(ctx, "/GateService/DownloadSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddLotus(ctx context.Context, in *LotusInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddLotus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetWalletList(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*WalletList, error) {
	out := new(WalletList)
	err := c.cc.Invoke(ctx, "/GateService/GetWalletList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetRoomWalletList(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*WalletList, error) {
	out := new(WalletList)
	err := c.cc.Invoke(ctx, "/GateService/GetRoomWalletList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddMiner(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateLotus(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateLotus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddHostRecord(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddHostRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateMiner(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateWorker(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateStorage(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateBoost(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateBoost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddWorker(ctx context.Context, in *BatchWorker, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddStorage(ctx context.Context, in *BatchStroage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RunStopService(ctx context.Context, in *RunStop, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/RunStopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddBoost(ctx context.Context, in *BoostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddBoost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) FileOpSynGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/FileOpSynGateWay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddGateWayFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) SysFilePoint(ctx context.Context, in *SynFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/SysFilePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ClearWorker(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/ClearWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DownLoadFiles(ctx context.Context, in *DownLoadInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/DownLoadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddHostMonitorRecord(ctx context.Context, in *HostMonitorInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddHostMonitorRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) SetWorkerTask(ctx context.Context, in *WorkerConfig, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/SetWorkerTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DelGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/DelGateWayFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DelOpFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/DelOpFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) LotusHeight(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*LotusHeightInfo, error) {
	out := new(LotusHeightInfo)
	err := c.cc.Invoke(ctx, "/GateService/LotusHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ModifyFileStatus(ctx context.Context, in *FileManage, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/ModifyFileStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CompleteCommit2(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/CompleteCommit2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ModifySectorStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/ModifySectorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddWarn(ctx context.Context, in *WarnInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddBadSector(ctx context.Context, in *BadSectorId, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddBadSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OpFileToGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/OpFileToGateWay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CheckOpPath(ctx context.Context, in *DirFileReq, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/CheckOpPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CarFilePath(ctx context.Context, in *CarFile, opts ...grpc.CallOption) (*CarFile, error) {
	out := new(CarFile)
	err := c.cc.Invoke(ctx, "/GateService/CarFilePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) HostType(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/HostType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CarFileList(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*CarArray, error) {
	out := new(CarArray)
	err := c.cc.Invoke(ctx, "/GateService/CarFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ModifyOnlineFile(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/ModifyOnlineFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RestartMiner(ctx context.Context, in *MinerRun, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/RestartMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetFileName(ctx context.Context, in *FileNameInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/GetFileName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) SetJobPlatformStop(ctx context.Context, in *JobPlatform, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/SetJobPlatformStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ScriptStop(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/ScriptStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) C2FileSynStatus(ctx context.Context, in *C2SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/C2FileSynStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) C2FileSynLotus(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/C2FileSynLotus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetC2WorkerInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/GetC2WorkerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetGateWayFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/GetGateWayFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RunOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/RunOpC2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StopOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/StopOpC2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) WorkerMountNFS(ctx context.Context, in *OpHostUUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/WorkerMountNFS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RedoC2Task(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/RedoC2Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CarFileParam(ctx context.Context, in *String, opts ...grpc.CallOption) (*CarInfo, error) {
	out := new(CarInfo)
	err := c.cc.Invoke(ctx, "/GateService/CarFileParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OpInformationTest(ctx context.Context, in *HostTestInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/OpInformationTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateSectorStatus(ctx context.Context, in *SectorStatus, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/UpdateSectorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorTicket(ctx context.Context, in *SectorTicket, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorCommDR(ctx context.Context, in *SectorCommDR, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorCommDR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorWaitSeed(ctx context.Context, in *SectorSeed, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorWaitSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorCommit2(ctx context.Context, in *SectorProof, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorCommit2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorPreCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorPreCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorCommitCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorCommitCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateHostTestRecord(ctx context.Context, in *UpdateHostTestInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateHostTestRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OpInformationPatrol(ctx context.Context, in *HostPatrolInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/OpInformationPatrol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateHostPatrolRecord(ctx context.Context, in *UpdateHostPatrolInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateHostPatrolRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CloseOpInformationTest(ctx context.Context, in *CloseHostTest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/CloseOpInformationTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RestartAddHostTest(ctx context.Context, in *RestartHostTest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/RestartAddHostTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetOpHardwareInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/GetOpHardwareInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) Commit2TaskResult(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/Commit2TaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetHostGroupArray(ctx context.Context, in *OpHostUUID, opts ...grpc.CallOption) (*HostGroupArray, error) {
	out := new(HostGroupArray)
	err := c.cc.Invoke(ctx, "/GateService/GetHostGroupArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateSectorTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/CreateSectorTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateSectorPieceTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/CreateSectorPieceTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateSectorLogTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/CreateSectorLogTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateSectorQueueDetailTable(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/CreateSectorQueueDetailTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorPiece(ctx context.Context, in *SectorPiece, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RedoSectorsTask(ctx context.Context, in *String, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/RedoSectorsTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/GateService/UpdateSectorLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StateMinerInfo(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*ActorWallet, error) {
	out := new(ActorWallet)
	err := c.cc.Invoke(ctx, "/GateService/StateMinerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StateAccountKey(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/StateAccountKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) WalletBalance(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/GateService/WalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetRunningCount(ctx context.Context, in *OpTask, opts ...grpc.CallOption) (*TaskCount, error) {
	out := new(TaskCount)
	err := c.cc.Invoke(ctx, "/GateService/GetRunningCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetRunningList(ctx context.Context, in *OpTask, opts ...grpc.CallOption) (*TaskInfoList, error) {
	out := new(TaskInfoList)
	err := c.cc.Invoke(ctx, "/GateService/GetRunningList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetStorageByActor(ctx context.Context, in *String, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := c.cc.Invoke(ctx, "/GateService/GetStorageByActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetActorTaskQueue(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskQueues, error) {
	out := new(TaskQueues)
	err := c.cc.Invoke(ctx, "/GateService/GetActorTaskQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddCompleteCountByID(ctx context.Context, in *TaskQueue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddCompleteCountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddRunCountByID(ctx context.Context, in *TaskQueue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddRunCountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddSectorQueueDetail(ctx context.Context, in *SectorQueueDetail, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/AddSectorQueueDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetWaitImportDeal(ctx context.Context, in *DealParam, opts ...grpc.CallOption) (*DealList, error) {
	out := new(DealList)
	err := c.cc.Invoke(ctx, "/GateService/GetWaitImportDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) EditQueueDetailStatus(ctx context.Context, in *EditStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/EditQueueDetailStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateHostNetOccupyTime(ctx context.Context, in *UpdateHostNet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/UpdateHostNetOccupyTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/AddC2Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DelC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/DelC2Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) QueryAsk(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (*AskInfo, error) {
	out := new(AskInfo)
	err := c.cc.Invoke(ctx, "/GateService/QueryAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) QueryDataCap(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/QueryDataCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CheckOpIsOnline(ctx context.Context, in *OpHostUUID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/CheckOpIsOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) SealingSchedDiag(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*SchedDiagRequestInfo, error) {
	out := new(SchedDiagRequestInfo)
	err := c.cc.Invoke(ctx, "/GateService/SealingSchedDiag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) SectorStorage(ctx context.Context, in *SectorActorID, opts ...grpc.CallOption) (*SectorPaths, error) {
	out := new(SectorPaths)
	err := c.cc.Invoke(ctx, "/GateService/SectorStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddColony(ctx context.Context, in *Colony, opts ...grpc.CallOption) (*Colony, error) {
	out := new(Colony)
	err := c.cc.Invoke(ctx, "/GateService/AddColony", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetColony(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*Colony, error) {
	out := new(Colony)
	err := c.cc.Invoke(ctx, "/GateService/GetColony", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StateMinerSectorCount(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*MinerSectors, error) {
	out := new(MinerSectors)
	err := c.cc.Invoke(ctx, "/GateService/StateMinerSectorCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) SealingAbort(ctx context.Context, in *ResetWorker, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GateService/SealingAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetSectorStatus(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*SectorStatus, error) {
	out := new(SectorStatus)
	err := c.cc.Invoke(ctx, "/GateService/GetSectorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) OpLocalSectors(ctx context.Context, in *OpMiner, opts ...grpc.CallOption) (*SectorCount, error) {
	out := new(SectorCount)
	err := c.cc.Invoke(ctx, "/GateService/opLocalSectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StateMinerPower(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*Power, error) {
	out := new(Power)
	err := c.cc.Invoke(ctx, "/GateService/StateMinerPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetHostInfoByIPAndGatewayId(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*OpHostUUID, error) {
	out := new(OpHostUUID)
	err := c.cc.Invoke(ctx, "/GateService/GetHostInfoByIPAndGatewayId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetHostTypeAndStatus(ctx context.Context, in *String, opts ...grpc.CallOption) (*HostRestartInfo, error) {
	out := new(HostRestartInfo)
	err := c.cc.Invoke(ctx, "/GateService/GetHostTypeAndStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CheckLotusHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/CheckLotusHeart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CheckMinerHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/CheckMinerHeart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CheckOWorkerHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/CheckOWorkerHeart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetOpMonitorInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*MonitorInfo, error) {
	out := new(MonitorInfo)
	err := c.cc.Invoke(ctx, "/GateService/GetOpMonitorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetOpScriptInfo(ctx context.Context, in *OpScriptInfo, opts ...grpc.CallOption) (*OpScriptInfoResp, error) {
	out := new(OpScriptInfoResp)
	err := c.cc.Invoke(ctx, "/GateService/GetOpScriptInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetDiskLetter(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpScriptInfoResp, error) {
	out := new(OpScriptInfoResp)
	err := c.cc.Invoke(ctx, "/GateService/GetDiskLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetOpMountInfo(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpMountDiskList, error) {
	out := new(OpMountDiskList)
	err := c.cc.Invoke(ctx, "/GateService/GetOpMountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetOpLogInfo(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogInfoResp, error) {
	out := new(OpLogInfoResp)
	err := c.cc.Invoke(ctx, "/GateService/GetOpLogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetOpLogLen(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogLenResp, error) {
	out := new(OpLogLenResp)
	err := c.cc.Invoke(ctx, "/GateService/GetOpLogLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetNodeMinerInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*NodeMinerInfoResp, error) {
	out := new(NodeMinerInfoResp)
	err := c.cc.Invoke(ctx, "/GateService/GetNodeMinerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DiskReMounting(ctx context.Context, in *DiskReMountReq, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/DiskReMounting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetMinerToken(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/GateService/GetMinerToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServiceServer is the server API for GateService service.
// All implementations should embed UnimplementedGateServiceServer
// for forward compatibility
type GateServiceServer interface {
	GatewayFileExist(context.Context, *String) (*Bool, error)
	OpOnline(context.Context, *String) (*Bool, error)
	OpConnect(context.Context, *RequestConnect) (*String, error)
	OpHeartbeat(context.Context, *String) (*emptypb.Empty, error)
	OplianHeartbeat(context.Context, *String) (*emptypb.Empty, error)
	GetWorkerList(context.Context, *RequestMinerId) (*WorkerList, error)
	StrategyProcess(context.Context, *StrategyInfo) (*ResponseMsg, error)
	ExecuteScript(context.Context, *ScriptInfo) (*String, error)
	FileDistribution(context.Context, *ScriptInfo) (*String, error)
	FileSynOpHost(context.Context, *FileSynOp) (*String, error)
	DownloadSnapshot(context.Context, *Downtown) (*DownloadInfo, error)
	AddLotus(context.Context, *LotusInfo) (*emptypb.Empty, error)
	GetWalletList(context.Context, *RequestOp) (*WalletList, error)
	GetRoomWalletList(context.Context, *RequestOp) (*WalletList, error)
	AddMiner(context.Context, *MinerInfo) (*ResponseMsg, error)
	UpdateLotus(context.Context, *ConnectInfo) (*emptypb.Empty, error)
	AddHostRecord(context.Context, *HostInfo) (*emptypb.Empty, error)
	UpdateMiner(context.Context, *ConnectInfo) (*emptypb.Empty, error)
	UpdateWorker(context.Context, *ConnectInfo) (*emptypb.Empty, error)
	UpdateStorage(context.Context, *ConnectInfo) (*emptypb.Empty, error)
	UpdateBoost(context.Context, *ConnectInfo) (*emptypb.Empty, error)
	AddWorker(context.Context, *BatchWorker) (*emptypb.Empty, error)
	AddStorage(context.Context, *BatchStroage) (*emptypb.Empty, error)
	RunStopService(context.Context, *RunStop) (*emptypb.Empty, error)
	AddBoost(context.Context, *BoostInfo) (*emptypb.Empty, error)
	FileOpSynGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error)
	AddGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error)
	SysFilePoint(context.Context, *SynFileInfo) (*ResponseMsg, error)
	ClearWorker(context.Context, *RequestOp) (*ResponseMsg, error)
	DownLoadFiles(context.Context, *DownLoadInfo) (*ResponseMsg, error)
	AddHostMonitorRecord(context.Context, *HostMonitorInfo) (*emptypb.Empty, error)
	SetWorkerTask(context.Context, *WorkerConfig) (*ResponseMsg, error)
	DelGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error)
	DelOpFile(context.Context, *FileInfo) (*ResponseMsg, error)
	LotusHeight(context.Context, *RequestOp) (*LotusHeightInfo, error)
	ModifyFileStatus(context.Context, *FileManage) (*ResponseMsg, error)
	CompleteCommit2(context.Context, *FileInfo) (*ResponseMsg, error)
	ModifySectorStatus(context.Context, *TaskStatus) (*String, error)
	AddWarn(context.Context, *WarnInfo) (*ResponseMsg, error)
	AddBadSector(context.Context, *BadSectorId) (*ResponseMsg, error)
	OpFileToGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error)
	CheckOpPath(context.Context, *DirFileReq) (*ResponseMsg, error)
	CarFilePath(context.Context, *CarFile) (*CarFile, error)
	HostType(context.Context, *String) (*String, error)
	CarFileList(context.Context, *SectorID) (*CarArray, error)
	ModifyOnlineFile(context.Context, *AddFileInfo) (*ResponseMsg, error)
	RestartMiner(context.Context, *MinerRun) (*emptypb.Empty, error)
	GetFileName(context.Context, *FileNameInfo) (*String, error)
	SetJobPlatformStop(context.Context, *JobPlatform) (*String, error)
	ScriptStop(context.Context, *ScriptInfo) (*String, error)
	C2FileSynStatus(context.Context, *C2SectorID) (*String, error)
	C2FileSynLotus(context.Context, *FileInfo) (*String, error)
	GetC2WorkerInfo(context.Context, *String) (*String, error)
	GetGateWayFile(context.Context, *String) (*String, error)
	RunOpC2(context.Context, *String) (*String, error)
	StopOpC2(context.Context, *String) (*String, error)
	WorkerMountNFS(context.Context, *OpHostUUID) (*emptypb.Empty, error)
	RedoC2Task(context.Context, *String) (*String, error)
	CarFileParam(context.Context, *String) (*CarInfo, error)
	//task
	OpInformationTest(context.Context, *HostTestInfo) (*String, error)
	UpdateSectorStatus(context.Context, *SectorStatus) (*ResponseMsg, error)
	AddSectorTicket(context.Context, *SectorTicket) (*ResponseMsg, error)
	AddSectorCommDR(context.Context, *SectorCommDR) (*ResponseMsg, error)
	AddSectorWaitSeed(context.Context, *SectorSeed) (*ResponseMsg, error)
	AddSectorCommit2(context.Context, *SectorProof) (*ResponseMsg, error)
	AddSectorPreCID(context.Context, *SectorCID) (*ResponseMsg, error)
	AddSectorCommitCID(context.Context, *SectorCID) (*ResponseMsg, error)
	UpdateHostTestRecord(context.Context, *UpdateHostTestInfo) (*emptypb.Empty, error)
	OpInformationPatrol(context.Context, *HostPatrolInfo) (*String, error)
	UpdateHostPatrolRecord(context.Context, *UpdateHostPatrolInfo) (*emptypb.Empty, error)
	CloseOpInformationTest(context.Context, *CloseHostTest) (*String, error)
	RestartAddHostTest(context.Context, *RestartHostTest) (*String, error)
	GetOpHardwareInfo(context.Context, *OpHardwareInfo) (*String, error)
	Commit2TaskResult(context.Context, *SectorID) (*String, error)
	GetHostGroupArray(context.Context, *OpHostUUID) (*HostGroupArray, error)
	CreateSectorTable(context.Context, *Actor) (*emptypb.Empty, error)
	CreateSectorPieceTable(context.Context, *Actor) (*emptypb.Empty, error)
	CreateSectorLogTable(context.Context, *Actor) (*emptypb.Empty, error)
	CreateSectorQueueDetailTable(context.Context, *Actor) (*emptypb.Empty, error)
	AddSectorPiece(context.Context, *SectorPiece) (*ResponseMsg, error)
	AddSectorLog(context.Context, *SectorLog) (*ResponseMsg, error)
	RedoSectorsTask(context.Context, *String) (*ResponseMsg, error)
	UpdateSectorLog(context.Context, *SectorLog) (*ResponseMsg, error)
	StateMinerInfo(context.Context, *FilParam) (*ActorWallet, error)
	StateAccountKey(context.Context, *FilParam) (*String, error)
	WalletBalance(context.Context, *FilParam) (*Wallet, error)
	GetRunningCount(context.Context, *OpTask) (*TaskCount, error)
	GetRunningList(context.Context, *OpTask) (*TaskInfoList, error)
	GetStorageByActor(context.Context, *String) (*LinkList, error)
	GetActorTaskQueue(context.Context, *String) (*TaskQueues, error)
	AddCompleteCountByID(context.Context, *TaskQueue) (*emptypb.Empty, error)
	AddRunCountByID(context.Context, *TaskQueue) (*emptypb.Empty, error)
	AddSectorQueueDetail(context.Context, *SectorQueueDetail) (*emptypb.Empty, error)
	GetWaitImportDeal(context.Context, *DealParam) (*DealList, error)
	EditQueueDetailStatus(context.Context, *EditStatus) (*emptypb.Empty, error)
	UpdateHostNetOccupyTime(context.Context, *UpdateHostNet) (*emptypb.Empty, error)
	AddC2Task(context.Context, *SectorID) (*String, error)
	DelC2Task(context.Context, *SectorID) (*String, error)
	QueryAsk(context.Context, *QueryParam) (*AskInfo, error)
	QueryDataCap(context.Context, *QueryParam) (*String, error)
	CheckOpIsOnline(context.Context, *OpHostUUID) (*String, error)
	SealingSchedDiag(context.Context, *FilParam) (*SchedDiagRequestInfo, error)
	SectorStorage(context.Context, *SectorActorID) (*SectorPaths, error)
	AddColony(context.Context, *Colony) (*Colony, error)
	GetColony(context.Context, *Actor) (*Colony, error)
	StateMinerSectorCount(context.Context, *FilParam) (*MinerSectors, error)
	SealingAbort(context.Context, *ResetWorker) (*emptypb.Empty, error)
	GetSectorStatus(context.Context, *SectorID) (*SectorStatus, error)
	OpLocalSectors(context.Context, *OpMiner) (*SectorCount, error)
	StateMinerPower(context.Context, *FilParam) (*Power, error)
	GetHostInfoByIPAndGatewayId(context.Context, *RequestOp) (*OpHostUUID, error)
	GetHostTypeAndStatus(context.Context, *String) (*HostRestartInfo, error)
	CheckLotusHeart(context.Context, *String) (*String, error)
	CheckMinerHeart(context.Context, *String) (*String, error)
	CheckOWorkerHeart(context.Context, *String) (*String, error)
	GetOpMonitorInfo(context.Context, *OpHardwareInfo) (*MonitorInfo, error)
	GetOpScriptInfo(context.Context, *OpScriptInfo) (*OpScriptInfoResp, error)
	GetDiskLetter(context.Context, *DiskLetterReq) (*OpScriptInfoResp, error)
	GetOpMountInfo(context.Context, *DiskLetterReq) (*OpMountDiskList, error)
	GetOpLogInfo(context.Context, *OpLogInfoReq) (*OpLogInfoResp, error)
	GetOpLogLen(context.Context, *OpLogInfoReq) (*OpLogLenResp, error)
	GetNodeMinerInfo(context.Context, *OpHardwareInfo) (*NodeMinerInfoResp, error)
	DiskReMounting(context.Context, *DiskReMountReq) (*String, error)
	GetMinerToken(context.Context, *String) (*String, error)
}

// UnimplementedGateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGateServiceServer struct {
}

func (UnimplementedGateServiceServer) GatewayFileExist(context.Context, *String) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayFileExist not implemented")
}
func (UnimplementedGateServiceServer) OpOnline(context.Context, *String) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpOnline not implemented")
}
func (UnimplementedGateServiceServer) OpConnect(context.Context, *RequestConnect) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpConnect not implemented")
}
func (UnimplementedGateServiceServer) OpHeartbeat(context.Context, *String) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpHeartbeat not implemented")
}
func (UnimplementedGateServiceServer) OplianHeartbeat(context.Context, *String) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OplianHeartbeat not implemented")
}
func (UnimplementedGateServiceServer) GetWorkerList(context.Context, *RequestMinerId) (*WorkerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerList not implemented")
}
func (UnimplementedGateServiceServer) StrategyProcess(context.Context, *StrategyInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrategyProcess not implemented")
}
func (UnimplementedGateServiceServer) ExecuteScript(context.Context, *ScriptInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScript not implemented")
}
func (UnimplementedGateServiceServer) FileDistribution(context.Context, *ScriptInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDistribution not implemented")
}
func (UnimplementedGateServiceServer) FileSynOpHost(context.Context, *FileSynOp) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileSynOpHost not implemented")
}
func (UnimplementedGateServiceServer) DownloadSnapshot(context.Context, *Downtown) (*DownloadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSnapshot not implemented")
}
func (UnimplementedGateServiceServer) AddLotus(context.Context, *LotusInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLotus not implemented")
}
func (UnimplementedGateServiceServer) GetWalletList(context.Context, *RequestOp) (*WalletList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletList not implemented")
}
func (UnimplementedGateServiceServer) GetRoomWalletList(context.Context, *RequestOp) (*WalletList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomWalletList not implemented")
}
func (UnimplementedGateServiceServer) AddMiner(context.Context, *MinerInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMiner not implemented")
}
func (UnimplementedGateServiceServer) UpdateLotus(context.Context, *ConnectInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLotus not implemented")
}
func (UnimplementedGateServiceServer) AddHostRecord(context.Context, *HostInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHostRecord not implemented")
}
func (UnimplementedGateServiceServer) UpdateMiner(context.Context, *ConnectInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMiner not implemented")
}
func (UnimplementedGateServiceServer) UpdateWorker(context.Context, *ConnectInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorker not implemented")
}
func (UnimplementedGateServiceServer) UpdateStorage(context.Context, *ConnectInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorage not implemented")
}
func (UnimplementedGateServiceServer) UpdateBoost(context.Context, *ConnectInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoost not implemented")
}
func (UnimplementedGateServiceServer) AddWorker(context.Context, *BatchWorker) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorker not implemented")
}
func (UnimplementedGateServiceServer) AddStorage(context.Context, *BatchStroage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorage not implemented")
}
func (UnimplementedGateServiceServer) RunStopService(context.Context, *RunStop) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunStopService not implemented")
}
func (UnimplementedGateServiceServer) AddBoost(context.Context, *BoostInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBoost not implemented")
}
func (UnimplementedGateServiceServer) FileOpSynGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileOpSynGateWay not implemented")
}
func (UnimplementedGateServiceServer) AddGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGateWayFile not implemented")
}
func (UnimplementedGateServiceServer) SysFilePoint(context.Context, *SynFileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysFilePoint not implemented")
}
func (UnimplementedGateServiceServer) ClearWorker(context.Context, *RequestOp) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearWorker not implemented")
}
func (UnimplementedGateServiceServer) DownLoadFiles(context.Context, *DownLoadInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLoadFiles not implemented")
}
func (UnimplementedGateServiceServer) AddHostMonitorRecord(context.Context, *HostMonitorInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHostMonitorRecord not implemented")
}
func (UnimplementedGateServiceServer) SetWorkerTask(context.Context, *WorkerConfig) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkerTask not implemented")
}
func (UnimplementedGateServiceServer) DelGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGateWayFile not implemented")
}
func (UnimplementedGateServiceServer) DelOpFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOpFile not implemented")
}
func (UnimplementedGateServiceServer) LotusHeight(context.Context, *RequestOp) (*LotusHeightInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotusHeight not implemented")
}
func (UnimplementedGateServiceServer) ModifyFileStatus(context.Context, *FileManage) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyFileStatus not implemented")
}
func (UnimplementedGateServiceServer) CompleteCommit2(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteCommit2 not implemented")
}
func (UnimplementedGateServiceServer) ModifySectorStatus(context.Context, *TaskStatus) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySectorStatus not implemented")
}
func (UnimplementedGateServiceServer) AddWarn(context.Context, *WarnInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWarn not implemented")
}
func (UnimplementedGateServiceServer) AddBadSector(context.Context, *BadSectorId) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBadSector not implemented")
}
func (UnimplementedGateServiceServer) OpFileToGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpFileToGateWay not implemented")
}
func (UnimplementedGateServiceServer) CheckOpPath(context.Context, *DirFileReq) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOpPath not implemented")
}
func (UnimplementedGateServiceServer) CarFilePath(context.Context, *CarFile) (*CarFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarFilePath not implemented")
}
func (UnimplementedGateServiceServer) HostType(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostType not implemented")
}
func (UnimplementedGateServiceServer) CarFileList(context.Context, *SectorID) (*CarArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarFileList not implemented")
}
func (UnimplementedGateServiceServer) ModifyOnlineFile(context.Context, *AddFileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOnlineFile not implemented")
}
func (UnimplementedGateServiceServer) RestartMiner(context.Context, *MinerRun) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartMiner not implemented")
}
func (UnimplementedGateServiceServer) GetFileName(context.Context, *FileNameInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileName not implemented")
}
func (UnimplementedGateServiceServer) SetJobPlatformStop(context.Context, *JobPlatform) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobPlatformStop not implemented")
}
func (UnimplementedGateServiceServer) ScriptStop(context.Context, *ScriptInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptStop not implemented")
}
func (UnimplementedGateServiceServer) C2FileSynStatus(context.Context, *C2SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2FileSynStatus not implemented")
}
func (UnimplementedGateServiceServer) C2FileSynLotus(context.Context, *FileInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2FileSynLotus not implemented")
}
func (UnimplementedGateServiceServer) GetC2WorkerInfo(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetC2WorkerInfo not implemented")
}
func (UnimplementedGateServiceServer) GetGateWayFile(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateWayFile not implemented")
}
func (UnimplementedGateServiceServer) RunOpC2(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunOpC2 not implemented")
}
func (UnimplementedGateServiceServer) StopOpC2(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOpC2 not implemented")
}
func (UnimplementedGateServiceServer) WorkerMountNFS(context.Context, *OpHostUUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerMountNFS not implemented")
}
func (UnimplementedGateServiceServer) RedoC2Task(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedoC2Task not implemented")
}
func (UnimplementedGateServiceServer) CarFileParam(context.Context, *String) (*CarInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarFileParam not implemented")
}
func (UnimplementedGateServiceServer) OpInformationTest(context.Context, *HostTestInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpInformationTest not implemented")
}
func (UnimplementedGateServiceServer) UpdateSectorStatus(context.Context, *SectorStatus) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSectorStatus not implemented")
}
func (UnimplementedGateServiceServer) AddSectorTicket(context.Context, *SectorTicket) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorTicket not implemented")
}
func (UnimplementedGateServiceServer) AddSectorCommDR(context.Context, *SectorCommDR) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorCommDR not implemented")
}
func (UnimplementedGateServiceServer) AddSectorWaitSeed(context.Context, *SectorSeed) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorWaitSeed not implemented")
}
func (UnimplementedGateServiceServer) AddSectorCommit2(context.Context, *SectorProof) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorCommit2 not implemented")
}
func (UnimplementedGateServiceServer) AddSectorPreCID(context.Context, *SectorCID) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorPreCID not implemented")
}
func (UnimplementedGateServiceServer) AddSectorCommitCID(context.Context, *SectorCID) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorCommitCID not implemented")
}
func (UnimplementedGateServiceServer) UpdateHostTestRecord(context.Context, *UpdateHostTestInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostTestRecord not implemented")
}
func (UnimplementedGateServiceServer) OpInformationPatrol(context.Context, *HostPatrolInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpInformationPatrol not implemented")
}
func (UnimplementedGateServiceServer) UpdateHostPatrolRecord(context.Context, *UpdateHostPatrolInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostPatrolRecord not implemented")
}
func (UnimplementedGateServiceServer) CloseOpInformationTest(context.Context, *CloseHostTest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOpInformationTest not implemented")
}
func (UnimplementedGateServiceServer) RestartAddHostTest(context.Context, *RestartHostTest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartAddHostTest not implemented")
}
func (UnimplementedGateServiceServer) GetOpHardwareInfo(context.Context, *OpHardwareInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpHardwareInfo not implemented")
}
func (UnimplementedGateServiceServer) Commit2TaskResult(context.Context, *SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit2TaskResult not implemented")
}
func (UnimplementedGateServiceServer) GetHostGroupArray(context.Context, *OpHostUUID) (*HostGroupArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostGroupArray not implemented")
}
func (UnimplementedGateServiceServer) CreateSectorTable(context.Context, *Actor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSectorTable not implemented")
}
func (UnimplementedGateServiceServer) CreateSectorPieceTable(context.Context, *Actor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSectorPieceTable not implemented")
}
func (UnimplementedGateServiceServer) CreateSectorLogTable(context.Context, *Actor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSectorLogTable not implemented")
}
func (UnimplementedGateServiceServer) CreateSectorQueueDetailTable(context.Context, *Actor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSectorQueueDetailTable not implemented")
}
func (UnimplementedGateServiceServer) AddSectorPiece(context.Context, *SectorPiece) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorPiece not implemented")
}
func (UnimplementedGateServiceServer) AddSectorLog(context.Context, *SectorLog) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorLog not implemented")
}
func (UnimplementedGateServiceServer) RedoSectorsTask(context.Context, *String) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedoSectorsTask not implemented")
}
func (UnimplementedGateServiceServer) UpdateSectorLog(context.Context, *SectorLog) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSectorLog not implemented")
}
func (UnimplementedGateServiceServer) StateMinerInfo(context.Context, *FilParam) (*ActorWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateMinerInfo not implemented")
}
func (UnimplementedGateServiceServer) StateAccountKey(context.Context, *FilParam) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateAccountKey not implemented")
}
func (UnimplementedGateServiceServer) WalletBalance(context.Context, *FilParam) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletBalance not implemented")
}
func (UnimplementedGateServiceServer) GetRunningCount(context.Context, *OpTask) (*TaskCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningCount not implemented")
}
func (UnimplementedGateServiceServer) GetRunningList(context.Context, *OpTask) (*TaskInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningList not implemented")
}
func (UnimplementedGateServiceServer) GetStorageByActor(context.Context, *String) (*LinkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageByActor not implemented")
}
func (UnimplementedGateServiceServer) GetActorTaskQueue(context.Context, *String) (*TaskQueues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorTaskQueue not implemented")
}
func (UnimplementedGateServiceServer) AddCompleteCountByID(context.Context, *TaskQueue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompleteCountByID not implemented")
}
func (UnimplementedGateServiceServer) AddRunCountByID(context.Context, *TaskQueue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRunCountByID not implemented")
}
func (UnimplementedGateServiceServer) AddSectorQueueDetail(context.Context, *SectorQueueDetail) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorQueueDetail not implemented")
}
func (UnimplementedGateServiceServer) GetWaitImportDeal(context.Context, *DealParam) (*DealList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaitImportDeal not implemented")
}
func (UnimplementedGateServiceServer) EditQueueDetailStatus(context.Context, *EditStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditQueueDetailStatus not implemented")
}
func (UnimplementedGateServiceServer) UpdateHostNetOccupyTime(context.Context, *UpdateHostNet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostNetOccupyTime not implemented")
}
func (UnimplementedGateServiceServer) AddC2Task(context.Context, *SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddC2Task not implemented")
}
func (UnimplementedGateServiceServer) DelC2Task(context.Context, *SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelC2Task not implemented")
}
func (UnimplementedGateServiceServer) QueryAsk(context.Context, *QueryParam) (*AskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAsk not implemented")
}
func (UnimplementedGateServiceServer) QueryDataCap(context.Context, *QueryParam) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDataCap not implemented")
}
func (UnimplementedGateServiceServer) CheckOpIsOnline(context.Context, *OpHostUUID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOpIsOnline not implemented")
}
func (UnimplementedGateServiceServer) SealingSchedDiag(context.Context, *FilParam) (*SchedDiagRequestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealingSchedDiag not implemented")
}
func (UnimplementedGateServiceServer) SectorStorage(context.Context, *SectorActorID) (*SectorPaths, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SectorStorage not implemented")
}
func (UnimplementedGateServiceServer) AddColony(context.Context, *Colony) (*Colony, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddColony not implemented")
}
func (UnimplementedGateServiceServer) GetColony(context.Context, *Actor) (*Colony, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColony not implemented")
}
func (UnimplementedGateServiceServer) StateMinerSectorCount(context.Context, *FilParam) (*MinerSectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateMinerSectorCount not implemented")
}
func (UnimplementedGateServiceServer) SealingAbort(context.Context, *ResetWorker) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealingAbort not implemented")
}
func (UnimplementedGateServiceServer) GetSectorStatus(context.Context, *SectorID) (*SectorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectorStatus not implemented")
}
func (UnimplementedGateServiceServer) OpLocalSectors(context.Context, *OpMiner) (*SectorCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpLocalSectors not implemented")
}
func (UnimplementedGateServiceServer) StateMinerPower(context.Context, *FilParam) (*Power, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateMinerPower not implemented")
}
func (UnimplementedGateServiceServer) GetHostInfoByIPAndGatewayId(context.Context, *RequestOp) (*OpHostUUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostInfoByIPAndGatewayId not implemented")
}
func (UnimplementedGateServiceServer) GetHostTypeAndStatus(context.Context, *String) (*HostRestartInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostTypeAndStatus not implemented")
}
func (UnimplementedGateServiceServer) CheckLotusHeart(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLotusHeart not implemented")
}
func (UnimplementedGateServiceServer) CheckMinerHeart(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMinerHeart not implemented")
}
func (UnimplementedGateServiceServer) CheckOWorkerHeart(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOWorkerHeart not implemented")
}
func (UnimplementedGateServiceServer) GetOpMonitorInfo(context.Context, *OpHardwareInfo) (*MonitorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpMonitorInfo not implemented")
}
func (UnimplementedGateServiceServer) GetOpScriptInfo(context.Context, *OpScriptInfo) (*OpScriptInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpScriptInfo not implemented")
}
func (UnimplementedGateServiceServer) GetDiskLetter(context.Context, *DiskLetterReq) (*OpScriptInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskLetter not implemented")
}
func (UnimplementedGateServiceServer) GetOpMountInfo(context.Context, *DiskLetterReq) (*OpMountDiskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpMountInfo not implemented")
}
func (UnimplementedGateServiceServer) GetOpLogInfo(context.Context, *OpLogInfoReq) (*OpLogInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpLogInfo not implemented")
}
func (UnimplementedGateServiceServer) GetOpLogLen(context.Context, *OpLogInfoReq) (*OpLogLenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpLogLen not implemented")
}
func (UnimplementedGateServiceServer) GetNodeMinerInfo(context.Context, *OpHardwareInfo) (*NodeMinerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMinerInfo not implemented")
}
func (UnimplementedGateServiceServer) DiskReMounting(context.Context, *DiskReMountReq) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskReMounting not implemented")
}
func (UnimplementedGateServiceServer) GetMinerToken(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerToken not implemented")
}

// UnsafeGateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateServiceServer will
// result in compilation errors.
type UnsafeGateServiceServer interface {
	mustEmbedUnimplementedGateServiceServer()
}

func RegisterGateServiceServer(s grpc.ServiceRegistrar, srv GateServiceServer) {
	s.RegisterService(&GateService_ServiceDesc, srv)
}

func _GateService_GatewayFileExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GatewayFileExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GatewayFileExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GatewayFileExist(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OpOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OpOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/OpOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OpOnline(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OpConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OpConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/OpConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OpConnect(ctx, req.(*RequestConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OpHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OpHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/OpHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OpHeartbeat(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OplianHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OplianHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/OplianHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OplianHeartbeat(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetWorkerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMinerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetWorkerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetWorkerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetWorkerList(ctx, req.(*RequestMinerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StrategyProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StrategyProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/StrategyProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StrategyProcess(ctx, req.(*StrategyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ExecuteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ExecuteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/ExecuteScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ExecuteScript(ctx, req.(*ScriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_FileDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).FileDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/FileDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).FileDistribution(ctx, req.(*ScriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_FileSynOpHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileSynOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).FileSynOpHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/FileSynOpHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).FileSynOpHost(ctx, req.(*FileSynOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DownloadSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Downtown)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DownloadSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/DownloadSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DownloadSnapshot(ctx, req.(*Downtown))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddLotus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotusInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddLotus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddLotus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddLotus(ctx, req.(*LotusInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetWalletList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetWalletList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetWalletList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetWalletList(ctx, req.(*RequestOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetRoomWalletList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetRoomWalletList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetRoomWalletList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetRoomWalletList(ctx, req.(*RequestOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddMiner(ctx, req.(*MinerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateLotus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateLotus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateLotus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateLotus(ctx, req.(*ConnectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddHostRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddHostRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddHostRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddHostRecord(ctx, req.(*HostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateMiner(ctx, req.(*ConnectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateWorker(ctx, req.(*ConnectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateStorage(ctx, req.(*ConnectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateBoost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateBoost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateBoost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateBoost(ctx, req.(*ConnectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddWorker(ctx, req.(*BatchWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchStroage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddStorage(ctx, req.(*BatchStroage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RunStopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunStop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RunStopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/RunStopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RunStopService(ctx, req.(*RunStop))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddBoost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddBoost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddBoost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddBoost(ctx, req.(*BoostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_FileOpSynGateWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).FileOpSynGateWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/FileOpSynGateWay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).FileOpSynGateWay(ctx, req.(*AddFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddGateWayFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddGateWayFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddGateWayFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddGateWayFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_SysFilePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SysFilePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/SysFilePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SysFilePoint(ctx, req.(*SynFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ClearWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ClearWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/ClearWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ClearWorker(ctx, req.(*RequestOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DownLoadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownLoadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DownLoadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/DownLoadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DownLoadFiles(ctx, req.(*DownLoadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddHostMonitorRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostMonitorInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddHostMonitorRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddHostMonitorRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddHostMonitorRecord(ctx, req.(*HostMonitorInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_SetWorkerTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SetWorkerTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/SetWorkerTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SetWorkerTask(ctx, req.(*WorkerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DelGateWayFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DelGateWayFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/DelGateWayFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DelGateWayFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DelOpFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DelOpFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/DelOpFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DelOpFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_LotusHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).LotusHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/LotusHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).LotusHeight(ctx, req.(*RequestOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ModifyFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileManage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ModifyFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/ModifyFileStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ModifyFileStatus(ctx, req.(*FileManage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CompleteCommit2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CompleteCommit2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CompleteCommit2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CompleteCommit2(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ModifySectorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ModifySectorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/ModifySectorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ModifySectorStatus(ctx, req.(*TaskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarnInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddWarn(ctx, req.(*WarnInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddBadSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BadSectorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddBadSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddBadSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddBadSector(ctx, req.(*BadSectorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OpFileToGateWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OpFileToGateWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/OpFileToGateWay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OpFileToGateWay(ctx, req.(*AddFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CheckOpPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CheckOpPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CheckOpPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CheckOpPath(ctx, req.(*DirFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CarFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CarFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CarFilePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CarFilePath(ctx, req.(*CarFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_HostType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).HostType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/HostType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).HostType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CarFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CarFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CarFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CarFileList(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ModifyOnlineFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ModifyOnlineFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/ModifyOnlineFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ModifyOnlineFile(ctx, req.(*AddFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RestartMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RestartMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/RestartMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RestartMiner(ctx, req.(*MinerRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetFileName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileNameInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetFileName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetFileName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetFileName(ctx, req.(*FileNameInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_SetJobPlatformStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobPlatform)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SetJobPlatformStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/SetJobPlatformStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SetJobPlatformStop(ctx, req.(*JobPlatform))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ScriptStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ScriptStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/ScriptStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ScriptStop(ctx, req.(*ScriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_C2FileSynStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).C2FileSynStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/C2FileSynStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).C2FileSynStatus(ctx, req.(*C2SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_C2FileSynLotus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).C2FileSynLotus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/C2FileSynLotus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).C2FileSynLotus(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetC2WorkerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetC2WorkerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetC2WorkerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetC2WorkerInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetGateWayFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetGateWayFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetGateWayFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetGateWayFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RunOpC2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RunOpC2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/RunOpC2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RunOpC2(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StopOpC2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StopOpC2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/StopOpC2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StopOpC2(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_WorkerMountNFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHostUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).WorkerMountNFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/WorkerMountNFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).WorkerMountNFS(ctx, req.(*OpHostUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RedoC2Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RedoC2Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/RedoC2Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RedoC2Task(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CarFileParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CarFileParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CarFileParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CarFileParam(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OpInformationTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostTestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OpInformationTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/OpInformationTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OpInformationTest(ctx, req.(*HostTestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateSectorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateSectorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateSectorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateSectorStatus(ctx, req.(*SectorStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorTicket(ctx, req.(*SectorTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorCommDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorCommDR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorCommDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorCommDR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorCommDR(ctx, req.(*SectorCommDR))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorWaitSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorSeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorWaitSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorWaitSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorWaitSeed(ctx, req.(*SectorSeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorCommit2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorCommit2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorCommit2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorCommit2(ctx, req.(*SectorProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorPreCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorCID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorPreCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorPreCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorPreCID(ctx, req.(*SectorCID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorCommitCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorCID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorCommitCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorCommitCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorCommitCID(ctx, req.(*SectorCID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateHostTestRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostTestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateHostTestRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateHostTestRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateHostTestRecord(ctx, req.(*UpdateHostTestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OpInformationPatrol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPatrolInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OpInformationPatrol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/OpInformationPatrol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OpInformationPatrol(ctx, req.(*HostPatrolInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateHostPatrolRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostPatrolInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateHostPatrolRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateHostPatrolRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateHostPatrolRecord(ctx, req.(*UpdateHostPatrolInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CloseOpInformationTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseHostTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CloseOpInformationTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CloseOpInformationTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CloseOpInformationTest(ctx, req.(*CloseHostTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RestartAddHostTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartHostTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RestartAddHostTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/RestartAddHostTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RestartAddHostTest(ctx, req.(*RestartHostTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetOpHardwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHardwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetOpHardwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetOpHardwareInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetOpHardwareInfo(ctx, req.(*OpHardwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_Commit2TaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).Commit2TaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/Commit2TaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).Commit2TaskResult(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetHostGroupArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHostUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetHostGroupArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetHostGroupArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetHostGroupArray(ctx, req.(*OpHostUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateSectorTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateSectorTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CreateSectorTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateSectorTable(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateSectorPieceTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateSectorPieceTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CreateSectorPieceTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateSectorPieceTable(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateSectorLogTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateSectorLogTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CreateSectorLogTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateSectorLogTable(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateSectorQueueDetailTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateSectorQueueDetailTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CreateSectorQueueDetailTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateSectorQueueDetailTable(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorPiece)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorPiece(ctx, req.(*SectorPiece))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorLog(ctx, req.(*SectorLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RedoSectorsTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RedoSectorsTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/RedoSectorsTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RedoSectorsTask(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateSectorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateSectorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateSectorLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateSectorLog(ctx, req.(*SectorLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StateMinerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StateMinerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/StateMinerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StateMinerInfo(ctx, req.(*FilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StateAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StateAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/StateAccountKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StateAccountKey(ctx, req.(*FilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_WalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).WalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/WalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).WalletBalance(ctx, req.(*FilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetRunningCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetRunningCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetRunningCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetRunningCount(ctx, req.(*OpTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetRunningList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetRunningList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetRunningList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetRunningList(ctx, req.(*OpTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetStorageByActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetStorageByActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetStorageByActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetStorageByActor(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetActorTaskQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetActorTaskQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetActorTaskQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetActorTaskQueue(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddCompleteCountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddCompleteCountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddCompleteCountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddCompleteCountByID(ctx, req.(*TaskQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddRunCountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddRunCountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddRunCountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddRunCountByID(ctx, req.(*TaskQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddSectorQueueDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorQueueDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddSectorQueueDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddSectorQueueDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddSectorQueueDetail(ctx, req.(*SectorQueueDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetWaitImportDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetWaitImportDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetWaitImportDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetWaitImportDeal(ctx, req.(*DealParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_EditQueueDetailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).EditQueueDetailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/EditQueueDetailStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).EditQueueDetailStatus(ctx, req.(*EditStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateHostNetOccupyTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostNet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateHostNetOccupyTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/UpdateHostNetOccupyTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateHostNetOccupyTime(ctx, req.(*UpdateHostNet))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddC2Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddC2Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddC2Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddC2Task(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DelC2Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DelC2Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/DelC2Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DelC2Task(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_QueryAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).QueryAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/QueryAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).QueryAsk(ctx, req.(*QueryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_QueryDataCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).QueryDataCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/QueryDataCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).QueryDataCap(ctx, req.(*QueryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CheckOpIsOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHostUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CheckOpIsOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CheckOpIsOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CheckOpIsOnline(ctx, req.(*OpHostUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_SealingSchedDiag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SealingSchedDiag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/SealingSchedDiag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SealingSchedDiag(ctx, req.(*FilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_SectorStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorActorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SectorStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/SectorStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SectorStorage(ctx, req.(*SectorActorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddColony_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Colony)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddColony(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/AddColony",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddColony(ctx, req.(*Colony))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetColony_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetColony(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetColony",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetColony(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StateMinerSectorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StateMinerSectorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/StateMinerSectorCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StateMinerSectorCount(ctx, req.(*FilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_SealingAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SealingAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/SealingAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SealingAbort(ctx, req.(*ResetWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetSectorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetSectorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetSectorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetSectorStatus(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_OpLocalSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpMiner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).OpLocalSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/opLocalSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).OpLocalSectors(ctx, req.(*OpMiner))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StateMinerPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StateMinerPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/StateMinerPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StateMinerPower(ctx, req.(*FilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetHostInfoByIPAndGatewayId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetHostInfoByIPAndGatewayId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetHostInfoByIPAndGatewayId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetHostInfoByIPAndGatewayId(ctx, req.(*RequestOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetHostTypeAndStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetHostTypeAndStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetHostTypeAndStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetHostTypeAndStatus(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CheckLotusHeart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CheckLotusHeart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CheckLotusHeart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CheckLotusHeart(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CheckMinerHeart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CheckMinerHeart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CheckMinerHeart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CheckMinerHeart(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CheckOWorkerHeart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CheckOWorkerHeart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/CheckOWorkerHeart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CheckOWorkerHeart(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetOpMonitorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHardwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetOpMonitorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetOpMonitorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetOpMonitorInfo(ctx, req.(*OpHardwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetOpScriptInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpScriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetOpScriptInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetOpScriptInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetOpScriptInfo(ctx, req.(*OpScriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetDiskLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskLetterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetDiskLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetDiskLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetDiskLetter(ctx, req.(*DiskLetterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetOpMountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskLetterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetOpMountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetOpMountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetOpMountInfo(ctx, req.(*DiskLetterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetOpLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetOpLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetOpLogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetOpLogInfo(ctx, req.(*OpLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetOpLogLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetOpLogLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetOpLogLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetOpLogLen(ctx, req.(*OpLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetNodeMinerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHardwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetNodeMinerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetNodeMinerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetNodeMinerInfo(ctx, req.(*OpHardwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DiskReMounting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskReMountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DiskReMounting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/DiskReMounting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DiskReMounting(ctx, req.(*DiskReMountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetMinerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetMinerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GateService/GetMinerToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetMinerToken(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

// GateService_ServiceDesc is the grpc.ServiceDesc for GateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GateService",
	HandlerType: (*GateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GatewayFileExist",
			Handler:    _GateService_GatewayFileExist_Handler,
		},
		{
			MethodName: "OpOnline",
			Handler:    _GateService_OpOnline_Handler,
		},
		{
			MethodName: "OpConnect",
			Handler:    _GateService_OpConnect_Handler,
		},
		{
			MethodName: "OpHeartbeat",
			Handler:    _GateService_OpHeartbeat_Handler,
		},
		{
			MethodName: "OplianHeartbeat",
			Handler:    _GateService_OplianHeartbeat_Handler,
		},
		{
			MethodName: "GetWorkerList",
			Handler:    _GateService_GetWorkerList_Handler,
		},
		{
			MethodName: "StrategyProcess",
			Handler:    _GateService_StrategyProcess_Handler,
		},
		{
			MethodName: "ExecuteScript",
			Handler:    _GateService_ExecuteScript_Handler,
		},
		{
			MethodName: "FileDistribution",
			Handler:    _GateService_FileDistribution_Handler,
		},
		{
			MethodName: "FileSynOpHost",
			Handler:    _GateService_FileSynOpHost_Handler,
		},
		{
			MethodName: "DownloadSnapshot",
			Handler:    _GateService_DownloadSnapshot_Handler,
		},
		{
			MethodName: "AddLotus",
			Handler:    _GateService_AddLotus_Handler,
		},
		{
			MethodName: "GetWalletList",
			Handler:    _GateService_GetWalletList_Handler,
		},
		{
			MethodName: "GetRoomWalletList",
			Handler:    _GateService_GetRoomWalletList_Handler,
		},
		{
			MethodName: "AddMiner",
			Handler:    _GateService_AddMiner_Handler,
		},
		{
			MethodName: "UpdateLotus",
			Handler:    _GateService_UpdateLotus_Handler,
		},
		{
			MethodName: "AddHostRecord",
			Handler:    _GateService_AddHostRecord_Handler,
		},
		{
			MethodName: "UpdateMiner",
			Handler:    _GateService_UpdateMiner_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _GateService_UpdateWorker_Handler,
		},
		{
			MethodName: "UpdateStorage",
			Handler:    _GateService_UpdateStorage_Handler,
		},
		{
			MethodName: "UpdateBoost",
			Handler:    _GateService_UpdateBoost_Handler,
		},
		{
			MethodName: "AddWorker",
			Handler:    _GateService_AddWorker_Handler,
		},
		{
			MethodName: "AddStorage",
			Handler:    _GateService_AddStorage_Handler,
		},
		{
			MethodName: "RunStopService",
			Handler:    _GateService_RunStopService_Handler,
		},
		{
			MethodName: "AddBoost",
			Handler:    _GateService_AddBoost_Handler,
		},
		{
			MethodName: "FileOpSynGateWay",
			Handler:    _GateService_FileOpSynGateWay_Handler,
		},
		{
			MethodName: "AddGateWayFile",
			Handler:    _GateService_AddGateWayFile_Handler,
		},
		{
			MethodName: "SysFilePoint",
			Handler:    _GateService_SysFilePoint_Handler,
		},
		{
			MethodName: "ClearWorker",
			Handler:    _GateService_ClearWorker_Handler,
		},
		{
			MethodName: "DownLoadFiles",
			Handler:    _GateService_DownLoadFiles_Handler,
		},
		{
			MethodName: "AddHostMonitorRecord",
			Handler:    _GateService_AddHostMonitorRecord_Handler,
		},
		{
			MethodName: "SetWorkerTask",
			Handler:    _GateService_SetWorkerTask_Handler,
		},
		{
			MethodName: "DelGateWayFile",
			Handler:    _GateService_DelGateWayFile_Handler,
		},
		{
			MethodName: "DelOpFile",
			Handler:    _GateService_DelOpFile_Handler,
		},
		{
			MethodName: "LotusHeight",
			Handler:    _GateService_LotusHeight_Handler,
		},
		{
			MethodName: "ModifyFileStatus",
			Handler:    _GateService_ModifyFileStatus_Handler,
		},
		{
			MethodName: "CompleteCommit2",
			Handler:    _GateService_CompleteCommit2_Handler,
		},
		{
			MethodName: "ModifySectorStatus",
			Handler:    _GateService_ModifySectorStatus_Handler,
		},
		{
			MethodName: "AddWarn",
			Handler:    _GateService_AddWarn_Handler,
		},
		{
			MethodName: "AddBadSector",
			Handler:    _GateService_AddBadSector_Handler,
		},
		{
			MethodName: "OpFileToGateWay",
			Handler:    _GateService_OpFileToGateWay_Handler,
		},
		{
			MethodName: "CheckOpPath",
			Handler:    _GateService_CheckOpPath_Handler,
		},
		{
			MethodName: "CarFilePath",
			Handler:    _GateService_CarFilePath_Handler,
		},
		{
			MethodName: "HostType",
			Handler:    _GateService_HostType_Handler,
		},
		{
			MethodName: "CarFileList",
			Handler:    _GateService_CarFileList_Handler,
		},
		{
			MethodName: "ModifyOnlineFile",
			Handler:    _GateService_ModifyOnlineFile_Handler,
		},
		{
			MethodName: "RestartMiner",
			Handler:    _GateService_RestartMiner_Handler,
		},
		{
			MethodName: "GetFileName",
			Handler:    _GateService_GetFileName_Handler,
		},
		{
			MethodName: "SetJobPlatformStop",
			Handler:    _GateService_SetJobPlatformStop_Handler,
		},
		{
			MethodName: "ScriptStop",
			Handler:    _GateService_ScriptStop_Handler,
		},
		{
			MethodName: "C2FileSynStatus",
			Handler:    _GateService_C2FileSynStatus_Handler,
		},
		{
			MethodName: "C2FileSynLotus",
			Handler:    _GateService_C2FileSynLotus_Handler,
		},
		{
			MethodName: "GetC2WorkerInfo",
			Handler:    _GateService_GetC2WorkerInfo_Handler,
		},
		{
			MethodName: "GetGateWayFile",
			Handler:    _GateService_GetGateWayFile_Handler,
		},
		{
			MethodName: "RunOpC2",
			Handler:    _GateService_RunOpC2_Handler,
		},
		{
			MethodName: "StopOpC2",
			Handler:    _GateService_StopOpC2_Handler,
		},
		{
			MethodName: "WorkerMountNFS",
			Handler:    _GateService_WorkerMountNFS_Handler,
		},
		{
			MethodName: "RedoC2Task",
			Handler:    _GateService_RedoC2Task_Handler,
		},
		{
			MethodName: "CarFileParam",
			Handler:    _GateService_CarFileParam_Handler,
		},
		{
			MethodName: "OpInformationTest",
			Handler:    _GateService_OpInformationTest_Handler,
		},
		{
			MethodName: "UpdateSectorStatus",
			Handler:    _GateService_UpdateSectorStatus_Handler,
		},
		{
			MethodName: "AddSectorTicket",
			Handler:    _GateService_AddSectorTicket_Handler,
		},
		{
			MethodName: "AddSectorCommDR",
			Handler:    _GateService_AddSectorCommDR_Handler,
		},
		{
			MethodName: "AddSectorWaitSeed",
			Handler:    _GateService_AddSectorWaitSeed_Handler,
		},
		{
			MethodName: "AddSectorCommit2",
			Handler:    _GateService_AddSectorCommit2_Handler,
		},
		{
			MethodName: "AddSectorPreCID",
			Handler:    _GateService_AddSectorPreCID_Handler,
		},
		{
			MethodName: "AddSectorCommitCID",
			Handler:    _GateService_AddSectorCommitCID_Handler,
		},
		{
			MethodName: "UpdateHostTestRecord",
			Handler:    _GateService_UpdateHostTestRecord_Handler,
		},
		{
			MethodName: "OpInformationPatrol",
			Handler:    _GateService_OpInformationPatrol_Handler,
		},
		{
			MethodName: "UpdateHostPatrolRecord",
			Handler:    _GateService_UpdateHostPatrolRecord_Handler,
		},
		{
			MethodName: "CloseOpInformationTest",
			Handler:    _GateService_CloseOpInformationTest_Handler,
		},
		{
			MethodName: "RestartAddHostTest",
			Handler:    _GateService_RestartAddHostTest_Handler,
		},
		{
			MethodName: "GetOpHardwareInfo",
			Handler:    _GateService_GetOpHardwareInfo_Handler,
		},
		{
			MethodName: "Commit2TaskResult",
			Handler:    _GateService_Commit2TaskResult_Handler,
		},
		{
			MethodName: "GetHostGroupArray",
			Handler:    _GateService_GetHostGroupArray_Handler,
		},
		{
			MethodName: "CreateSectorTable",
			Handler:    _GateService_CreateSectorTable_Handler,
		},
		{
			MethodName: "CreateSectorPieceTable",
			Handler:    _GateService_CreateSectorPieceTable_Handler,
		},
		{
			MethodName: "CreateSectorLogTable",
			Handler:    _GateService_CreateSectorLogTable_Handler,
		},
		{
			MethodName: "CreateSectorQueueDetailTable",
			Handler:    _GateService_CreateSectorQueueDetailTable_Handler,
		},
		{
			MethodName: "AddSectorPiece",
			Handler:    _GateService_AddSectorPiece_Handler,
		},
		{
			MethodName: "AddSectorLog",
			Handler:    _GateService_AddSectorLog_Handler,
		},
		{
			MethodName: "RedoSectorsTask",
			Handler:    _GateService_RedoSectorsTask_Handler,
		},
		{
			MethodName: "UpdateSectorLog",
			Handler:    _GateService_UpdateSectorLog_Handler,
		},
		{
			MethodName: "StateMinerInfo",
			Handler:    _GateService_StateMinerInfo_Handler,
		},
		{
			MethodName: "StateAccountKey",
			Handler:    _GateService_StateAccountKey_Handler,
		},
		{
			MethodName: "WalletBalance",
			Handler:    _GateService_WalletBalance_Handler,
		},
		{
			MethodName: "GetRunningCount",
			Handler:    _GateService_GetRunningCount_Handler,
		},
		{
			MethodName: "GetRunningList",
			Handler:    _GateService_GetRunningList_Handler,
		},
		{
			MethodName: "GetStorageByActor",
			Handler:    _GateService_GetStorageByActor_Handler,
		},
		{
			MethodName: "GetActorTaskQueue",
			Handler:    _GateService_GetActorTaskQueue_Handler,
		},
		{
			MethodName: "AddCompleteCountByID",
			Handler:    _GateService_AddCompleteCountByID_Handler,
		},
		{
			MethodName: "AddRunCountByID",
			Handler:    _GateService_AddRunCountByID_Handler,
		},
		{
			MethodName: "AddSectorQueueDetail",
			Handler:    _GateService_AddSectorQueueDetail_Handler,
		},
		{
			MethodName: "GetWaitImportDeal",
			Handler:    _GateService_GetWaitImportDeal_Handler,
		},
		{
			MethodName: "EditQueueDetailStatus",
			Handler:    _GateService_EditQueueDetailStatus_Handler,
		},
		{
			MethodName: "UpdateHostNetOccupyTime",
			Handler:    _GateService_UpdateHostNetOccupyTime_Handler,
		},
		{
			MethodName: "AddC2Task",
			Handler:    _GateService_AddC2Task_Handler,
		},
		{
			MethodName: "DelC2Task",
			Handler:    _GateService_DelC2Task_Handler,
		},
		{
			MethodName: "QueryAsk",
			Handler:    _GateService_QueryAsk_Handler,
		},
		{
			MethodName: "QueryDataCap",
			Handler:    _GateService_QueryDataCap_Handler,
		},
		{
			MethodName: "CheckOpIsOnline",
			Handler:    _GateService_CheckOpIsOnline_Handler,
		},
		{
			MethodName: "SealingSchedDiag",
			Handler:    _GateService_SealingSchedDiag_Handler,
		},
		{
			MethodName: "SectorStorage",
			Handler:    _GateService_SectorStorage_Handler,
		},
		{
			MethodName: "AddColony",
			Handler:    _GateService_AddColony_Handler,
		},
		{
			MethodName: "GetColony",
			Handler:    _GateService_GetColony_Handler,
		},
		{
			MethodName: "StateMinerSectorCount",
			Handler:    _GateService_StateMinerSectorCount_Handler,
		},
		{
			MethodName: "SealingAbort",
			Handler:    _GateService_SealingAbort_Handler,
		},
		{
			MethodName: "GetSectorStatus",
			Handler:    _GateService_GetSectorStatus_Handler,
		},
		{
			MethodName: "opLocalSectors",
			Handler:    _GateService_OpLocalSectors_Handler,
		},
		{
			MethodName: "StateMinerPower",
			Handler:    _GateService_StateMinerPower_Handler,
		},
		{
			MethodName: "GetHostInfoByIPAndGatewayId",
			Handler:    _GateService_GetHostInfoByIPAndGatewayId_Handler,
		},
		{
			MethodName: "GetHostTypeAndStatus",
			Handler:    _GateService_GetHostTypeAndStatus_Handler,
		},
		{
			MethodName: "CheckLotusHeart",
			Handler:    _GateService_CheckLotusHeart_Handler,
		},
		{
			MethodName: "CheckMinerHeart",
			Handler:    _GateService_CheckMinerHeart_Handler,
		},
		{
			MethodName: "CheckOWorkerHeart",
			Handler:    _GateService_CheckOWorkerHeart_Handler,
		},
		{
			MethodName: "GetOpMonitorInfo",
			Handler:    _GateService_GetOpMonitorInfo_Handler,
		},
		{
			MethodName: "GetOpScriptInfo",
			Handler:    _GateService_GetOpScriptInfo_Handler,
		},
		{
			MethodName: "GetDiskLetter",
			Handler:    _GateService_GetDiskLetter_Handler,
		},
		{
			MethodName: "GetOpMountInfo",
			Handler:    _GateService_GetOpMountInfo_Handler,
		},
		{
			MethodName: "GetOpLogInfo",
			Handler:    _GateService_GetOpLogInfo_Handler,
		},
		{
			MethodName: "GetOpLogLen",
			Handler:    _GateService_GetOpLogLen_Handler,
		},
		{
			MethodName: "GetNodeMinerInfo",
			Handler:    _GateService_GetNodeMinerInfo_Handler,
		},
		{
			MethodName: "DiskReMounting",
			Handler:    _GateService_DiskReMounting_Handler,
		},
		{
			MethodName: "GetMinerToken",
			Handler:    _GateService_GetMinerToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/proto/gateway.proto",
}
