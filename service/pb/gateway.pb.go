// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: service/proto/gateway.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseWorkerConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigList []*ResponseWorkerConfig `protobuf:"bytes,10,rep,name=configList,proto3" json:"configList,omitempty"`
}

func (x *ResponseWorkerConfigList) Reset() {
	*x = ResponseWorkerConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWorkerConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWorkerConfigList) ProtoMessage() {}

func (x *ResponseWorkerConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWorkerConfigList.ProtoReflect.Descriptor instead.
func (*ResponseWorkerConfigList) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseWorkerConfigList) GetConfigList() []*ResponseWorkerConfig {
	if x != nil {
		return x.ConfigList
	}
	return nil
}

type ResponseWorkerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpId      string `protobuf:"bytes,10,opt,name=OpId,proto3" json:"OpId,omitempty"`
	MinerId   string `protobuf:"bytes,20,opt,name=MinerId,proto3" json:"MinerId,omitempty"`
	PreCount1 int32  `protobuf:"varint,30,opt,name=PreCount1,proto3" json:"PreCount1,omitempty"`
	PreCount2 int32  `protobuf:"varint,40,opt,name=PreCount2,proto3" json:"PreCount2,omitempty"`
	IP        string `protobuf:"bytes,50,opt,name=IP,proto3" json:"IP,omitempty"`
	Port      string `protobuf:"bytes,60,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *ResponseWorkerConfig) Reset() {
	*x = ResponseWorkerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWorkerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWorkerConfig) ProtoMessage() {}

func (x *ResponseWorkerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWorkerConfig.ProtoReflect.Descriptor instead.
func (*ResponseWorkerConfig) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseWorkerConfig) GetOpId() string {
	if x != nil {
		return x.OpId
	}
	return ""
}

func (x *ResponseWorkerConfig) GetMinerId() string {
	if x != nil {
		return x.MinerId
	}
	return ""
}

func (x *ResponseWorkerConfig) GetPreCount1() int32 {
	if x != nil {
		return x.PreCount1
	}
	return 0
}

func (x *ResponseWorkerConfig) GetPreCount2() int32 {
	if x != nil {
		return x.PreCount2
	}
	return 0
}

func (x *ResponseWorkerConfig) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *ResponseWorkerConfig) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type ResponseTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerList []*WorkerTask `protobuf:"bytes,10,rep,name=workerList,proto3" json:"workerList,omitempty"`
}

func (x *ResponseTaskList) Reset() {
	*x = ResponseTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTaskList) ProtoMessage() {}

func (x *ResponseTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTaskList.ProtoReflect.Descriptor instead.
func (*ResponseTaskList) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseTaskList) GetWorkerList() []*WorkerTask {
	if x != nil {
		return x.WorkerList
	}
	return nil
}

type RequestMinerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinerId string `protobuf:"bytes,10,opt,name=minerId,proto3" json:"minerId,omitempty"`
}

func (x *RequestMinerId) Reset() {
	*x = RequestMinerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMinerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMinerId) ProtoMessage() {}

func (x *RequestMinerId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMinerId.ProtoReflect.Descriptor instead.
func (*RequestMinerId) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *RequestMinerId) GetMinerId() string {
	if x != nil {
		return x.MinerId
	}
	return ""
}

type RequestWorkerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinerId  string `protobuf:"bytes,10,opt,name=minerId,proto3" json:"minerId,omitempty"`
	WorkerId string `protobuf:"bytes,20,opt,name=workerId,proto3" json:"workerId,omitempty"`
}

func (x *RequestWorkerId) Reset() {
	*x = RequestWorkerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWorkerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWorkerId) ProtoMessage() {}

func (x *RequestWorkerId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWorkerId.ProtoReflect.Descriptor instead.
func (*RequestWorkerId) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *RequestWorkerId) GetMinerId() string {
	if x != nil {
		return x.MinerId
	}
	return ""
}

func (x *RequestWorkerId) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

type RequestWorkerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinerId    string        `protobuf:"bytes,10,opt,name=minerId,proto3" json:"minerId,omitempty"`
	WorkerList []*WorkerTask `protobuf:"bytes,20,rep,name=workerList,proto3" json:"workerList,omitempty"`
}

func (x *RequestWorkerList) Reset() {
	*x = RequestWorkerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWorkerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWorkerList) ProtoMessage() {}

func (x *RequestWorkerList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWorkerList.ProtoReflect.Descriptor instead.
func (*RequestWorkerList) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *RequestWorkerList) GetMinerId() string {
	if x != nil {
		return x.MinerId
	}
	return ""
}

func (x *RequestWorkerList) GetWorkerList() []*WorkerTask {
	if x != nil {
		return x.WorkerList
	}
	return nil
}

type WorkerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId string `protobuf:"bytes,10,opt,name=workerId,proto3" json:"workerId,omitempty"`
	PreCount string `protobuf:"bytes,20,opt,name=preCount,proto3" json:"preCount,omitempty"`
	Ip       string `protobuf:"bytes,30,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     string `protobuf:"bytes,40,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *WorkerTask) Reset() {
	*x = WorkerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerTask) ProtoMessage() {}

func (x *WorkerTask) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerTask.ProtoReflect.Descriptor instead.
func (*WorkerTask) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *WorkerTask) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerTask) GetPreCount() string {
	if x != nil {
		return x.PreCount
	}
	return ""
}

func (x *WorkerTask) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *WorkerTask) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type Downtown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpId string `protobuf:"bytes,1,opt,name=opId,proto3" json:"opId,omitempty"` //预留字段
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`   //下载路径
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"` //存储路径
}

func (x *Downtown) Reset() {
	*x = Downtown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Downtown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Downtown) ProtoMessage() {}

func (x *Downtown) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Downtown.ProtoReflect.Descriptor instead.
func (*Downtown) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *Downtown) GetOpId() string {
	if x != nil {
		return x.OpId
	}
	return ""
}

func (x *Downtown) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Downtown) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load     uint64 `protobuf:"varint,10,opt,name=Load,proto3" json:"Load,omitempty"`
	Total    uint64 `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
	FilePath string `protobuf:"bytes,30,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	Url      string `protobuf:"bytes,40,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *DownloadInfo) Reset() {
	*x = DownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadInfo) ProtoMessage() {}

func (x *DownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadInfo.ProtoReflect.Descriptor instead.
func (*DownloadInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadInfo) GetLoad() uint64 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *DownloadInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DownloadInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DownloadInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ResponseTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Second int32 `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"` //预留字段
}

func (x *ResponseTime) Reset() {
	*x = ResponseTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTime) ProtoMessage() {}

func (x *ResponseTime) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTime.ProtoReflect.Descriptor instead.
func (*ResponseTime) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseTime) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntranetIP       string  `protobuf:"bytes,1,opt,name=IntranetIP,proto3" json:"IntranetIP,omitempty"`
	InternetIP       string  `protobuf:"bytes,2,opt,name=InternetIP,proto3" json:"InternetIP,omitempty"`
	UUID             string  `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	DeviceSN         string  `protobuf:"bytes,4,opt,name=DeviceSN,proto3" json:"DeviceSN,omitempty"`
	HostManufacturer string  `protobuf:"bytes,5,opt,name=HostManufacturer,proto3" json:"HostManufacturer,omitempty"`
	HostModel        string  `protobuf:"bytes,6,opt,name=HostModel,proto3" json:"HostModel,omitempty"`
	OperatingSystem  string  `protobuf:"bytes,7,opt,name=OperatingSystem,proto3" json:"OperatingSystem,omitempty"`
	CPUCoreNum       int64   `protobuf:"varint,8,opt,name=CPUCoreNum,proto3" json:"CPUCoreNum,omitempty"`
	CPUModel         string  `protobuf:"bytes,9,opt,name=CPUModel,proto3" json:"CPUModel,omitempty"`
	MemorySize       int64   `protobuf:"varint,10,opt,name=MemorySize,proto3" json:"MemorySize,omitempty"`
	DiskNum          int64   `protobuf:"varint,11,opt,name=DiskNum,proto3" json:"DiskNum,omitempty"`
	DiskSize         float32 `protobuf:"fixed32,12,opt,name=DiskSize,proto3" json:"DiskSize,omitempty"`
	ServerDNS        string  `protobuf:"bytes,13,opt,name=ServerDNS,proto3" json:"ServerDNS,omitempty"`
	SubnetMask       string  `protobuf:"bytes,14,opt,name=SubnetMask,proto3" json:"SubnetMask,omitempty"`
	Gateway          string  `protobuf:"bytes,15,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	GatewayId        string  `protobuf:"bytes,16,opt,name=GatewayId,proto3" json:"GatewayId,omitempty"`
	SystemVersion    string  `protobuf:"bytes,17,opt,name=SystemVersion,proto3" json:"SystemVersion,omitempty"`
	SystemBits       int64   `protobuf:"varint,18,opt,name=SystemBits,proto3" json:"SystemBits,omitempty"`
	GPUNum           int64   `protobuf:"varint,19,opt,name=GPUNum,proto3" json:"GPUNum,omitempty"`
	HostName         string  `protobuf:"bytes,20,opt,name=HostName,proto3" json:"HostName,omitempty"`
	IsGroupArray     bool    `protobuf:"varint,21,opt,name=IsGroupArray,proto3" json:"IsGroupArray,omitempty"`
	HostClassify     int64   `protobuf:"varint,22,opt,name=HostClassify,proto3" json:"HostClassify,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *HostInfo) GetIntranetIP() string {
	if x != nil {
		return x.IntranetIP
	}
	return ""
}

func (x *HostInfo) GetInternetIP() string {
	if x != nil {
		return x.InternetIP
	}
	return ""
}

func (x *HostInfo) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *HostInfo) GetDeviceSN() string {
	if x != nil {
		return x.DeviceSN
	}
	return ""
}

func (x *HostInfo) GetHostManufacturer() string {
	if x != nil {
		return x.HostManufacturer
	}
	return ""
}

func (x *HostInfo) GetHostModel() string {
	if x != nil {
		return x.HostModel
	}
	return ""
}

func (x *HostInfo) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *HostInfo) GetCPUCoreNum() int64 {
	if x != nil {
		return x.CPUCoreNum
	}
	return 0
}

func (x *HostInfo) GetCPUModel() string {
	if x != nil {
		return x.CPUModel
	}
	return ""
}

func (x *HostInfo) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *HostInfo) GetDiskNum() int64 {
	if x != nil {
		return x.DiskNum
	}
	return 0
}

func (x *HostInfo) GetDiskSize() float32 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *HostInfo) GetServerDNS() string {
	if x != nil {
		return x.ServerDNS
	}
	return ""
}

func (x *HostInfo) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *HostInfo) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *HostInfo) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *HostInfo) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *HostInfo) GetSystemBits() int64 {
	if x != nil {
		return x.SystemBits
	}
	return 0
}

func (x *HostInfo) GetGPUNum() int64 {
	if x != nil {
		return x.GPUNum
	}
	return 0
}

func (x *HostInfo) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostInfo) GetIsGroupArray() bool {
	if x != nil {
		return x.IsGroupArray
	}
	return false
}

func (x *HostInfo) GetHostClassify() int64 {
	if x != nil {
		return x.HostClassify
	}
	return 0
}

type HostMonitorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostUUID       string  `protobuf:"bytes,1,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	CPUUseRate     float32 `protobuf:"fixed32,2,opt,name=CPUUseRate,proto3" json:"CPUUseRate,omitempty"`
	DiskUseRate    float32 `protobuf:"fixed32,3,opt,name=DiskUseRate,proto3" json:"DiskUseRate,omitempty"`
	MemoryUseRate  float32 `protobuf:"fixed32,4,opt,name=MemoryUseRate,proto3" json:"MemoryUseRate,omitempty"`
	GPUUseInfo     string  `protobuf:"bytes,5,opt,name=GPUUseInfo,proto3" json:"GPUUseInfo,omitempty"`
	CPUTemperature string  `protobuf:"bytes,6,opt,name=CPUTemperature,proto3" json:"CPUTemperature,omitempty"`
	DiskSize       string  `protobuf:"bytes,7,opt,name=DiskSize,proto3" json:"DiskSize,omitempty"`
	DiskUseSize    string  `protobuf:"bytes,8,opt,name=DiskUseSize,proto3" json:"DiskUseSize,omitempty"`
	MemorySize     int64   `protobuf:"varint,9,opt,name=MemorySize,proto3" json:"MemorySize,omitempty"`
	MemoryUseSize  int64   `protobuf:"varint,10,opt,name=MemoryUseSize,proto3" json:"MemoryUseSize,omitempty"`
}

func (x *HostMonitorInfo) Reset() {
	*x = HostMonitorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostMonitorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMonitorInfo) ProtoMessage() {}

func (x *HostMonitorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMonitorInfo.ProtoReflect.Descriptor instead.
func (*HostMonitorInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *HostMonitorInfo) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *HostMonitorInfo) GetCPUUseRate() float32 {
	if x != nil {
		return x.CPUUseRate
	}
	return 0
}

func (x *HostMonitorInfo) GetDiskUseRate() float32 {
	if x != nil {
		return x.DiskUseRate
	}
	return 0
}

func (x *HostMonitorInfo) GetMemoryUseRate() float32 {
	if x != nil {
		return x.MemoryUseRate
	}
	return 0
}

func (x *HostMonitorInfo) GetGPUUseInfo() string {
	if x != nil {
		return x.GPUUseInfo
	}
	return ""
}

func (x *HostMonitorInfo) GetCPUTemperature() string {
	if x != nil {
		return x.CPUTemperature
	}
	return ""
}

func (x *HostMonitorInfo) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

func (x *HostMonitorInfo) GetDiskUseSize() string {
	if x != nil {
		return x.DiskUseSize
	}
	return ""
}

func (x *HostMonitorInfo) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *HostMonitorInfo) GetMemoryUseSize() int64 {
	if x != nil {
		return x.MemoryUseSize
	}
	return 0
}

type UpdateHostTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestBeginAt      int64  `protobuf:"varint,1,opt,name=TestBeginAt,proto3" json:"TestBeginAt,omitempty"`
	HostUUID         string `protobuf:"bytes,2,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	TestResult       int64  `protobuf:"varint,3,opt,name=TestResult,proto3" json:"TestResult,omitempty"`
	CPUHardInfo      string `protobuf:"bytes,4,opt,name=CPUHardInfo,proto3" json:"CPUHardInfo,omitempty"`
	CPUHardScore     int64  `protobuf:"varint,5,opt,name=CPUHardScore,proto3" json:"CPUHardScore,omitempty"`
	GPUHardInfo      string `protobuf:"bytes,6,opt,name=GPUHardInfo,proto3" json:"GPUHardInfo,omitempty"`
	GPUHardScore     int64  `protobuf:"varint,7,opt,name=GPUHardScore,proto3" json:"GPUHardScore,omitempty"`
	MemoryHardInfo   string `protobuf:"bytes,8,opt,name=MemoryHardInfo,proto3" json:"MemoryHardInfo,omitempty"`
	MemoryHardScore  int64  `protobuf:"varint,9,opt,name=MemoryHardScore,proto3" json:"MemoryHardScore,omitempty"`
	DiskHardInfo     string `protobuf:"bytes,10,opt,name=DiskHardInfo,proto3" json:"DiskHardInfo,omitempty"`
	DiskHardScore    int64  `protobuf:"varint,11,opt,name=DiskHardScore,proto3" json:"DiskHardScore,omitempty"`
	NetTestInfo      string `protobuf:"bytes,12,opt,name=NetTestInfo,proto3" json:"NetTestInfo,omitempty"`
	NetTestScore     int64  `protobuf:"varint,13,opt,name=NetTestScore,proto3" json:"NetTestScore,omitempty"`
	GPUTestInfo      string `protobuf:"bytes,14,opt,name=GPUTestInfo,proto3" json:"GPUTestInfo,omitempty"`
	GPUTestScore     int64  `protobuf:"varint,15,opt,name=GPUTestScore,proto3" json:"GPUTestScore,omitempty"`
	DiskIO           int64  `protobuf:"varint,16,opt,name=DiskIO,proto3" json:"DiskIO,omitempty"`
	DiskAllRate      string `protobuf:"bytes,17,opt,name=DiskAllRate,proto3" json:"DiskAllRate,omitempty"`
	DiskAllRateScore int64  `protobuf:"varint,18,opt,name=DiskAllRateScore,proto3" json:"DiskAllRateScore,omitempty"`
	DiskNFSRate      string `protobuf:"bytes,19,opt,name=DiskNFSRate,proto3" json:"DiskNFSRate,omitempty"`
	DiskNFSRateScore int64  `protobuf:"varint,20,opt,name=DiskNFSRateScore,proto3" json:"DiskNFSRateScore,omitempty"`
	DiskSSDRate      string `protobuf:"bytes,21,opt,name=DiskSSDRate,proto3" json:"DiskSSDRate,omitempty"`
	DiskSSDRateScore int64  `protobuf:"varint,22,opt,name=DiskSSDRateScore,proto3" json:"DiskSSDRateScore,omitempty"`
	TestType         int64  `protobuf:"varint,23,opt,name=TestType,proto3" json:"TestType,omitempty"`
	IsAddPower       bool   `protobuf:"varint,24,opt,name=IsAddPower,proto3" json:"IsAddPower,omitempty"`
	SelectHostUUIDs  string `protobuf:"bytes,25,opt,name=SelectHostUUIDs,proto3" json:"SelectHostUUIDs,omitempty"`
	SelectHostIPs    string `protobuf:"bytes,26,opt,name=SelectHostIPs,proto3" json:"SelectHostIPs,omitempty"`
}

func (x *UpdateHostTestInfo) Reset() {
	*x = UpdateHostTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostTestInfo) ProtoMessage() {}

func (x *UpdateHostTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostTestInfo.ProtoReflect.Descriptor instead.
func (*UpdateHostTestInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateHostTestInfo) GetTestBeginAt() int64 {
	if x != nil {
		return x.TestBeginAt
	}
	return 0
}

func (x *UpdateHostTestInfo) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *UpdateHostTestInfo) GetTestResult() int64 {
	if x != nil {
		return x.TestResult
	}
	return 0
}

func (x *UpdateHostTestInfo) GetCPUHardInfo() string {
	if x != nil {
		return x.CPUHardInfo
	}
	return ""
}

func (x *UpdateHostTestInfo) GetCPUHardScore() int64 {
	if x != nil {
		return x.CPUHardScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetGPUHardInfo() string {
	if x != nil {
		return x.GPUHardInfo
	}
	return ""
}

func (x *UpdateHostTestInfo) GetGPUHardScore() int64 {
	if x != nil {
		return x.GPUHardScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetMemoryHardInfo() string {
	if x != nil {
		return x.MemoryHardInfo
	}
	return ""
}

func (x *UpdateHostTestInfo) GetMemoryHardScore() int64 {
	if x != nil {
		return x.MemoryHardScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetDiskHardInfo() string {
	if x != nil {
		return x.DiskHardInfo
	}
	return ""
}

func (x *UpdateHostTestInfo) GetDiskHardScore() int64 {
	if x != nil {
		return x.DiskHardScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetNetTestInfo() string {
	if x != nil {
		return x.NetTestInfo
	}
	return ""
}

func (x *UpdateHostTestInfo) GetNetTestScore() int64 {
	if x != nil {
		return x.NetTestScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetGPUTestInfo() string {
	if x != nil {
		return x.GPUTestInfo
	}
	return ""
}

func (x *UpdateHostTestInfo) GetGPUTestScore() int64 {
	if x != nil {
		return x.GPUTestScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetDiskIO() int64 {
	if x != nil {
		return x.DiskIO
	}
	return 0
}

func (x *UpdateHostTestInfo) GetDiskAllRate() string {
	if x != nil {
		return x.DiskAllRate
	}
	return ""
}

func (x *UpdateHostTestInfo) GetDiskAllRateScore() int64 {
	if x != nil {
		return x.DiskAllRateScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetDiskNFSRate() string {
	if x != nil {
		return x.DiskNFSRate
	}
	return ""
}

func (x *UpdateHostTestInfo) GetDiskNFSRateScore() int64 {
	if x != nil {
		return x.DiskNFSRateScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetDiskSSDRate() string {
	if x != nil {
		return x.DiskSSDRate
	}
	return ""
}

func (x *UpdateHostTestInfo) GetDiskSSDRateScore() int64 {
	if x != nil {
		return x.DiskSSDRateScore
	}
	return 0
}

func (x *UpdateHostTestInfo) GetTestType() int64 {
	if x != nil {
		return x.TestType
	}
	return 0
}

func (x *UpdateHostTestInfo) GetIsAddPower() bool {
	if x != nil {
		return x.IsAddPower
	}
	return false
}

func (x *UpdateHostTestInfo) GetSelectHostUUIDs() string {
	if x != nil {
		return x.SelectHostUUIDs
	}
	return ""
}

func (x *UpdateHostTestInfo) GetSelectHostIPs() string {
	if x != nil {
		return x.SelectHostIPs
	}
	return ""
}

type UpdateHostPatrolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatrolBeginAt               int64   `protobuf:"varint,1,opt,name=PatrolBeginAt,proto3" json:"PatrolBeginAt,omitempty"`
	HostUUID                    string  `protobuf:"bytes,2,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	PatrolResult                int64   `protobuf:"varint,3,opt,name=PatrolResult,proto3" json:"PatrolResult,omitempty"`
	DiskIO                      bool    `protobuf:"varint,4,opt,name=DiskIO,proto3" json:"DiskIO,omitempty"`
	DiskIODuration              string  `protobuf:"bytes,5,opt,name=DiskIODuration,proto3" json:"DiskIODuration,omitempty"`
	HostIsDown                  bool    `protobuf:"varint,6,opt,name=HostIsDown,proto3" json:"HostIsDown,omitempty"`
	HostIsDownDuration          string  `protobuf:"bytes,7,opt,name=HostIsDownDuration,proto3" json:"HostIsDownDuration,omitempty"`
	HostNetStatus               bool    `protobuf:"varint,8,opt,name=HostNetStatus,proto3" json:"HostNetStatus,omitempty"`
	HostNetDuration             string  `protobuf:"bytes,9,opt,name=HostNetDuration,proto3" json:"HostNetDuration,omitempty"`
	LogInfoStatus               bool    `protobuf:"varint,10,opt,name=LogInfoStatus,proto3" json:"LogInfoStatus,omitempty"`
	LogInfoDuration             string  `protobuf:"bytes,11,opt,name=LogInfoDuration,proto3" json:"LogInfoDuration,omitempty"`
	LogOvertimeStatus           bool    `protobuf:"varint,12,opt,name=LogOvertimeStatus,proto3" json:"LogOvertimeStatus,omitempty"`
	LogOvertimeDuration         string  `protobuf:"bytes,13,opt,name=LogOvertimeDuration,proto3" json:"LogOvertimeDuration,omitempty"`
	WalletBalanceStatus         bool    `protobuf:"varint,14,opt,name=WalletBalanceStatus,proto3" json:"WalletBalanceStatus,omitempty"`
	WalletBalance               float32 `protobuf:"fixed32,15,opt,name=WalletBalance,proto3" json:"WalletBalance,omitempty"`
	WalletBalanceDuration       string  `protobuf:"bytes,16,opt,name=WalletBalanceDuration,proto3" json:"WalletBalanceDuration,omitempty"`
	LotusSyncStatus             bool    `protobuf:"varint,17,opt,name=LotusSyncStatus,proto3" json:"LotusSyncStatus,omitempty"`
	LotusSyncDuration           string  `protobuf:"bytes,18,opt,name=LotusSyncDuration,proto3" json:"LotusSyncDuration,omitempty"`
	GPUDriveStatus              bool    `protobuf:"varint,19,opt,name=GPUDriveStatus,proto3" json:"GPUDriveStatus,omitempty"`
	GPUDriveDuration            string  `protobuf:"bytes,20,opt,name=GPUDriveDuration,proto3" json:"GPUDriveDuration,omitempty"`
	PackageVersionStatus        bool    `protobuf:"varint,21,opt,name=PackageVersionStatus,proto3" json:"PackageVersionStatus,omitempty"`
	PackageVersion              string  `protobuf:"bytes,22,opt,name=PackageVersion,proto3" json:"PackageVersion,omitempty"`
	PackageVersionDuration      string  `protobuf:"bytes,23,opt,name=PackageVersionDuration,proto3" json:"PackageVersionDuration,omitempty"`
	DataCatalogStatus           bool    `protobuf:"varint,24,opt,name=DataCatalogStatus,proto3" json:"DataCatalogStatus,omitempty"`
	DataCatalogDuration         string  `protobuf:"bytes,25,opt,name=DataCatalogDuration,proto3" json:"DataCatalogDuration,omitempty"`
	EnvironmentVariableStatus   bool    `protobuf:"varint,26,opt,name=EnvironmentVariableStatus,proto3" json:"EnvironmentVariableStatus,omitempty"`
	EnvironmentVariableDuration string  `protobuf:"bytes,27,opt,name=EnvironmentVariableDuration,proto3" json:"EnvironmentVariableDuration,omitempty"`
	BlockLogStatus              bool    `protobuf:"varint,28,opt,name=BlockLogStatus,proto3" json:"BlockLogStatus,omitempty"`
	BlockLogDuration            string  `protobuf:"bytes,29,opt,name=BlockLogDuration,proto3" json:"BlockLogDuration,omitempty"`
	TimeSyncStatus              bool    `protobuf:"varint,30,opt,name=TimeSyncStatus,proto3" json:"TimeSyncStatus,omitempty"`
	TimeSyncDuration            string  `protobuf:"bytes,31,opt,name=TimeSyncDuration,proto3" json:"TimeSyncDuration,omitempty"`
	PingNetStatus               bool    `protobuf:"varint,32,opt,name=PingNetStatus,proto3" json:"PingNetStatus,omitempty"`
	PingNetDuration             string  `protobuf:"bytes,33,opt,name=PingNetDuration,proto3" json:"PingNetDuration,omitempty"`
}

func (x *UpdateHostPatrolInfo) Reset() {
	*x = UpdateHostPatrolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostPatrolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostPatrolInfo) ProtoMessage() {}

func (x *UpdateHostPatrolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostPatrolInfo.ProtoReflect.Descriptor instead.
func (*UpdateHostPatrolInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateHostPatrolInfo) GetPatrolBeginAt() int64 {
	if x != nil {
		return x.PatrolBeginAt
	}
	return 0
}

func (x *UpdateHostPatrolInfo) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetPatrolResult() int64 {
	if x != nil {
		return x.PatrolResult
	}
	return 0
}

func (x *UpdateHostPatrolInfo) GetDiskIO() bool {
	if x != nil {
		return x.DiskIO
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetDiskIODuration() string {
	if x != nil {
		return x.DiskIODuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetHostIsDown() bool {
	if x != nil {
		return x.HostIsDown
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetHostIsDownDuration() string {
	if x != nil {
		return x.HostIsDownDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetHostNetStatus() bool {
	if x != nil {
		return x.HostNetStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetHostNetDuration() string {
	if x != nil {
		return x.HostNetDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetLogInfoStatus() bool {
	if x != nil {
		return x.LogInfoStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetLogInfoDuration() string {
	if x != nil {
		return x.LogInfoDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetLogOvertimeStatus() bool {
	if x != nil {
		return x.LogOvertimeStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetLogOvertimeDuration() string {
	if x != nil {
		return x.LogOvertimeDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetWalletBalanceStatus() bool {
	if x != nil {
		return x.WalletBalanceStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetWalletBalance() float32 {
	if x != nil {
		return x.WalletBalance
	}
	return 0
}

func (x *UpdateHostPatrolInfo) GetWalletBalanceDuration() string {
	if x != nil {
		return x.WalletBalanceDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetLotusSyncStatus() bool {
	if x != nil {
		return x.LotusSyncStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetLotusSyncDuration() string {
	if x != nil {
		return x.LotusSyncDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetGPUDriveStatus() bool {
	if x != nil {
		return x.GPUDriveStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetGPUDriveDuration() string {
	if x != nil {
		return x.GPUDriveDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetPackageVersionStatus() bool {
	if x != nil {
		return x.PackageVersionStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetPackageVersionDuration() string {
	if x != nil {
		return x.PackageVersionDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetDataCatalogStatus() bool {
	if x != nil {
		return x.DataCatalogStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetDataCatalogDuration() string {
	if x != nil {
		return x.DataCatalogDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetEnvironmentVariableStatus() bool {
	if x != nil {
		return x.EnvironmentVariableStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetEnvironmentVariableDuration() string {
	if x != nil {
		return x.EnvironmentVariableDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetBlockLogStatus() bool {
	if x != nil {
		return x.BlockLogStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetBlockLogDuration() string {
	if x != nil {
		return x.BlockLogDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetTimeSyncStatus() bool {
	if x != nil {
		return x.TimeSyncStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetTimeSyncDuration() string {
	if x != nil {
		return x.TimeSyncDuration
	}
	return ""
}

func (x *UpdateHostPatrolInfo) GetPingNetStatus() bool {
	if x != nil {
		return x.PingNetStatus
	}
	return false
}

func (x *UpdateHostPatrolInfo) GetPingNetDuration() string {
	if x != nil {
		return x.PingNetDuration
	}
	return ""
}

type CloseHostTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestBeginAt int64  `protobuf:"varint,1,opt,name=TestBeginAt,proto3" json:"TestBeginAt,omitempty"`
	HostUUID    string `protobuf:"bytes,2,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	TestResult  int64  `protobuf:"varint,3,opt,name=TestResult,proto3" json:"TestResult,omitempty"`
}

func (x *CloseHostTestInfo) Reset() {
	*x = CloseHostTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseHostTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseHostTestInfo) ProtoMessage() {}

func (x *CloseHostTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseHostTestInfo.ProtoReflect.Descriptor instead.
func (*CloseHostTestInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *CloseHostTestInfo) GetTestBeginAt() int64 {
	if x != nil {
		return x.TestBeginAt
	}
	return 0
}

func (x *CloseHostTestInfo) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *CloseHostTestInfo) GetTestResult() int64 {
	if x != nil {
		return x.TestResult
	}
	return 0
}

type UpdateHostTestClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TestBeginAt int64  `protobuf:"varint,2,opt,name=TestBeginAt,proto3" json:"TestBeginAt,omitempty"`
	HostUUID    string `protobuf:"bytes,3,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	TestResult  int64  `protobuf:"varint,4,opt,name=TestResult,proto3" json:"TestResult,omitempty"`
}

func (x *UpdateHostTestClose) Reset() {
	*x = UpdateHostTestClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostTestClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostTestClose) ProtoMessage() {}

func (x *UpdateHostTestClose) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostTestClose.ProtoReflect.Descriptor instead.
func (*UpdateHostTestClose) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateHostTestClose) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateHostTestClose) GetTestBeginAt() int64 {
	if x != nil {
		return x.TestBeginAt
	}
	return 0
}

func (x *UpdateHostTestClose) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *UpdateHostTestClose) GetTestResult() int64 {
	if x != nil {
		return x.TestResult
	}
	return 0
}

type UpdateHostNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostUUIDs string `protobuf:"bytes,1,opt,name=HostUUIDs,proto3" json:"HostUUIDs,omitempty"`
}

func (x *UpdateHostNet) Reset() {
	*x = UpdateHostNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostNet) ProtoMessage() {}

func (x *UpdateHostNet) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostNet.ProtoReflect.Descriptor instead.
func (*UpdateHostNet) Descriptor() ([]byte, []int) {
	return file_service_proto_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateHostNet) GetHostUUIDs() string {
	if x != nil {
		return x.HostUUIDs
	}
	return ""
}

var File_service_proto_gateway_proto protoreflect.FileDescriptor

var file_service_proto_gateway_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x50, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x3f, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x2a, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x68, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x44, 0x0a, 0x08,
	0x44, 0x6f, 0x77, 0x6e, 0x74, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x66, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x26, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0xb8, 0x05, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x50, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x50, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x50, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x50, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x4e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x4e, 0x12,
	0x2a, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x50, 0x55, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x4e, 0x53, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x4e, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x74, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x50, 0x55, 0x4e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x47, 0x50, 0x55, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x22, 0xe1, 0x02,
	0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x50, 0x55, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x43, 0x50, 0x55, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x50, 0x55, 0x55, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x50, 0x55, 0x55, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x50, 0x55, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43,
	0x50, 0x55, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73,
	0x6b, 0x55, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xb4, 0x07, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54,
	0x65, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x48, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x50, 0x55,
	0x48, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x50, 0x55, 0x48,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x43, 0x50, 0x55, 0x48, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x47, 0x50, 0x55, 0x48, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x47, 0x50, 0x55, 0x48, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x47, 0x50, 0x55, 0x48, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x47, 0x50, 0x55, 0x48, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x48, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x72, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x6b,
	0x48, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b,
	0x48, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x50, 0x55, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x50, 0x55, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x47, 0x50,
	0x55, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x4f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x4f, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x44, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x46, 0x53, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x46, 0x53, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x46, 0x53, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x44, 0x69,
	0x73, 0x6b, 0x4e, 0x46, 0x53, 0x52, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x53, 0x44, 0x52, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x53, 0x44, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x53, 0x44, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x53, 0x44, 0x52, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x64,
	0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x41, 0x64, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x50, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x73, 0x22, 0xb2, 0x0b, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x61, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x4f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x4f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x73, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x73, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x4e,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x4c, 0x6f, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4c, 0x6f, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x4c, 0x6f, 0x74, 0x75, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x6f, 0x74, 0x75,
	0x73, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x47, 0x50, 0x55, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x47, 0x50, 0x55, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x47, 0x50, 0x55, 0x44, 0x72, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x16, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f,
	0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x69,
	0x6e, 0x67, 0x4e, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a,
	0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x83, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54,
	0x65, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x32, 0x92, 0x2d, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x05, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x4f,
	0x70, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x05, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x4f, 0x70, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x0b, 0x4f, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0f, 0x4f, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0d,
	0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x27, 0x0a,
	0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0b,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x07, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x12, 0x26, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x4f, 0x70, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x4f, 0x70, 0x1a,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x10, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x09,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x6f, 0x77, 0x6e, 0x1a, 0x0d, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x41, 0x64,
	0x64, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x2e, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x1a, 0x0b, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x1a, 0x0b, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x12,
	0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x09, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x0d, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x08, 0x2e, 0x52, 0x75, 0x6e,
	0x53, 0x74, 0x6f, 0x70, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x10,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x53, 0x79, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79,
	0x12, 0x0c, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x09,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x53, 0x79, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x0a, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x1a, 0x0c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x0d,
	0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x0d, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x42, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x10, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x29,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x4f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x2b, 0x0a, 0x0b, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0a,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x1a, 0x10, 0x2e, 0x4c, 0x6f, 0x74,
	0x75, 0x73, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x10,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x09,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x09,
	0x2e, 0x57, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x42, 0x61,
	0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x42, 0x61, 0x64, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x0f, 0x4f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x47,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x12, 0x0c, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x28, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x0b, 0x2e, 0x44, 0x69, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0b,
	0x43, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x08, 0x2e, 0x43, 0x61,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x08, 0x2e, 0x43, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x0b, 0x43, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x09, 0x2e, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x2e, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x31, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x09, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x0c, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a,
	0x0f, 0x43, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x2e, 0x43, 0x32, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x1a, 0x07, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x32, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x6e, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x12, 0x09, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00,
	0x12, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x32, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x07, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x07, 0x52,
	0x75, 0x6e, 0x4f, 0x70, 0x43, 0x32, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x70, 0x43, 0x32, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x07, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x46, 0x53, 0x12, 0x0b, 0x2e, 0x4f, 0x70, 0x48, 0x6f, 0x73,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x6f, 0x43, 0x32, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x07, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x08, 0x2e, 0x43, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0d, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x31, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x44, 0x52, 0x12, 0x0d, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x44, 0x52, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x57,
	0x61, 0x69, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x65, 0x64, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x32, 0x12, 0x0c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x43, 0x49, 0x44, 0x12, 0x0a, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x49,
	0x44, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x2e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x49, 0x44, 0x12, 0x0a, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x49,
	0x44, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x45, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x13, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x0f, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x07,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x15, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x10, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x1a,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0f, 0x2e, 0x4f, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x11, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x32, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x09, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x1a, 0x07, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x0b, 0x2e, 0x4f, 0x70,
	0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x06, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x38, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x06, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x06, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x06, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x65,
	0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x28, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x12, 0x0a, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x1a, 0x0c, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x64, 0x6f, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x07, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x0a, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x1a, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x29, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0c,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x09, 0x2e, 0x46, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x07, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x07, 0x2e, 0x4f, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0a, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x07, 0x2e, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0d, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x09, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x1a, 0x0b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x0a, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x0a, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x42, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x53, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x0a, 0x2e, 0x64, 0x65, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x09, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x41, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x32, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x09, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x43, 0x32, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x09, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x1a, 0x07, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x6b,
	0x12, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x08, 0x2e,
	0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x12, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a,
	0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x49, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x0b, 0x2e, 0x4f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x07, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x61, 0x67, 0x12, 0x09, 0x2e, 0x46, 0x69, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x15, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x2e,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x1a, 0x0c, 0x2e,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x12, 0x07, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x6e,
	0x79, 0x1a, 0x07, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x12, 0x06, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x1a,
	0x07, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x1a,
	0x0d, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x08, 0x2e, 0x4f, 0x70, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x46, 0x69,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x06, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49,
	0x50, 0x41, 0x6e, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x0a, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x1a, 0x0b, 0x2e, 0x4f, 0x70, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x25, 0x0a,
	0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x74, 0x75, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x11, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x4f, 0x70, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x4f,
	0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x4f, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x0e, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x11, 0x2e, 0x4f, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x4f, 0x70, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x4f,
	0x70, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x4f, 0x70,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2d, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x6e, 0x12, 0x0d, 0x2e, 0x4f,
	0x70, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x4f, 0x70,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0f, 0x2e, 0x4f, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x12, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f,
	0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_gateway_proto_rawDescOnce sync.Once
	file_service_proto_gateway_proto_rawDescData = file_service_proto_gateway_proto_rawDesc
)

func file_service_proto_gateway_proto_rawDescGZIP() []byte {
	file_service_proto_gateway_proto_rawDescOnce.Do(func() {
		file_service_proto_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_gateway_proto_rawDescData)
	})
	return file_service_proto_gateway_proto_rawDescData
}

var file_service_proto_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_service_proto_gateway_proto_goTypes = []interface{}{
	(*ResponseWorkerConfigList)(nil), // 0: ResponseWorkerConfigList
	(*ResponseWorkerConfig)(nil),     // 1: ResponseWorkerConfig
	(*ResponseTaskList)(nil),         // 2: ResponseTaskList
	(*RequestMinerId)(nil),           // 3: RequestMinerId
	(*RequestWorkerId)(nil),          // 4: RequestWorkerId
	(*RequestWorkerList)(nil),        // 5: RequestWorkerList
	(*WorkerTask)(nil),               // 6: WorkerTask
	(*Downtown)(nil),                 // 7: Downtown
	(*DownloadInfo)(nil),             // 8: DownloadInfo
	(*ResponseTime)(nil),             // 9: ResponseTime
	(*HostInfo)(nil),                 // 10: HostInfo
	(*HostMonitorInfo)(nil),          // 11: HostMonitorInfo
	(*UpdateHostTestInfo)(nil),       // 12: UpdateHostTestInfo
	(*UpdateHostPatrolInfo)(nil),     // 13: UpdateHostPatrolInfo
	(*CloseHostTestInfo)(nil),        // 14: CloseHostTestInfo
	(*UpdateHostTestClose)(nil),      // 15: UpdateHostTestClose
	(*UpdateHostNet)(nil),            // 16: UpdateHostNet
	(*String)(nil),                   // 17: String
	(*RequestConnect)(nil),           // 18: RequestConnect
	(*StrategyInfo)(nil),             // 19: StrategyInfo
	(*ScriptInfo)(nil),               // 20: ScriptInfo
	(*FileSynOp)(nil),                // 21: FileSynOp
	(*LotusInfo)(nil),                // 22: LotusInfo
	(*RequestOp)(nil),                // 23: RequestOp
	(*MinerInfo)(nil),                // 24: MinerInfo
	(*ConnectInfo)(nil),              // 25: ConnectInfo
	(*BatchWorker)(nil),              // 26: batchWorker
	(*BatchStroage)(nil),             // 27: batchStroage
	(*RunStop)(nil),                  // 28: RunStop
	(*BoostInfo)(nil),                // 29: BoostInfo
	(*AddFileInfo)(nil),              // 30: AddFileInfo
	(*FileInfo)(nil),                 // 31: FileInfo
	(*SynFileInfo)(nil),              // 32: SynFileInfo
	(*DownLoadInfo)(nil),             // 33: DownLoadInfo
	(*WorkerConfig)(nil),             // 34: WorkerConfig
	(*FileManage)(nil),               // 35: FileManage
	(*TaskStatus)(nil),               // 36: TaskStatus
	(*WarnInfo)(nil),                 // 37: WarnInfo
	(*BadSectorId)(nil),              // 38: BadSectorId
	(*DirFileReq)(nil),               // 39: DirFileReq
	(*CarFile)(nil),                  // 40: CarFile
	(*SectorID)(nil),                 // 41: SectorID
	(*MinerRun)(nil),                 // 42: MinerRun
	(*FileNameInfo)(nil),             // 43: FileNameInfo
	(*JobPlatform)(nil),              // 44: JobPlatform
	(*C2SectorID)(nil),               // 45: C2SectorID
	(*OpHostUUID)(nil),               // 46: OpHostUUID
	(*HostTestInfo)(nil),             // 47: HostTestInfo
	(*SectorStatus)(nil),             // 48: SectorStatus
	(*SectorTicket)(nil),             // 49: SectorTicket
	(*SectorCommDR)(nil),             // 50: SectorCommDR
	(*SectorSeed)(nil),               // 51: SectorSeed
	(*SectorProof)(nil),              // 52: SectorProof
	(*SectorCID)(nil),                // 53: SectorCID
	(*HostPatrolInfo)(nil),           // 54: HostPatrolInfo
	(*CloseHostTest)(nil),            // 55: CloseHostTest
	(*RestartHostTest)(nil),          // 56: RestartHostTest
	(*OpHardwareInfo)(nil),           // 57: OpHardwareInfo
	(*Actor)(nil),                    // 58: Actor
	(*SectorPiece)(nil),              // 59: SectorPiece
	(*SectorLog)(nil),                // 60: SectorLog
	(*FilParam)(nil),                 // 61: FilParam
	(*OpTask)(nil),                   // 62: OpTask
	(*TaskQueue)(nil),                // 63: TaskQueue
	(*SectorQueueDetail)(nil),        // 64: SectorQueueDetail
	(*DealParam)(nil),                // 65: dealParam
	(*EditStatus)(nil),               // 66: EditStatus
	(*QueryParam)(nil),               // 67: QueryParam
	(*SectorActorID)(nil),            // 68: SectorActorID
	(*Colony)(nil),                   // 69: Colony
	(*ResetWorker)(nil),              // 70: resetWorker
	(*OpMiner)(nil),                  // 71: OpMiner
	(*OpScriptInfo)(nil),             // 72: OpScriptInfo
	(*DiskLetterReq)(nil),            // 73: DiskLetterReq
	(*OpLogInfoReq)(nil),             // 74: OpLogInfoReq
	(*DiskReMountReq)(nil),           // 75: DiskReMountReq
	(*Bool)(nil),                     // 76: Bool
	(*emptypb.Empty)(nil),            // 77: google.protobuf.Empty
	(*WorkerList)(nil),               // 78: WorkerList
	(*ResponseMsg)(nil),              // 79: ResponseMsg
	(*WalletList)(nil),               // 80: WalletList
	(*LotusHeightInfo)(nil),          // 81: LotusHeightInfo
	(*CarArray)(nil),                 // 82: CarArray
	(*CarInfo)(nil),                  // 83: CarInfo
	(*HostGroupArray)(nil),           // 84: HostGroupArray
	(*ActorWallet)(nil),              // 85: ActorWallet
	(*Wallet)(nil),                   // 86: Wallet
	(*TaskCount)(nil),                // 87: TaskCount
	(*TaskInfoList)(nil),             // 88: TaskInfoList
	(*LinkList)(nil),                 // 89: LinkList
	(*TaskQueues)(nil),               // 90: TaskQueues
	(*DealList)(nil),                 // 91: dealList
	(*AskInfo)(nil),                  // 92: AskInfo
	(*SchedDiagRequestInfo)(nil),     // 93: SchedDiagRequestInfo
	(*SectorPaths)(nil),              // 94: SectorPaths
	(*MinerSectors)(nil),             // 95: MinerSectors
	(*SectorCount)(nil),              // 96: sectorCount
	(*Power)(nil),                    // 97: Power
	(*HostRestartInfo)(nil),          // 98: HostRestartInfo
	(*MonitorInfo)(nil),              // 99: MonitorInfo
	(*OpScriptInfoResp)(nil),         // 100: OpScriptInfoResp
	(*OpMountDiskList)(nil),          // 101: OpMountDiskList
	(*OpLogInfoResp)(nil),            // 102: OpLogInfoResp
	(*OpLogLenResp)(nil),             // 103: OpLogLenResp
	(*NodeMinerInfoResp)(nil),        // 104: NodeMinerInfoResp
}
var file_service_proto_gateway_proto_depIdxs = []int32{
	1,   // 0: ResponseWorkerConfigList.configList:type_name -> ResponseWorkerConfig
	6,   // 1: ResponseTaskList.workerList:type_name -> WorkerTask
	6,   // 2: RequestWorkerList.workerList:type_name -> WorkerTask
	17,  // 3: GateService.GatewayFileExist:input_type -> String
	17,  // 4: GateService.OpOnline:input_type -> String
	18,  // 5: GateService.OpConnect:input_type -> RequestConnect
	17,  // 6: GateService.OpHeartbeat:input_type -> String
	17,  // 7: GateService.OplianHeartbeat:input_type -> String
	3,   // 8: GateService.GetWorkerList:input_type -> RequestMinerId
	19,  // 9: GateService.StrategyProcess:input_type -> StrategyInfo
	20,  // 10: GateService.ExecuteScript:input_type -> ScriptInfo
	20,  // 11: GateService.FileDistribution:input_type -> ScriptInfo
	21,  // 12: GateService.FileSynOpHost:input_type -> FileSynOp
	7,   // 13: GateService.DownloadSnapshot:input_type -> Downtown
	22,  // 14: GateService.AddLotus:input_type -> LotusInfo
	23,  // 15: GateService.GetWalletList:input_type -> RequestOp
	23,  // 16: GateService.GetRoomWalletList:input_type -> RequestOp
	24,  // 17: GateService.AddMiner:input_type -> MinerInfo
	25,  // 18: GateService.UpdateLotus:input_type -> ConnectInfo
	10,  // 19: GateService.AddHostRecord:input_type -> HostInfo
	25,  // 20: GateService.UpdateMiner:input_type -> ConnectInfo
	25,  // 21: GateService.UpdateWorker:input_type -> ConnectInfo
	25,  // 22: GateService.UpdateStorage:input_type -> ConnectInfo
	25,  // 23: GateService.UpdateBoost:input_type -> ConnectInfo
	26,  // 24: GateService.AddWorker:input_type -> batchWorker
	27,  // 25: GateService.AddStorage:input_type -> batchStroage
	28,  // 26: GateService.RunStopService:input_type -> RunStop
	29,  // 27: GateService.AddBoost:input_type -> BoostInfo
	30,  // 28: GateService.FileOpSynGateWay:input_type -> AddFileInfo
	31,  // 29: GateService.AddGateWayFile:input_type -> FileInfo
	32,  // 30: GateService.SysFilePoint:input_type -> SynFileInfo
	23,  // 31: GateService.ClearWorker:input_type -> RequestOp
	33,  // 32: GateService.DownLoadFiles:input_type -> DownLoadInfo
	11,  // 33: GateService.AddHostMonitorRecord:input_type -> HostMonitorInfo
	34,  // 34: GateService.SetWorkerTask:input_type -> WorkerConfig
	31,  // 35: GateService.DelGateWayFile:input_type -> FileInfo
	31,  // 36: GateService.DelOpFile:input_type -> FileInfo
	23,  // 37: GateService.LotusHeight:input_type -> RequestOp
	35,  // 38: GateService.ModifyFileStatus:input_type -> FileManage
	31,  // 39: GateService.CompleteCommit2:input_type -> FileInfo
	36,  // 40: GateService.ModifySectorStatus:input_type -> TaskStatus
	37,  // 41: GateService.AddWarn:input_type -> WarnInfo
	38,  // 42: GateService.AddBadSector:input_type -> BadSectorId
	30,  // 43: GateService.OpFileToGateWay:input_type -> AddFileInfo
	39,  // 44: GateService.CheckOpPath:input_type -> DirFileReq
	40,  // 45: GateService.CarFilePath:input_type -> CarFile
	17,  // 46: GateService.HostType:input_type -> String
	41,  // 47: GateService.CarFileList:input_type -> SectorID
	30,  // 48: GateService.ModifyOnlineFile:input_type -> AddFileInfo
	42,  // 49: GateService.RestartMiner:input_type -> MinerRun
	43,  // 50: GateService.GetFileName:input_type -> FileNameInfo
	44,  // 51: GateService.SetJobPlatformStop:input_type -> JobPlatform
	20,  // 52: GateService.ScriptStop:input_type -> ScriptInfo
	45,  // 53: GateService.C2FileSynStatus:input_type -> C2SectorID
	31,  // 54: GateService.C2FileSynLotus:input_type -> FileInfo
	17,  // 55: GateService.GetC2WorkerInfo:input_type -> String
	17,  // 56: GateService.GetGateWayFile:input_type -> String
	17,  // 57: GateService.RunOpC2:input_type -> String
	17,  // 58: GateService.StopOpC2:input_type -> String
	46,  // 59: GateService.WorkerMountNFS:input_type -> OpHostUUID
	17,  // 60: GateService.RedoC2Task:input_type -> String
	17,  // 61: GateService.CarFileParam:input_type -> String
	47,  // 62: GateService.OpInformationTest:input_type -> HostTestInfo
	48,  // 63: GateService.UpdateSectorStatus:input_type -> SectorStatus
	49,  // 64: GateService.AddSectorTicket:input_type -> SectorTicket
	50,  // 65: GateService.AddSectorCommDR:input_type -> SectorCommDR
	51,  // 66: GateService.AddSectorWaitSeed:input_type -> SectorSeed
	52,  // 67: GateService.AddSectorCommit2:input_type -> SectorProof
	53,  // 68: GateService.AddSectorPreCID:input_type -> SectorCID
	53,  // 69: GateService.AddSectorCommitCID:input_type -> SectorCID
	12,  // 70: GateService.UpdateHostTestRecord:input_type -> UpdateHostTestInfo
	54,  // 71: GateService.OpInformationPatrol:input_type -> HostPatrolInfo
	13,  // 72: GateService.UpdateHostPatrolRecord:input_type -> UpdateHostPatrolInfo
	55,  // 73: GateService.CloseOpInformationTest:input_type -> CloseHostTest
	56,  // 74: GateService.RestartAddHostTest:input_type -> RestartHostTest
	57,  // 75: GateService.GetOpHardwareInfo:input_type -> OpHardwareInfo
	41,  // 76: GateService.Commit2TaskResult:input_type -> SectorID
	46,  // 77: GateService.GetHostGroupArray:input_type -> OpHostUUID
	58,  // 78: GateService.CreateSectorTable:input_type -> Actor
	58,  // 79: GateService.CreateSectorPieceTable:input_type -> Actor
	58,  // 80: GateService.CreateSectorLogTable:input_type -> Actor
	58,  // 81: GateService.CreateSectorQueueDetailTable:input_type -> Actor
	59,  // 82: GateService.AddSectorPiece:input_type -> SectorPiece
	60,  // 83: GateService.AddSectorLog:input_type -> SectorLog
	17,  // 84: GateService.RedoSectorsTask:input_type -> String
	60,  // 85: GateService.UpdateSectorLog:input_type -> SectorLog
	61,  // 86: GateService.StateMinerInfo:input_type -> FilParam
	61,  // 87: GateService.StateAccountKey:input_type -> FilParam
	61,  // 88: GateService.WalletBalance:input_type -> FilParam
	62,  // 89: GateService.GetRunningCount:input_type -> OpTask
	62,  // 90: GateService.GetRunningList:input_type -> OpTask
	17,  // 91: GateService.GetStorageByActor:input_type -> String
	17,  // 92: GateService.GetActorTaskQueue:input_type -> String
	63,  // 93: GateService.AddCompleteCountByID:input_type -> TaskQueue
	63,  // 94: GateService.AddRunCountByID:input_type -> TaskQueue
	64,  // 95: GateService.AddSectorQueueDetail:input_type -> SectorQueueDetail
	65,  // 96: GateService.GetWaitImportDeal:input_type -> dealParam
	66,  // 97: GateService.EditQueueDetailStatus:input_type -> EditStatus
	16,  // 98: GateService.UpdateHostNetOccupyTime:input_type -> UpdateHostNet
	41,  // 99: GateService.AddC2Task:input_type -> SectorID
	41,  // 100: GateService.DelC2Task:input_type -> SectorID
	67,  // 101: GateService.QueryAsk:input_type -> QueryParam
	67,  // 102: GateService.QueryDataCap:input_type -> QueryParam
	46,  // 103: GateService.CheckOpIsOnline:input_type -> OpHostUUID
	61,  // 104: GateService.SealingSchedDiag:input_type -> FilParam
	68,  // 105: GateService.SectorStorage:input_type -> SectorActorID
	69,  // 106: GateService.AddColony:input_type -> Colony
	58,  // 107: GateService.GetColony:input_type -> Actor
	61,  // 108: GateService.StateMinerSectorCount:input_type -> FilParam
	70,  // 109: GateService.SealingAbort:input_type -> resetWorker
	41,  // 110: GateService.GetSectorStatus:input_type -> SectorID
	71,  // 111: GateService.opLocalSectors:input_type -> OpMiner
	61,  // 112: GateService.StateMinerPower:input_type -> FilParam
	23,  // 113: GateService.GetHostInfoByIPAndGatewayId:input_type -> RequestOp
	17,  // 114: GateService.GetHostTypeAndStatus:input_type -> String
	17,  // 115: GateService.CheckLotusHeart:input_type -> String
	17,  // 116: GateService.CheckMinerHeart:input_type -> String
	17,  // 117: GateService.CheckOWorkerHeart:input_type -> String
	57,  // 118: GateService.GetOpMonitorInfo:input_type -> OpHardwareInfo
	72,  // 119: GateService.GetOpScriptInfo:input_type -> OpScriptInfo
	73,  // 120: GateService.GetDiskLetter:input_type -> DiskLetterReq
	73,  // 121: GateService.GetOpMountInfo:input_type -> DiskLetterReq
	74,  // 122: GateService.GetOpLogInfo:input_type -> OpLogInfoReq
	74,  // 123: GateService.GetOpLogLen:input_type -> OpLogInfoReq
	57,  // 124: GateService.GetNodeMinerInfo:input_type -> OpHardwareInfo
	75,  // 125: GateService.DiskReMounting:input_type -> DiskReMountReq
	17,  // 126: GateService.GetMinerToken:input_type -> String
	76,  // 127: GateService.GatewayFileExist:output_type -> Bool
	76,  // 128: GateService.OpOnline:output_type -> Bool
	17,  // 129: GateService.OpConnect:output_type -> String
	77,  // 130: GateService.OpHeartbeat:output_type -> google.protobuf.Empty
	77,  // 131: GateService.OplianHeartbeat:output_type -> google.protobuf.Empty
	78,  // 132: GateService.GetWorkerList:output_type -> WorkerList
	79,  // 133: GateService.StrategyProcess:output_type -> ResponseMsg
	17,  // 134: GateService.ExecuteScript:output_type -> String
	17,  // 135: GateService.FileDistribution:output_type -> String
	17,  // 136: GateService.FileSynOpHost:output_type -> String
	8,   // 137: GateService.DownloadSnapshot:output_type -> DownloadInfo
	77,  // 138: GateService.AddLotus:output_type -> google.protobuf.Empty
	80,  // 139: GateService.GetWalletList:output_type -> WalletList
	80,  // 140: GateService.GetRoomWalletList:output_type -> WalletList
	79,  // 141: GateService.AddMiner:output_type -> ResponseMsg
	77,  // 142: GateService.UpdateLotus:output_type -> google.protobuf.Empty
	77,  // 143: GateService.AddHostRecord:output_type -> google.protobuf.Empty
	77,  // 144: GateService.UpdateMiner:output_type -> google.protobuf.Empty
	77,  // 145: GateService.UpdateWorker:output_type -> google.protobuf.Empty
	77,  // 146: GateService.UpdateStorage:output_type -> google.protobuf.Empty
	77,  // 147: GateService.UpdateBoost:output_type -> google.protobuf.Empty
	77,  // 148: GateService.AddWorker:output_type -> google.protobuf.Empty
	77,  // 149: GateService.AddStorage:output_type -> google.protobuf.Empty
	77,  // 150: GateService.RunStopService:output_type -> google.protobuf.Empty
	77,  // 151: GateService.AddBoost:output_type -> google.protobuf.Empty
	79,  // 152: GateService.FileOpSynGateWay:output_type -> ResponseMsg
	79,  // 153: GateService.AddGateWayFile:output_type -> ResponseMsg
	79,  // 154: GateService.SysFilePoint:output_type -> ResponseMsg
	79,  // 155: GateService.ClearWorker:output_type -> ResponseMsg
	79,  // 156: GateService.DownLoadFiles:output_type -> ResponseMsg
	77,  // 157: GateService.AddHostMonitorRecord:output_type -> google.protobuf.Empty
	79,  // 158: GateService.SetWorkerTask:output_type -> ResponseMsg
	79,  // 159: GateService.DelGateWayFile:output_type -> ResponseMsg
	79,  // 160: GateService.DelOpFile:output_type -> ResponseMsg
	81,  // 161: GateService.LotusHeight:output_type -> LotusHeightInfo
	79,  // 162: GateService.ModifyFileStatus:output_type -> ResponseMsg
	79,  // 163: GateService.CompleteCommit2:output_type -> ResponseMsg
	17,  // 164: GateService.ModifySectorStatus:output_type -> String
	79,  // 165: GateService.AddWarn:output_type -> ResponseMsg
	79,  // 166: GateService.AddBadSector:output_type -> ResponseMsg
	79,  // 167: GateService.OpFileToGateWay:output_type -> ResponseMsg
	79,  // 168: GateService.CheckOpPath:output_type -> ResponseMsg
	40,  // 169: GateService.CarFilePath:output_type -> CarFile
	17,  // 170: GateService.HostType:output_type -> String
	82,  // 171: GateService.CarFileList:output_type -> CarArray
	79,  // 172: GateService.ModifyOnlineFile:output_type -> ResponseMsg
	77,  // 173: GateService.RestartMiner:output_type -> google.protobuf.Empty
	17,  // 174: GateService.GetFileName:output_type -> String
	17,  // 175: GateService.SetJobPlatformStop:output_type -> String
	17,  // 176: GateService.ScriptStop:output_type -> String
	17,  // 177: GateService.C2FileSynStatus:output_type -> String
	17,  // 178: GateService.C2FileSynLotus:output_type -> String
	17,  // 179: GateService.GetC2WorkerInfo:output_type -> String
	17,  // 180: GateService.GetGateWayFile:output_type -> String
	17,  // 181: GateService.RunOpC2:output_type -> String
	17,  // 182: GateService.StopOpC2:output_type -> String
	77,  // 183: GateService.WorkerMountNFS:output_type -> google.protobuf.Empty
	17,  // 184: GateService.RedoC2Task:output_type -> String
	83,  // 185: GateService.CarFileParam:output_type -> CarInfo
	17,  // 186: GateService.OpInformationTest:output_type -> String
	79,  // 187: GateService.UpdateSectorStatus:output_type -> ResponseMsg
	79,  // 188: GateService.AddSectorTicket:output_type -> ResponseMsg
	79,  // 189: GateService.AddSectorCommDR:output_type -> ResponseMsg
	79,  // 190: GateService.AddSectorWaitSeed:output_type -> ResponseMsg
	79,  // 191: GateService.AddSectorCommit2:output_type -> ResponseMsg
	79,  // 192: GateService.AddSectorPreCID:output_type -> ResponseMsg
	79,  // 193: GateService.AddSectorCommitCID:output_type -> ResponseMsg
	77,  // 194: GateService.UpdateHostTestRecord:output_type -> google.protobuf.Empty
	17,  // 195: GateService.OpInformationPatrol:output_type -> String
	77,  // 196: GateService.UpdateHostPatrolRecord:output_type -> google.protobuf.Empty
	17,  // 197: GateService.CloseOpInformationTest:output_type -> String
	17,  // 198: GateService.RestartAddHostTest:output_type -> String
	17,  // 199: GateService.GetOpHardwareInfo:output_type -> String
	17,  // 200: GateService.Commit2TaskResult:output_type -> String
	84,  // 201: GateService.GetHostGroupArray:output_type -> HostGroupArray
	77,  // 202: GateService.CreateSectorTable:output_type -> google.protobuf.Empty
	77,  // 203: GateService.CreateSectorPieceTable:output_type -> google.protobuf.Empty
	77,  // 204: GateService.CreateSectorLogTable:output_type -> google.protobuf.Empty
	77,  // 205: GateService.CreateSectorQueueDetailTable:output_type -> google.protobuf.Empty
	79,  // 206: GateService.AddSectorPiece:output_type -> ResponseMsg
	79,  // 207: GateService.AddSectorLog:output_type -> ResponseMsg
	79,  // 208: GateService.RedoSectorsTask:output_type -> ResponseMsg
	79,  // 209: GateService.UpdateSectorLog:output_type -> ResponseMsg
	85,  // 210: GateService.StateMinerInfo:output_type -> ActorWallet
	17,  // 211: GateService.StateAccountKey:output_type -> String
	86,  // 212: GateService.WalletBalance:output_type -> Wallet
	87,  // 213: GateService.GetRunningCount:output_type -> TaskCount
	88,  // 214: GateService.GetRunningList:output_type -> TaskInfoList
	89,  // 215: GateService.GetStorageByActor:output_type -> LinkList
	90,  // 216: GateService.GetActorTaskQueue:output_type -> TaskQueues
	77,  // 217: GateService.AddCompleteCountByID:output_type -> google.protobuf.Empty
	77,  // 218: GateService.AddRunCountByID:output_type -> google.protobuf.Empty
	77,  // 219: GateService.AddSectorQueueDetail:output_type -> google.protobuf.Empty
	91,  // 220: GateService.GetWaitImportDeal:output_type -> dealList
	77,  // 221: GateService.EditQueueDetailStatus:output_type -> google.protobuf.Empty
	77,  // 222: GateService.UpdateHostNetOccupyTime:output_type -> google.protobuf.Empty
	17,  // 223: GateService.AddC2Task:output_type -> String
	17,  // 224: GateService.DelC2Task:output_type -> String
	92,  // 225: GateService.QueryAsk:output_type -> AskInfo
	17,  // 226: GateService.QueryDataCap:output_type -> String
	17,  // 227: GateService.CheckOpIsOnline:output_type -> String
	93,  // 228: GateService.SealingSchedDiag:output_type -> SchedDiagRequestInfo
	94,  // 229: GateService.SectorStorage:output_type -> SectorPaths
	69,  // 230: GateService.AddColony:output_type -> Colony
	69,  // 231: GateService.GetColony:output_type -> Colony
	95,  // 232: GateService.StateMinerSectorCount:output_type -> MinerSectors
	77,  // 233: GateService.SealingAbort:output_type -> google.protobuf.Empty
	48,  // 234: GateService.GetSectorStatus:output_type -> SectorStatus
	96,  // 235: GateService.opLocalSectors:output_type -> sectorCount
	97,  // 236: GateService.StateMinerPower:output_type -> Power
	46,  // 237: GateService.GetHostInfoByIPAndGatewayId:output_type -> OpHostUUID
	98,  // 238: GateService.GetHostTypeAndStatus:output_type -> HostRestartInfo
	17,  // 239: GateService.CheckLotusHeart:output_type -> String
	17,  // 240: GateService.CheckMinerHeart:output_type -> String
	17,  // 241: GateService.CheckOWorkerHeart:output_type -> String
	99,  // 242: GateService.GetOpMonitorInfo:output_type -> MonitorInfo
	100, // 243: GateService.GetOpScriptInfo:output_type -> OpScriptInfoResp
	100, // 244: GateService.GetDiskLetter:output_type -> OpScriptInfoResp
	101, // 245: GateService.GetOpMountInfo:output_type -> OpMountDiskList
	102, // 246: GateService.GetOpLogInfo:output_type -> OpLogInfoResp
	103, // 247: GateService.GetOpLogLen:output_type -> OpLogLenResp
	104, // 248: GateService.GetNodeMinerInfo:output_type -> NodeMinerInfoResp
	17,  // 249: GateService.DiskReMounting:output_type -> String
	17,  // 250: GateService.GetMinerToken:output_type -> String
	127, // [127:251] is the sub-list for method output_type
	3,   // [3:127] is the sub-list for method input_type
	3,   // [3:3] is the sub-list for extension type_name
	3,   // [3:3] is the sub-list for extension extendee
	0,   // [0:3] is the sub-list for field type_name
}

func init() { file_service_proto_gateway_proto_init() }
func file_service_proto_gateway_proto_init() {
	if File_service_proto_gateway_proto != nil {
		return
	}
	file_service_proto_header_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_proto_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWorkerConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWorkerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMinerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWorkerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWorkerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Downtown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostMonitorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostPatrolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseHostTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostTestClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_gateway_proto_goTypes,
		DependencyIndexes: file_service_proto_gateway_proto_depIdxs,
		MessageInfos:      file_service_proto_gateway_proto_msgTypes,
	}.Build()
	File_service_proto_gateway_proto = out.File
	file_service_proto_gateway_proto_rawDesc = nil
	file_service_proto_gateway_proto_goTypes = nil
	file_service_proto_gateway_proto_depIdxs = nil
}
