// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: service/proto/op.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpServiceClient is the client API for OpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpServiceClient interface {
	OpC2Connect(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Heartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	OpC2Heartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	WorkerTaksRunList(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskList, error)
	Ok(ctx context.Context, in *Task, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	OkNew(ctx context.Context, in *MinerSize, opts ...grpc.CallOption) (*TaskCan, error)
	AddRunning(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ResponseMsg, error)
	SubRunning(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ResponseMsg, error)
	ResetWorkerRunning(ctx context.Context, in *WorkerTasks, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetPreNumber(ctx context.Context, in *PreNumber, opts ...grpc.CallOption) (*ResponseMsg, error)
	GetSystemInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	StrategyProcess(ctx context.Context, in *StrategyInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	ExecuteScript(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error)
	FileDistribution(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*String, error)
	//  rpc WorkerInfoList (String) returns (WorkerList);
	RunNewLotus(ctx context.Context, in *LotusInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//rpc RunService (LotusRun) returns (ResponseMsg);
	GetWalletList(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (*WalletList, error)
	RunNewMiner(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunMiner(ctx context.Context, in *MinerRun, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//  rpc UpdateLotus (ConnectInfo) returns (ResponseMsg);
	//  rpc UpdateMiner (ConnectInfo) returns (ResponseMsg);
	RunBoost(ctx context.Context, in *BoostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunNewWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunWorker(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateWorker(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	RunNewStorage(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddNodeStorage(ctx context.Context, in *StorageInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunAndStopService(ctx context.Context, in *RunStopType, opts ...grpc.CallOption) (*ResponseMsg, error)
	FileOpSynGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	SysFileFrom(ctx context.Context, in *SynFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	ClearWorker(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*ResponseMsg, error)
	DownLoadFiles(ctx context.Context, in *DownLoadInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	UnZipSynFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	LotusHeight(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*LotusHeightInfo, error)
	DelOpFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	DelGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	CreateOpFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	GetOpC2Client(ctx context.Context, in *OpC2Client, opts ...grpc.CallOption) (*OpC2Client, error)
	CompleteCommit2(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	GetOpFilePath(ctx context.Context, in *OpFilePath, opts ...grpc.CallOption) (*String, error)
	AddWarn(ctx context.Context, in *WarnInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddBadSector(ctx context.Context, in *BadSectorId, opts ...grpc.CallOption) (*ResponseMsg, error)
	OpFileToGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error)
	CheckOpPath(ctx context.Context, in *DirFileReq, opts ...grpc.CallOption) (*ResponseMsg, error)
	CarFilePath(ctx context.Context, in *CarFile, opts ...grpc.CallOption) (*CarFile, error)
	ScriptStop(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error)
	Commit2TaskResult(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error)
	C2FileSynStatus(ctx context.Context, in *C2SectorID, opts ...grpc.CallOption) (*String, error)
	C2FileSynLotus(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*String, error)
	GetGateWayFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	RunOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	StopOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	RedoC2Task(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	//task
	OpInformationTest(ctx context.Context, in *HostTestInfo, opts ...grpc.CallOption) (*String, error)
	UpdateSectorStatus(ctx context.Context, in *SectorStatus, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorTicket(ctx context.Context, in *SectorTicket, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorCommDR(ctx context.Context, in *SectorCommDR, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorWaitSeed(ctx context.Context, in *SectorSeed, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorCommit2(ctx context.Context, in *SectorProof, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorPreCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorCommitCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error)
	OpInformationPatrol(ctx context.Context, in *HostPatrolInfo, opts ...grpc.CallOption) (*String, error)
	CloseOpInformationTest(ctx context.Context, in *CloseHostTest, opts ...grpc.CallOption) (*String, error)
	OpInformationTestRestart(ctx context.Context, in *RestartHostTest, opts ...grpc.CallOption) (*String, error)
	GetOpHardwareInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*String, error)
	Commit2TaskRun(ctx context.Context, in *SealerParam, opts ...grpc.CallOption) (*ResponseMsg, error)
	GetRunningCount(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskCount, error)
	GetRunningList(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskInfoList, error)
	AddSectorPiece(ctx context.Context, in *SectorPiece, opts ...grpc.CallOption) (*ResponseMsg, error)
	AddSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error)
	RedoSectorsTask(ctx context.Context, in *SectorsTask, opts ...grpc.CallOption) (*ResponseMsg, error)
	UpdateSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error)
	OpServerPortControl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetStorageByActor(ctx context.Context, in *String, opts ...grpc.CallOption) (*LinkList, error)
	CloseOpServerPortControl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	EditMinerApCount(ctx context.Context, in *PledgeParam, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OpCheckBadSector(ctx context.Context, in *HostCheckDiskInfo, opts ...grpc.CallOption) (*String, error)
	AddC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error)
	DelC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error)
	KillBenchAndScript(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	AcquireSector(ctx context.Context, in *SectorRef, opts ...grpc.CallOption) (*SectorPath, error)
	GetColony(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*Colony, error)
	NodeMountDisk(ctx context.Context, in *MountDiskInfo, opts ...grpc.CallOption) (*String, error)
	SealingAbort(ctx context.Context, in *FilRestWorker, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LocalSectors(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*SectorList, error)
	NodeAddShareDir(ctx context.Context, in *MountDiskInfo, opts ...grpc.CallOption) (*String, error)
	OpReplacePlugFile(ctx context.Context, in *OpReplaceFileInfo, opts ...grpc.CallOption) (*String, error)
	OpReplacePlugFile1(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	CheckLotusHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetOpMonitorInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*MonitorInfo, error)
	GetOpScriptInfo(ctx context.Context, in *OpScriptInfo, opts ...grpc.CallOption) (*OpScriptInfoResp, error)
	GetDiskLetter(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpScriptInfoResp, error)
	GetOpMountInfo(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpMountDiskList, error)
	GetOpLogInfo(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogInfoResp, error)
	GetOpLogLen(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogLenResp, error)
	GetNodeMinerInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*NodeMinerInfoResp, error)
	UninstallMountDisk(ctx context.Context, in *MountDiskInfo, opts ...grpc.CallOption) (*String, error)
}

type opServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpServiceClient(cc grpc.ClientConnInterface) OpServiceClient {
	return &opServiceClient{cc}
}

func (c *opServiceClient) OpC2Connect(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/OpC2Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) Heartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpC2Heartbeat(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpC2Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) WorkerTaksRunList(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/OpService/WorkerTaksRunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) Ok(ctx context.Context, in *Task, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/OpService/Ok", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OkNew(ctx context.Context, in *MinerSize, opts ...grpc.CallOption) (*TaskCan, error) {
	out := new(TaskCan)
	err := c.cc.Invoke(ctx, "/OpService/OkNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddRunning(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) SubRunning(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/SubRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) ResetWorkerRunning(ctx context.Context, in *WorkerTasks, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/ResetWorkerRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) SetPreNumber(ctx context.Context, in *PreNumber, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/SetPreNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetSystemInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) StrategyProcess(ctx context.Context, in *StrategyInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/StrategyProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) ExecuteScript(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/ExecuteScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) FileDistribution(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/FileDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunNewLotus(ctx context.Context, in *LotusInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/RunNewLotus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetWalletList(ctx context.Context, in *RequestConnect, opts ...grpc.CallOption) (*WalletList, error) {
	out := new(WalletList)
	err := c.cc.Invoke(ctx, "/OpService/GetWalletList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunNewMiner(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/RunNewMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunMiner(ctx context.Context, in *MinerRun, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/RunMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunBoost(ctx context.Context, in *BoostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/RunBoost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunNewWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/RunNewWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunWorker(ctx context.Context, in *FilParam, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/RunWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) UpdateWorker(ctx context.Context, in *ConnectInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/UpdateWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunNewStorage(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/RunNewStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddNodeStorage(ctx context.Context, in *StorageInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/AddNodeStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunAndStopService(ctx context.Context, in *RunStopType, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/RunAndStopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) FileOpSynGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/FileOpSynGateWay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) SysFileFrom(ctx context.Context, in *SynFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/SysFileFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) ClearWorker(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/ClearWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) DownLoadFiles(ctx context.Context, in *DownLoadInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/DownLoadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) UnZipSynFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/UnZipSynFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) LotusHeight(ctx context.Context, in *RequestOp, opts ...grpc.CallOption) (*LotusHeightInfo, error) {
	out := new(LotusHeightInfo)
	err := c.cc.Invoke(ctx, "/OpService/LotusHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) DelOpFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/DelOpFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) DelGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/DelGateWayFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) CreateOpFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/CreateOpFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpC2Client(ctx context.Context, in *OpC2Client, opts ...grpc.CallOption) (*OpC2Client, error) {
	out := new(OpC2Client)
	err := c.cc.Invoke(ctx, "/OpService/GetOpC2Client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) CompleteCommit2(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/CompleteCommit2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddGateWayFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddGateWayFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpFilePath(ctx context.Context, in *OpFilePath, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/GetOpFilePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddWarn(ctx context.Context, in *WarnInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddBadSector(ctx context.Context, in *BadSectorId, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddBadSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpFileToGateWay(ctx context.Context, in *AddFileInfo, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/OpFileToGateWay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) CheckOpPath(ctx context.Context, in *DirFileReq, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/CheckOpPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) CarFilePath(ctx context.Context, in *CarFile, opts ...grpc.CallOption) (*CarFile, error) {
	out := new(CarFile)
	err := c.cc.Invoke(ctx, "/OpService/CarFilePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) ScriptStop(ctx context.Context, in *ScriptInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/ScriptStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) Commit2TaskResult(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/Commit2TaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) C2FileSynStatus(ctx context.Context, in *C2SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/C2FileSynStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) C2FileSynLotus(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/C2FileSynLotus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetGateWayFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/GetGateWayFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RunOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/RunOpC2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) StopOpC2(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/StopOpC2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RedoC2Task(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/RedoC2Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpInformationTest(ctx context.Context, in *HostTestInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpInformationTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) UpdateSectorStatus(ctx context.Context, in *SectorStatus, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/UpdateSectorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorTicket(ctx context.Context, in *SectorTicket, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorCommDR(ctx context.Context, in *SectorCommDR, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorCommDR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorWaitSeed(ctx context.Context, in *SectorSeed, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorWaitSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorCommit2(ctx context.Context, in *SectorProof, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorCommit2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorPreCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorPreCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorCommitCID(ctx context.Context, in *SectorCID, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorCommitCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpInformationPatrol(ctx context.Context, in *HostPatrolInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpInformationPatrol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) CloseOpInformationTest(ctx context.Context, in *CloseHostTest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/CloseOpInformationTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpInformationTestRestart(ctx context.Context, in *RestartHostTest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpInformationTestRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpHardwareInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/GetOpHardwareInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) Commit2TaskRun(ctx context.Context, in *SealerParam, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/Commit2TaskRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetRunningCount(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskCount, error) {
	out := new(TaskCount)
	err := c.cc.Invoke(ctx, "/OpService/GetRunningCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetRunningList(ctx context.Context, in *String, opts ...grpc.CallOption) (*TaskInfoList, error) {
	out := new(TaskInfoList)
	err := c.cc.Invoke(ctx, "/OpService/GetRunningList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorPiece(ctx context.Context, in *SectorPiece, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/AddSectorLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) RedoSectorsTask(ctx context.Context, in *SectorsTask, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/RedoSectorsTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) UpdateSectorLog(ctx context.Context, in *SectorLog, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/OpService/UpdateSectorLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpServerPortControl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpServerPortControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetStorageByActor(ctx context.Context, in *String, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := c.cc.Invoke(ctx, "/OpService/GetStorageByActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) CloseOpServerPortControl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/CloseOpServerPortControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) EditMinerApCount(ctx context.Context, in *PledgeParam, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/EditMinerApCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpCheckBadSector(ctx context.Context, in *HostCheckDiskInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpCheckBadSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AddC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/AddC2Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) DelC2Task(ctx context.Context, in *SectorID, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/DelC2Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) KillBenchAndScript(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/KillBenchAndScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) AcquireSector(ctx context.Context, in *SectorRef, opts ...grpc.CallOption) (*SectorPath, error) {
	out := new(SectorPath)
	err := c.cc.Invoke(ctx, "/OpService/AcquireSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetColony(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*Colony, error) {
	out := new(Colony)
	err := c.cc.Invoke(ctx, "/OpService/GetColony", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) NodeMountDisk(ctx context.Context, in *MountDiskInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/NodeMountDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) SealingAbort(ctx context.Context, in *FilRestWorker, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OpService/SealingAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) LocalSectors(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*SectorList, error) {
	out := new(SectorList)
	err := c.cc.Invoke(ctx, "/OpService/localSectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) NodeAddShareDir(ctx context.Context, in *MountDiskInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/NodeAddShareDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpReplacePlugFile(ctx context.Context, in *OpReplaceFileInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpReplacePlugFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) OpReplacePlugFile1(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/OpReplacePlugFile1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) CheckLotusHeart(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/CheckLotusHeart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpMonitorInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*MonitorInfo, error) {
	out := new(MonitorInfo)
	err := c.cc.Invoke(ctx, "/OpService/GetOpMonitorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpScriptInfo(ctx context.Context, in *OpScriptInfo, opts ...grpc.CallOption) (*OpScriptInfoResp, error) {
	out := new(OpScriptInfoResp)
	err := c.cc.Invoke(ctx, "/OpService/GetOpScriptInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetDiskLetter(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpScriptInfoResp, error) {
	out := new(OpScriptInfoResp)
	err := c.cc.Invoke(ctx, "/OpService/GetDiskLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpMountInfo(ctx context.Context, in *DiskLetterReq, opts ...grpc.CallOption) (*OpMountDiskList, error) {
	out := new(OpMountDiskList)
	err := c.cc.Invoke(ctx, "/OpService/GetOpMountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpLogInfo(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogInfoResp, error) {
	out := new(OpLogInfoResp)
	err := c.cc.Invoke(ctx, "/OpService/GetOpLogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetOpLogLen(ctx context.Context, in *OpLogInfoReq, opts ...grpc.CallOption) (*OpLogLenResp, error) {
	out := new(OpLogLenResp)
	err := c.cc.Invoke(ctx, "/OpService/GetOpLogLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) GetNodeMinerInfo(ctx context.Context, in *OpHardwareInfo, opts ...grpc.CallOption) (*NodeMinerInfoResp, error) {
	out := new(NodeMinerInfoResp)
	err := c.cc.Invoke(ctx, "/OpService/GetNodeMinerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opServiceClient) UninstallMountDisk(ctx context.Context, in *MountDiskInfo, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/OpService/UninstallMountDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpServiceServer is the server API for OpService service.
// All implementations should embed UnimplementedOpServiceServer
// for forward compatibility
type OpServiceServer interface {
	OpC2Connect(context.Context, *RequestConnect) (*emptypb.Empty, error)
	Heartbeat(context.Context, *String) (*String, error)
	OpC2Heartbeat(context.Context, *String) (*String, error)
	WorkerTaksRunList(context.Context, *String) (*TaskList, error)
	Ok(context.Context, *Task) (*wrapperspb.BoolValue, error)
	OkNew(context.Context, *MinerSize) (*TaskCan, error)
	AddRunning(context.Context, *Task) (*ResponseMsg, error)
	SubRunning(context.Context, *Task) (*ResponseMsg, error)
	ResetWorkerRunning(context.Context, *WorkerTasks) (*emptypb.Empty, error)
	SetPreNumber(context.Context, *PreNumber) (*ResponseMsg, error)
	GetSystemInfo(context.Context, *String) (*String, error)
	StrategyProcess(context.Context, *StrategyInfo) (*ResponseMsg, error)
	ExecuteScript(context.Context, *ScriptInfo) (*String, error)
	FileDistribution(context.Context, *FileInfo) (*String, error)
	//  rpc WorkerInfoList (String) returns (WorkerList);
	RunNewLotus(context.Context, *LotusInfo) (*emptypb.Empty, error)
	//rpc RunService (LotusRun) returns (ResponseMsg);
	GetWalletList(context.Context, *RequestConnect) (*WalletList, error)
	RunNewMiner(context.Context, *MinerInfo) (*emptypb.Empty, error)
	RunMiner(context.Context, *MinerRun) (*emptypb.Empty, error)
	//  rpc UpdateLotus (ConnectInfo) returns (ResponseMsg);
	//  rpc UpdateMiner (ConnectInfo) returns (ResponseMsg);
	RunBoost(context.Context, *BoostInfo) (*emptypb.Empty, error)
	RunNewWorker(context.Context, *WorkerInfo) (*emptypb.Empty, error)
	RunWorker(context.Context, *FilParam) (*emptypb.Empty, error)
	UpdateWorker(context.Context, *ConnectInfo) (*ResponseMsg, error)
	RunNewStorage(context.Context, *WorkerInfo) (*emptypb.Empty, error)
	AddNodeStorage(context.Context, *StorageInfo) (*emptypb.Empty, error)
	RunAndStopService(context.Context, *RunStopType) (*ResponseMsg, error)
	FileOpSynGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error)
	SysFileFrom(context.Context, *SynFileInfo) (*ResponseMsg, error)
	ClearWorker(context.Context, *RequestOp) (*ResponseMsg, error)
	DownLoadFiles(context.Context, *DownLoadInfo) (*ResponseMsg, error)
	UnZipSynFile(context.Context, *FileInfo) (*ResponseMsg, error)
	LotusHeight(context.Context, *RequestOp) (*LotusHeightInfo, error)
	DelOpFile(context.Context, *FileInfo) (*ResponseMsg, error)
	DelGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error)
	CreateOpFile(context.Context, *FileInfo) (*ResponseMsg, error)
	GetOpC2Client(context.Context, *OpC2Client) (*OpC2Client, error)
	CompleteCommit2(context.Context, *FileInfo) (*ResponseMsg, error)
	AddGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error)
	GetOpFilePath(context.Context, *OpFilePath) (*String, error)
	AddWarn(context.Context, *WarnInfo) (*ResponseMsg, error)
	AddBadSector(context.Context, *BadSectorId) (*ResponseMsg, error)
	OpFileToGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error)
	CheckOpPath(context.Context, *DirFileReq) (*ResponseMsg, error)
	CarFilePath(context.Context, *CarFile) (*CarFile, error)
	ScriptStop(context.Context, *ScriptInfo) (*String, error)
	Commit2TaskResult(context.Context, *SectorID) (*String, error)
	C2FileSynStatus(context.Context, *C2SectorID) (*String, error)
	C2FileSynLotus(context.Context, *FileInfo) (*String, error)
	GetGateWayFile(context.Context, *String) (*String, error)
	RunOpC2(context.Context, *String) (*String, error)
	StopOpC2(context.Context, *String) (*String, error)
	RedoC2Task(context.Context, *String) (*String, error)
	//task
	OpInformationTest(context.Context, *HostTestInfo) (*String, error)
	UpdateSectorStatus(context.Context, *SectorStatus) (*ResponseMsg, error)
	AddSectorTicket(context.Context, *SectorTicket) (*ResponseMsg, error)
	AddSectorCommDR(context.Context, *SectorCommDR) (*ResponseMsg, error)
	AddSectorWaitSeed(context.Context, *SectorSeed) (*ResponseMsg, error)
	AddSectorCommit2(context.Context, *SectorProof) (*ResponseMsg, error)
	AddSectorPreCID(context.Context, *SectorCID) (*ResponseMsg, error)
	AddSectorCommitCID(context.Context, *SectorCID) (*ResponseMsg, error)
	OpInformationPatrol(context.Context, *HostPatrolInfo) (*String, error)
	CloseOpInformationTest(context.Context, *CloseHostTest) (*String, error)
	OpInformationTestRestart(context.Context, *RestartHostTest) (*String, error)
	GetOpHardwareInfo(context.Context, *OpHardwareInfo) (*String, error)
	Commit2TaskRun(context.Context, *SealerParam) (*ResponseMsg, error)
	GetRunningCount(context.Context, *String) (*TaskCount, error)
	GetRunningList(context.Context, *String) (*TaskInfoList, error)
	AddSectorPiece(context.Context, *SectorPiece) (*ResponseMsg, error)
	AddSectorLog(context.Context, *SectorLog) (*ResponseMsg, error)
	RedoSectorsTask(context.Context, *SectorsTask) (*ResponseMsg, error)
	UpdateSectorLog(context.Context, *SectorLog) (*ResponseMsg, error)
	OpServerPortControl(context.Context, *String) (*String, error)
	GetStorageByActor(context.Context, *String) (*LinkList, error)
	CloseOpServerPortControl(context.Context, *String) (*String, error)
	EditMinerApCount(context.Context, *PledgeParam) (*emptypb.Empty, error)
	OpCheckBadSector(context.Context, *HostCheckDiskInfo) (*String, error)
	AddC2Task(context.Context, *SectorID) (*String, error)
	DelC2Task(context.Context, *SectorID) (*String, error)
	KillBenchAndScript(context.Context, *String) (*String, error)
	AcquireSector(context.Context, *SectorRef) (*SectorPath, error)
	GetColony(context.Context, *Actor) (*Colony, error)
	NodeMountDisk(context.Context, *MountDiskInfo) (*String, error)
	SealingAbort(context.Context, *FilRestWorker) (*emptypb.Empty, error)
	LocalSectors(context.Context, *Actor) (*SectorList, error)
	NodeAddShareDir(context.Context, *MountDiskInfo) (*String, error)
	OpReplacePlugFile(context.Context, *OpReplaceFileInfo) (*String, error)
	OpReplacePlugFile1(context.Context, *String) (*String, error)
	CheckLotusHeart(context.Context, *String) (*String, error)
	GetOpMonitorInfo(context.Context, *OpHardwareInfo) (*MonitorInfo, error)
	GetOpScriptInfo(context.Context, *OpScriptInfo) (*OpScriptInfoResp, error)
	GetDiskLetter(context.Context, *DiskLetterReq) (*OpScriptInfoResp, error)
	GetOpMountInfo(context.Context, *DiskLetterReq) (*OpMountDiskList, error)
	GetOpLogInfo(context.Context, *OpLogInfoReq) (*OpLogInfoResp, error)
	GetOpLogLen(context.Context, *OpLogInfoReq) (*OpLogLenResp, error)
	GetNodeMinerInfo(context.Context, *OpHardwareInfo) (*NodeMinerInfoResp, error)
	UninstallMountDisk(context.Context, *MountDiskInfo) (*String, error)
}

// UnimplementedOpServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOpServiceServer struct {
}

func (UnimplementedOpServiceServer) OpC2Connect(context.Context, *RequestConnect) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpC2Connect not implemented")
}
func (UnimplementedOpServiceServer) Heartbeat(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedOpServiceServer) OpC2Heartbeat(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpC2Heartbeat not implemented")
}
func (UnimplementedOpServiceServer) WorkerTaksRunList(context.Context, *String) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerTaksRunList not implemented")
}
func (UnimplementedOpServiceServer) Ok(context.Context, *Task) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ok not implemented")
}
func (UnimplementedOpServiceServer) OkNew(context.Context, *MinerSize) (*TaskCan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OkNew not implemented")
}
func (UnimplementedOpServiceServer) AddRunning(context.Context, *Task) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRunning not implemented")
}
func (UnimplementedOpServiceServer) SubRunning(context.Context, *Task) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubRunning not implemented")
}
func (UnimplementedOpServiceServer) ResetWorkerRunning(context.Context, *WorkerTasks) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetWorkerRunning not implemented")
}
func (UnimplementedOpServiceServer) SetPreNumber(context.Context, *PreNumber) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreNumber not implemented")
}
func (UnimplementedOpServiceServer) GetSystemInfo(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedOpServiceServer) StrategyProcess(context.Context, *StrategyInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrategyProcess not implemented")
}
func (UnimplementedOpServiceServer) ExecuteScript(context.Context, *ScriptInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScript not implemented")
}
func (UnimplementedOpServiceServer) FileDistribution(context.Context, *FileInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDistribution not implemented")
}
func (UnimplementedOpServiceServer) RunNewLotus(context.Context, *LotusInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNewLotus not implemented")
}
func (UnimplementedOpServiceServer) GetWalletList(context.Context, *RequestConnect) (*WalletList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletList not implemented")
}
func (UnimplementedOpServiceServer) RunNewMiner(context.Context, *MinerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNewMiner not implemented")
}
func (UnimplementedOpServiceServer) RunMiner(context.Context, *MinerRun) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMiner not implemented")
}
func (UnimplementedOpServiceServer) RunBoost(context.Context, *BoostInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunBoost not implemented")
}
func (UnimplementedOpServiceServer) RunNewWorker(context.Context, *WorkerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNewWorker not implemented")
}
func (UnimplementedOpServiceServer) RunWorker(context.Context, *FilParam) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorker not implemented")
}
func (UnimplementedOpServiceServer) UpdateWorker(context.Context, *ConnectInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorker not implemented")
}
func (UnimplementedOpServiceServer) RunNewStorage(context.Context, *WorkerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNewStorage not implemented")
}
func (UnimplementedOpServiceServer) AddNodeStorage(context.Context, *StorageInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeStorage not implemented")
}
func (UnimplementedOpServiceServer) RunAndStopService(context.Context, *RunStopType) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAndStopService not implemented")
}
func (UnimplementedOpServiceServer) FileOpSynGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileOpSynGateWay not implemented")
}
func (UnimplementedOpServiceServer) SysFileFrom(context.Context, *SynFileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysFileFrom not implemented")
}
func (UnimplementedOpServiceServer) ClearWorker(context.Context, *RequestOp) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearWorker not implemented")
}
func (UnimplementedOpServiceServer) DownLoadFiles(context.Context, *DownLoadInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLoadFiles not implemented")
}
func (UnimplementedOpServiceServer) UnZipSynFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnZipSynFile not implemented")
}
func (UnimplementedOpServiceServer) LotusHeight(context.Context, *RequestOp) (*LotusHeightInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotusHeight not implemented")
}
func (UnimplementedOpServiceServer) DelOpFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOpFile not implemented")
}
func (UnimplementedOpServiceServer) DelGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGateWayFile not implemented")
}
func (UnimplementedOpServiceServer) CreateOpFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpFile not implemented")
}
func (UnimplementedOpServiceServer) GetOpC2Client(context.Context, *OpC2Client) (*OpC2Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpC2Client not implemented")
}
func (UnimplementedOpServiceServer) CompleteCommit2(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteCommit2 not implemented")
}
func (UnimplementedOpServiceServer) AddGateWayFile(context.Context, *FileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGateWayFile not implemented")
}
func (UnimplementedOpServiceServer) GetOpFilePath(context.Context, *OpFilePath) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpFilePath not implemented")
}
func (UnimplementedOpServiceServer) AddWarn(context.Context, *WarnInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWarn not implemented")
}
func (UnimplementedOpServiceServer) AddBadSector(context.Context, *BadSectorId) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBadSector not implemented")
}
func (UnimplementedOpServiceServer) OpFileToGateWay(context.Context, *AddFileInfo) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpFileToGateWay not implemented")
}
func (UnimplementedOpServiceServer) CheckOpPath(context.Context, *DirFileReq) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOpPath not implemented")
}
func (UnimplementedOpServiceServer) CarFilePath(context.Context, *CarFile) (*CarFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarFilePath not implemented")
}
func (UnimplementedOpServiceServer) ScriptStop(context.Context, *ScriptInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptStop not implemented")
}
func (UnimplementedOpServiceServer) Commit2TaskResult(context.Context, *SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit2TaskResult not implemented")
}
func (UnimplementedOpServiceServer) C2FileSynStatus(context.Context, *C2SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2FileSynStatus not implemented")
}
func (UnimplementedOpServiceServer) C2FileSynLotus(context.Context, *FileInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2FileSynLotus not implemented")
}
func (UnimplementedOpServiceServer) GetGateWayFile(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateWayFile not implemented")
}
func (UnimplementedOpServiceServer) RunOpC2(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunOpC2 not implemented")
}
func (UnimplementedOpServiceServer) StopOpC2(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOpC2 not implemented")
}
func (UnimplementedOpServiceServer) RedoC2Task(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedoC2Task not implemented")
}
func (UnimplementedOpServiceServer) OpInformationTest(context.Context, *HostTestInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpInformationTest not implemented")
}
func (UnimplementedOpServiceServer) UpdateSectorStatus(context.Context, *SectorStatus) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSectorStatus not implemented")
}
func (UnimplementedOpServiceServer) AddSectorTicket(context.Context, *SectorTicket) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorTicket not implemented")
}
func (UnimplementedOpServiceServer) AddSectorCommDR(context.Context, *SectorCommDR) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorCommDR not implemented")
}
func (UnimplementedOpServiceServer) AddSectorWaitSeed(context.Context, *SectorSeed) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorWaitSeed not implemented")
}
func (UnimplementedOpServiceServer) AddSectorCommit2(context.Context, *SectorProof) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorCommit2 not implemented")
}
func (UnimplementedOpServiceServer) AddSectorPreCID(context.Context, *SectorCID) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorPreCID not implemented")
}
func (UnimplementedOpServiceServer) AddSectorCommitCID(context.Context, *SectorCID) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorCommitCID not implemented")
}
func (UnimplementedOpServiceServer) OpInformationPatrol(context.Context, *HostPatrolInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpInformationPatrol not implemented")
}
func (UnimplementedOpServiceServer) CloseOpInformationTest(context.Context, *CloseHostTest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOpInformationTest not implemented")
}
func (UnimplementedOpServiceServer) OpInformationTestRestart(context.Context, *RestartHostTest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpInformationTestRestart not implemented")
}
func (UnimplementedOpServiceServer) GetOpHardwareInfo(context.Context, *OpHardwareInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpHardwareInfo not implemented")
}
func (UnimplementedOpServiceServer) Commit2TaskRun(context.Context, *SealerParam) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit2TaskRun not implemented")
}
func (UnimplementedOpServiceServer) GetRunningCount(context.Context, *String) (*TaskCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningCount not implemented")
}
func (UnimplementedOpServiceServer) GetRunningList(context.Context, *String) (*TaskInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningList not implemented")
}
func (UnimplementedOpServiceServer) AddSectorPiece(context.Context, *SectorPiece) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorPiece not implemented")
}
func (UnimplementedOpServiceServer) AddSectorLog(context.Context, *SectorLog) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSectorLog not implemented")
}
func (UnimplementedOpServiceServer) RedoSectorsTask(context.Context, *SectorsTask) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedoSectorsTask not implemented")
}
func (UnimplementedOpServiceServer) UpdateSectorLog(context.Context, *SectorLog) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSectorLog not implemented")
}
func (UnimplementedOpServiceServer) OpServerPortControl(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpServerPortControl not implemented")
}
func (UnimplementedOpServiceServer) GetStorageByActor(context.Context, *String) (*LinkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageByActor not implemented")
}
func (UnimplementedOpServiceServer) CloseOpServerPortControl(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOpServerPortControl not implemented")
}
func (UnimplementedOpServiceServer) EditMinerApCount(context.Context, *PledgeParam) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMinerApCount not implemented")
}
func (UnimplementedOpServiceServer) OpCheckBadSector(context.Context, *HostCheckDiskInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpCheckBadSector not implemented")
}
func (UnimplementedOpServiceServer) AddC2Task(context.Context, *SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddC2Task not implemented")
}
func (UnimplementedOpServiceServer) DelC2Task(context.Context, *SectorID) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelC2Task not implemented")
}
func (UnimplementedOpServiceServer) KillBenchAndScript(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillBenchAndScript not implemented")
}
func (UnimplementedOpServiceServer) AcquireSector(context.Context, *SectorRef) (*SectorPath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireSector not implemented")
}
func (UnimplementedOpServiceServer) GetColony(context.Context, *Actor) (*Colony, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColony not implemented")
}
func (UnimplementedOpServiceServer) NodeMountDisk(context.Context, *MountDiskInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeMountDisk not implemented")
}
func (UnimplementedOpServiceServer) SealingAbort(context.Context, *FilRestWorker) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealingAbort not implemented")
}
func (UnimplementedOpServiceServer) LocalSectors(context.Context, *Actor) (*SectorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalSectors not implemented")
}
func (UnimplementedOpServiceServer) NodeAddShareDir(context.Context, *MountDiskInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAddShareDir not implemented")
}
func (UnimplementedOpServiceServer) OpReplacePlugFile(context.Context, *OpReplaceFileInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpReplacePlugFile not implemented")
}
func (UnimplementedOpServiceServer) OpReplacePlugFile1(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpReplacePlugFile1 not implemented")
}
func (UnimplementedOpServiceServer) CheckLotusHeart(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLotusHeart not implemented")
}
func (UnimplementedOpServiceServer) GetOpMonitorInfo(context.Context, *OpHardwareInfo) (*MonitorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpMonitorInfo not implemented")
}
func (UnimplementedOpServiceServer) GetOpScriptInfo(context.Context, *OpScriptInfo) (*OpScriptInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpScriptInfo not implemented")
}
func (UnimplementedOpServiceServer) GetDiskLetter(context.Context, *DiskLetterReq) (*OpScriptInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskLetter not implemented")
}
func (UnimplementedOpServiceServer) GetOpMountInfo(context.Context, *DiskLetterReq) (*OpMountDiskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpMountInfo not implemented")
}
func (UnimplementedOpServiceServer) GetOpLogInfo(context.Context, *OpLogInfoReq) (*OpLogInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpLogInfo not implemented")
}
func (UnimplementedOpServiceServer) GetOpLogLen(context.Context, *OpLogInfoReq) (*OpLogLenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpLogLen not implemented")
}
func (UnimplementedOpServiceServer) GetNodeMinerInfo(context.Context, *OpHardwareInfo) (*NodeMinerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMinerInfo not implemented")
}
func (UnimplementedOpServiceServer) UninstallMountDisk(context.Context, *MountDiskInfo) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallMountDisk not implemented")
}

// UnsafeOpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpServiceServer will
// result in compilation errors.
type UnsafeOpServiceServer interface {
	mustEmbedUnimplementedOpServiceServer()
}

func RegisterOpServiceServer(s grpc.ServiceRegistrar, srv OpServiceServer) {
	s.RegisterService(&OpService_ServiceDesc, srv)
}

func _OpService_OpC2Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpC2Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpC2Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpC2Connect(ctx, req.(*RequestConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).Heartbeat(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpC2Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpC2Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpC2Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpC2Heartbeat(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_WorkerTaksRunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).WorkerTaksRunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/WorkerTaksRunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).WorkerTaksRunList(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_Ok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).Ok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/Ok",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).Ok(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OkNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OkNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OkNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OkNew(ctx, req.(*MinerSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddRunning(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_SubRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).SubRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/SubRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).SubRunning(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_ResetWorkerRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerTasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).ResetWorkerRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/ResetWorkerRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).ResetWorkerRunning(ctx, req.(*WorkerTasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_SetPreNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).SetPreNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/SetPreNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).SetPreNumber(ctx, req.(*PreNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetSystemInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_StrategyProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).StrategyProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/StrategyProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).StrategyProcess(ctx, req.(*StrategyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_ExecuteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).ExecuteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/ExecuteScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).ExecuteScript(ctx, req.(*ScriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_FileDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).FileDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/FileDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).FileDistribution(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunNewLotus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotusInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunNewLotus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunNewLotus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunNewLotus(ctx, req.(*LotusInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetWalletList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetWalletList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetWalletList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetWalletList(ctx, req.(*RequestConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunNewMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunNewMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunNewMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunNewMiner(ctx, req.(*MinerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunMiner(ctx, req.(*MinerRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunBoost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunBoost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunBoost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunBoost(ctx, req.(*BoostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunNewWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunNewWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunNewWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunNewWorker(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunWorker(ctx, req.(*FilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/UpdateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).UpdateWorker(ctx, req.(*ConnectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunNewStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunNewStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunNewStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunNewStorage(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddNodeStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddNodeStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddNodeStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddNodeStorage(ctx, req.(*StorageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunAndStopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunStopType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunAndStopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunAndStopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunAndStopService(ctx, req.(*RunStopType))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_FileOpSynGateWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).FileOpSynGateWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/FileOpSynGateWay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).FileOpSynGateWay(ctx, req.(*AddFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_SysFileFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).SysFileFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/SysFileFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).SysFileFrom(ctx, req.(*SynFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_ClearWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).ClearWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/ClearWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).ClearWorker(ctx, req.(*RequestOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_DownLoadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownLoadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).DownLoadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/DownLoadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).DownLoadFiles(ctx, req.(*DownLoadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_UnZipSynFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).UnZipSynFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/UnZipSynFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).UnZipSynFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_LotusHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).LotusHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/LotusHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).LotusHeight(ctx, req.(*RequestOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_DelOpFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).DelOpFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/DelOpFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).DelOpFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_DelGateWayFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).DelGateWayFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/DelGateWayFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).DelGateWayFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_CreateOpFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).CreateOpFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/CreateOpFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).CreateOpFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpC2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpC2Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpC2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpC2Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpC2Client(ctx, req.(*OpC2Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_CompleteCommit2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).CompleteCommit2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/CompleteCommit2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).CompleteCommit2(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddGateWayFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddGateWayFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddGateWayFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddGateWayFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpFilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpFilePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpFilePath(ctx, req.(*OpFilePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarnInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddWarn(ctx, req.(*WarnInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddBadSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BadSectorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddBadSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddBadSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddBadSector(ctx, req.(*BadSectorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpFileToGateWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpFileToGateWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpFileToGateWay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpFileToGateWay(ctx, req.(*AddFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_CheckOpPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).CheckOpPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/CheckOpPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).CheckOpPath(ctx, req.(*DirFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_CarFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).CarFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/CarFilePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).CarFilePath(ctx, req.(*CarFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_ScriptStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).ScriptStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/ScriptStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).ScriptStop(ctx, req.(*ScriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_Commit2TaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).Commit2TaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/Commit2TaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).Commit2TaskResult(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_C2FileSynStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).C2FileSynStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/C2FileSynStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).C2FileSynStatus(ctx, req.(*C2SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_C2FileSynLotus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).C2FileSynLotus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/C2FileSynLotus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).C2FileSynLotus(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetGateWayFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetGateWayFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetGateWayFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetGateWayFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RunOpC2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RunOpC2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RunOpC2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RunOpC2(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_StopOpC2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).StopOpC2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/StopOpC2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).StopOpC2(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RedoC2Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RedoC2Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RedoC2Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RedoC2Task(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpInformationTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostTestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpInformationTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpInformationTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpInformationTest(ctx, req.(*HostTestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_UpdateSectorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).UpdateSectorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/UpdateSectorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).UpdateSectorStatus(ctx, req.(*SectorStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorTicket(ctx, req.(*SectorTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorCommDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorCommDR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorCommDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorCommDR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorCommDR(ctx, req.(*SectorCommDR))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorWaitSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorSeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorWaitSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorWaitSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorWaitSeed(ctx, req.(*SectorSeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorCommit2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorCommit2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorCommit2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorCommit2(ctx, req.(*SectorProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorPreCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorCID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorPreCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorPreCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorPreCID(ctx, req.(*SectorCID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorCommitCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorCID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorCommitCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorCommitCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorCommitCID(ctx, req.(*SectorCID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpInformationPatrol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPatrolInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpInformationPatrol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpInformationPatrol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpInformationPatrol(ctx, req.(*HostPatrolInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_CloseOpInformationTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseHostTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).CloseOpInformationTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/CloseOpInformationTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).CloseOpInformationTest(ctx, req.(*CloseHostTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpInformationTestRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartHostTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpInformationTestRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpInformationTestRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpInformationTestRestart(ctx, req.(*RestartHostTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpHardwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHardwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpHardwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpHardwareInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpHardwareInfo(ctx, req.(*OpHardwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_Commit2TaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealerParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).Commit2TaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/Commit2TaskRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).Commit2TaskRun(ctx, req.(*SealerParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetRunningCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetRunningCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetRunningCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetRunningCount(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetRunningList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetRunningList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetRunningList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetRunningList(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorPiece)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorPiece(ctx, req.(*SectorPiece))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddSectorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddSectorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddSectorLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddSectorLog(ctx, req.(*SectorLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_RedoSectorsTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorsTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).RedoSectorsTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/RedoSectorsTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).RedoSectorsTask(ctx, req.(*SectorsTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_UpdateSectorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).UpdateSectorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/UpdateSectorLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).UpdateSectorLog(ctx, req.(*SectorLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpServerPortControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpServerPortControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpServerPortControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpServerPortControl(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetStorageByActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetStorageByActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetStorageByActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetStorageByActor(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_CloseOpServerPortControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).CloseOpServerPortControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/CloseOpServerPortControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).CloseOpServerPortControl(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_EditMinerApCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).EditMinerApCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/EditMinerApCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).EditMinerApCount(ctx, req.(*PledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpCheckBadSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCheckDiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpCheckBadSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpCheckBadSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpCheckBadSector(ctx, req.(*HostCheckDiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AddC2Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AddC2Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AddC2Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AddC2Task(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_DelC2Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).DelC2Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/DelC2Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).DelC2Task(ctx, req.(*SectorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_KillBenchAndScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).KillBenchAndScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/KillBenchAndScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).KillBenchAndScript(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_AcquireSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).AcquireSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/AcquireSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).AcquireSector(ctx, req.(*SectorRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetColony_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetColony(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetColony",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetColony(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_NodeMountDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountDiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).NodeMountDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/NodeMountDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).NodeMountDisk(ctx, req.(*MountDiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_SealingAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilRestWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).SealingAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/SealingAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).SealingAbort(ctx, req.(*FilRestWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_LocalSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).LocalSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/localSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).LocalSectors(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_NodeAddShareDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountDiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).NodeAddShareDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/NodeAddShareDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).NodeAddShareDir(ctx, req.(*MountDiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpReplacePlugFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpReplaceFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpReplacePlugFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpReplacePlugFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpReplacePlugFile(ctx, req.(*OpReplaceFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_OpReplacePlugFile1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).OpReplacePlugFile1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/OpReplacePlugFile1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).OpReplacePlugFile1(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_CheckLotusHeart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).CheckLotusHeart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/CheckLotusHeart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).CheckLotusHeart(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpMonitorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHardwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpMonitorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpMonitorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpMonitorInfo(ctx, req.(*OpHardwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpScriptInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpScriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpScriptInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpScriptInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpScriptInfo(ctx, req.(*OpScriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetDiskLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskLetterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetDiskLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetDiskLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetDiskLetter(ctx, req.(*DiskLetterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpMountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskLetterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpMountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpMountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpMountInfo(ctx, req.(*DiskLetterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpLogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpLogInfo(ctx, req.(*OpLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetOpLogLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetOpLogLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetOpLogLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetOpLogLen(ctx, req.(*OpLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_GetNodeMinerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpHardwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).GetNodeMinerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/GetNodeMinerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).GetNodeMinerInfo(ctx, req.(*OpHardwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpService_UninstallMountDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountDiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpServiceServer).UninstallMountDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpService/UninstallMountDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpServiceServer).UninstallMountDisk(ctx, req.(*MountDiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// OpService_ServiceDesc is the grpc.ServiceDesc for OpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpService",
	HandlerType: (*OpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpC2Connect",
			Handler:    _OpService_OpC2Connect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _OpService_Heartbeat_Handler,
		},
		{
			MethodName: "OpC2Heartbeat",
			Handler:    _OpService_OpC2Heartbeat_Handler,
		},
		{
			MethodName: "WorkerTaksRunList",
			Handler:    _OpService_WorkerTaksRunList_Handler,
		},
		{
			MethodName: "Ok",
			Handler:    _OpService_Ok_Handler,
		},
		{
			MethodName: "OkNew",
			Handler:    _OpService_OkNew_Handler,
		},
		{
			MethodName: "AddRunning",
			Handler:    _OpService_AddRunning_Handler,
		},
		{
			MethodName: "SubRunning",
			Handler:    _OpService_SubRunning_Handler,
		},
		{
			MethodName: "ResetWorkerRunning",
			Handler:    _OpService_ResetWorkerRunning_Handler,
		},
		{
			MethodName: "SetPreNumber",
			Handler:    _OpService_SetPreNumber_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _OpService_GetSystemInfo_Handler,
		},
		{
			MethodName: "StrategyProcess",
			Handler:    _OpService_StrategyProcess_Handler,
		},
		{
			MethodName: "ExecuteScript",
			Handler:    _OpService_ExecuteScript_Handler,
		},
		{
			MethodName: "FileDistribution",
			Handler:    _OpService_FileDistribution_Handler,
		},
		{
			MethodName: "RunNewLotus",
			Handler:    _OpService_RunNewLotus_Handler,
		},
		{
			MethodName: "GetWalletList",
			Handler:    _OpService_GetWalletList_Handler,
		},
		{
			MethodName: "RunNewMiner",
			Handler:    _OpService_RunNewMiner_Handler,
		},
		{
			MethodName: "RunMiner",
			Handler:    _OpService_RunMiner_Handler,
		},
		{
			MethodName: "RunBoost",
			Handler:    _OpService_RunBoost_Handler,
		},
		{
			MethodName: "RunNewWorker",
			Handler:    _OpService_RunNewWorker_Handler,
		},
		{
			MethodName: "RunWorker",
			Handler:    _OpService_RunWorker_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _OpService_UpdateWorker_Handler,
		},
		{
			MethodName: "RunNewStorage",
			Handler:    _OpService_RunNewStorage_Handler,
		},
		{
			MethodName: "AddNodeStorage",
			Handler:    _OpService_AddNodeStorage_Handler,
		},
		{
			MethodName: "RunAndStopService",
			Handler:    _OpService_RunAndStopService_Handler,
		},
		{
			MethodName: "FileOpSynGateWay",
			Handler:    _OpService_FileOpSynGateWay_Handler,
		},
		{
			MethodName: "SysFileFrom",
			Handler:    _OpService_SysFileFrom_Handler,
		},
		{
			MethodName: "ClearWorker",
			Handler:    _OpService_ClearWorker_Handler,
		},
		{
			MethodName: "DownLoadFiles",
			Handler:    _OpService_DownLoadFiles_Handler,
		},
		{
			MethodName: "UnZipSynFile",
			Handler:    _OpService_UnZipSynFile_Handler,
		},
		{
			MethodName: "LotusHeight",
			Handler:    _OpService_LotusHeight_Handler,
		},
		{
			MethodName: "DelOpFile",
			Handler:    _OpService_DelOpFile_Handler,
		},
		{
			MethodName: "DelGateWayFile",
			Handler:    _OpService_DelGateWayFile_Handler,
		},
		{
			MethodName: "CreateOpFile",
			Handler:    _OpService_CreateOpFile_Handler,
		},
		{
			MethodName: "GetOpC2Client",
			Handler:    _OpService_GetOpC2Client_Handler,
		},
		{
			MethodName: "CompleteCommit2",
			Handler:    _OpService_CompleteCommit2_Handler,
		},
		{
			MethodName: "AddGateWayFile",
			Handler:    _OpService_AddGateWayFile_Handler,
		},
		{
			MethodName: "GetOpFilePath",
			Handler:    _OpService_GetOpFilePath_Handler,
		},
		{
			MethodName: "AddWarn",
			Handler:    _OpService_AddWarn_Handler,
		},
		{
			MethodName: "AddBadSector",
			Handler:    _OpService_AddBadSector_Handler,
		},
		{
			MethodName: "OpFileToGateWay",
			Handler:    _OpService_OpFileToGateWay_Handler,
		},
		{
			MethodName: "CheckOpPath",
			Handler:    _OpService_CheckOpPath_Handler,
		},
		{
			MethodName: "CarFilePath",
			Handler:    _OpService_CarFilePath_Handler,
		},
		{
			MethodName: "ScriptStop",
			Handler:    _OpService_ScriptStop_Handler,
		},
		{
			MethodName: "Commit2TaskResult",
			Handler:    _OpService_Commit2TaskResult_Handler,
		},
		{
			MethodName: "C2FileSynStatus",
			Handler:    _OpService_C2FileSynStatus_Handler,
		},
		{
			MethodName: "C2FileSynLotus",
			Handler:    _OpService_C2FileSynLotus_Handler,
		},
		{
			MethodName: "GetGateWayFile",
			Handler:    _OpService_GetGateWayFile_Handler,
		},
		{
			MethodName: "RunOpC2",
			Handler:    _OpService_RunOpC2_Handler,
		},
		{
			MethodName: "StopOpC2",
			Handler:    _OpService_StopOpC2_Handler,
		},
		{
			MethodName: "RedoC2Task",
			Handler:    _OpService_RedoC2Task_Handler,
		},
		{
			MethodName: "OpInformationTest",
			Handler:    _OpService_OpInformationTest_Handler,
		},
		{
			MethodName: "UpdateSectorStatus",
			Handler:    _OpService_UpdateSectorStatus_Handler,
		},
		{
			MethodName: "AddSectorTicket",
			Handler:    _OpService_AddSectorTicket_Handler,
		},
		{
			MethodName: "AddSectorCommDR",
			Handler:    _OpService_AddSectorCommDR_Handler,
		},
		{
			MethodName: "AddSectorWaitSeed",
			Handler:    _OpService_AddSectorWaitSeed_Handler,
		},
		{
			MethodName: "AddSectorCommit2",
			Handler:    _OpService_AddSectorCommit2_Handler,
		},
		{
			MethodName: "AddSectorPreCID",
			Handler:    _OpService_AddSectorPreCID_Handler,
		},
		{
			MethodName: "AddSectorCommitCID",
			Handler:    _OpService_AddSectorCommitCID_Handler,
		},
		{
			MethodName: "OpInformationPatrol",
			Handler:    _OpService_OpInformationPatrol_Handler,
		},
		{
			MethodName: "CloseOpInformationTest",
			Handler:    _OpService_CloseOpInformationTest_Handler,
		},
		{
			MethodName: "OpInformationTestRestart",
			Handler:    _OpService_OpInformationTestRestart_Handler,
		},
		{
			MethodName: "GetOpHardwareInfo",
			Handler:    _OpService_GetOpHardwareInfo_Handler,
		},
		{
			MethodName: "Commit2TaskRun",
			Handler:    _OpService_Commit2TaskRun_Handler,
		},
		{
			MethodName: "GetRunningCount",
			Handler:    _OpService_GetRunningCount_Handler,
		},
		{
			MethodName: "GetRunningList",
			Handler:    _OpService_GetRunningList_Handler,
		},
		{
			MethodName: "AddSectorPiece",
			Handler:    _OpService_AddSectorPiece_Handler,
		},
		{
			MethodName: "AddSectorLog",
			Handler:    _OpService_AddSectorLog_Handler,
		},
		{
			MethodName: "RedoSectorsTask",
			Handler:    _OpService_RedoSectorsTask_Handler,
		},
		{
			MethodName: "UpdateSectorLog",
			Handler:    _OpService_UpdateSectorLog_Handler,
		},
		{
			MethodName: "OpServerPortControl",
			Handler:    _OpService_OpServerPortControl_Handler,
		},
		{
			MethodName: "GetStorageByActor",
			Handler:    _OpService_GetStorageByActor_Handler,
		},
		{
			MethodName: "CloseOpServerPortControl",
			Handler:    _OpService_CloseOpServerPortControl_Handler,
		},
		{
			MethodName: "EditMinerApCount",
			Handler:    _OpService_EditMinerApCount_Handler,
		},
		{
			MethodName: "OpCheckBadSector",
			Handler:    _OpService_OpCheckBadSector_Handler,
		},
		{
			MethodName: "AddC2Task",
			Handler:    _OpService_AddC2Task_Handler,
		},
		{
			MethodName: "DelC2Task",
			Handler:    _OpService_DelC2Task_Handler,
		},
		{
			MethodName: "KillBenchAndScript",
			Handler:    _OpService_KillBenchAndScript_Handler,
		},
		{
			MethodName: "AcquireSector",
			Handler:    _OpService_AcquireSector_Handler,
		},
		{
			MethodName: "GetColony",
			Handler:    _OpService_GetColony_Handler,
		},
		{
			MethodName: "NodeMountDisk",
			Handler:    _OpService_NodeMountDisk_Handler,
		},
		{
			MethodName: "SealingAbort",
			Handler:    _OpService_SealingAbort_Handler,
		},
		{
			MethodName: "localSectors",
			Handler:    _OpService_LocalSectors_Handler,
		},
		{
			MethodName: "NodeAddShareDir",
			Handler:    _OpService_NodeAddShareDir_Handler,
		},
		{
			MethodName: "OpReplacePlugFile",
			Handler:    _OpService_OpReplacePlugFile_Handler,
		},
		{
			MethodName: "OpReplacePlugFile1",
			Handler:    _OpService_OpReplacePlugFile1_Handler,
		},
		{
			MethodName: "CheckLotusHeart",
			Handler:    _OpService_CheckLotusHeart_Handler,
		},
		{
			MethodName: "GetOpMonitorInfo",
			Handler:    _OpService_GetOpMonitorInfo_Handler,
		},
		{
			MethodName: "GetOpScriptInfo",
			Handler:    _OpService_GetOpScriptInfo_Handler,
		},
		{
			MethodName: "GetDiskLetter",
			Handler:    _OpService_GetDiskLetter_Handler,
		},
		{
			MethodName: "GetOpMountInfo",
			Handler:    _OpService_GetOpMountInfo_Handler,
		},
		{
			MethodName: "GetOpLogInfo",
			Handler:    _OpService_GetOpLogInfo_Handler,
		},
		{
			MethodName: "GetOpLogLen",
			Handler:    _OpService_GetOpLogLen_Handler,
		},
		{
			MethodName: "GetNodeMinerInfo",
			Handler:    _OpService_GetNodeMinerInfo_Handler,
		},
		{
			MethodName: "UninstallMountDisk",
			Handler:    _OpService_UninstallMountDisk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/proto/op.proto",
}
